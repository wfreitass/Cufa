/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/views/elegant/plugins/chart.min.js":
/*!******************************************************!*\
  !*** ./resources/views/elegant/plugins/chart.min.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _get2() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get2 = Reflect.get.bind(); } else { _get2 = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get2.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e60) { throw _e60; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e61) { didErr = true; err = _e61; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * Chart.js v3.3.2\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  var t = \"undefined\" == typeof window ? function (t) {\n    return t();\n  } : window.requestAnimationFrame;\n\n  function e(e, i, n) {\n    var o = n || function (t) {\n      return Array.prototype.slice.call(t);\n    };\n\n    var s = !1,\n        a = [];\n    return function () {\n      for (var _len = arguments.length, n = new Array(_len), _key = 0; _key < _len; _key++) {\n        n[_key] = arguments[_key];\n      }\n\n      a = o(n), s || (s = !0, t.call(window, function () {\n        s = !1, e.apply(i, a);\n      }));\n    };\n  }\n\n  function i(t, e) {\n    var i;\n    return function () {\n      return e ? (clearTimeout(i), i = setTimeout(t, e)) : t(), e;\n    };\n  }\n\n  var n = function n(t) {\n    return \"start\" === t ? \"left\" : \"end\" === t ? \"right\" : \"center\";\n  },\n      o = function o(t, e, i) {\n    return \"start\" === t ? e : \"end\" === t ? i : (e + i) / 2;\n  },\n      s = function s(t, e, i) {\n    return \"right\" === t ? i : \"center\" === t ? (e + i) / 2 : e;\n  };\n\n  var a = new ( /*#__PURE__*/function () {\n    function _class() {\n      _classCallCheck(this, _class);\n\n      this._request = null, this._charts = new Map(), this._running = !1, this._lastDate = void 0;\n    }\n\n    _createClass(_class, [{\n      key: \"_notify\",\n      value: function _notify(t, e, i, n) {\n        var o = e.listeners[n],\n            s = e.duration;\n        o.forEach(function (n) {\n          return n({\n            chart: t,\n            initial: e.initial,\n            numSteps: s,\n            currentStep: Math.min(i - e.start, s)\n          });\n        });\n      }\n    }, {\n      key: \"_refresh\",\n      value: function _refresh() {\n        var e = this;\n        e._request || (e._running = !0, e._request = t.call(window, function () {\n          e._update(), e._request = null, e._running && e._refresh();\n        }));\n      }\n    }, {\n      key: \"_update\",\n      value: function _update() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n        var e = this;\n        var i = 0;\n        e._charts.forEach(function (n, o) {\n          if (!n.running || !n.items.length) return;\n          var s = n.items;\n          var a,\n              r = s.length - 1,\n              l = !1;\n\n          for (; r >= 0; --r) {\n            a = s[r], a._active ? (a._total > n.duration && (n.duration = a._total), a.tick(t), l = !0) : (s[r] = s[s.length - 1], s.pop());\n          }\n\n          l && (o.draw(), e._notify(o, n, t, \"progress\")), s.length || (n.running = !1, e._notify(o, n, t, \"complete\"), n.initial = !1), i += s.length;\n        }), e._lastDate = t, 0 === i && (e._running = !1);\n      }\n    }, {\n      key: \"_getAnims\",\n      value: function _getAnims(t) {\n        var e = this._charts;\n        var i = e.get(t);\n        return i || (i = {\n          running: !1,\n          initial: !0,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        }, e.set(t, i)), i;\n      }\n    }, {\n      key: \"listen\",\n      value: function listen(t, e, i) {\n        this._getAnims(t).listeners[e].push(i);\n      }\n    }, {\n      key: \"add\",\n      value: function add(t, e) {\n        var _this$_getAnims$items;\n\n        e && e.length && (_this$_getAnims$items = this._getAnims(t).items).push.apply(_this$_getAnims$items, _toConsumableArray(e));\n      }\n    }, {\n      key: \"has\",\n      value: function has(t) {\n        return this._getAnims(t).items.length > 0;\n      }\n    }, {\n      key: \"start\",\n      value: function start(t) {\n        var e = this._charts.get(t);\n\n        e && (e.running = !0, e.start = Date.now(), e.duration = e.items.reduce(function (t, e) {\n          return Math.max(t, e._duration);\n        }, 0), this._refresh());\n      }\n    }, {\n      key: \"running\",\n      value: function running(t) {\n        if (!this._running) return !1;\n\n        var e = this._charts.get(t);\n\n        return !!(e && e.running && e.items.length);\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(t) {\n        var e = this._charts.get(t);\n\n        if (!e || !e.items.length) return;\n        var i = e.items;\n        var n = i.length - 1;\n\n        for (; n >= 0; --n) {\n          i[n].cancel();\n        }\n\n        e.items = [], this._notify(t, e, Date.now(), \"complete\");\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(t) {\n        return this._charts[\"delete\"](t);\n      }\n    }]);\n\n    return _class;\n  }())();\n  /*!\n   * @kurkle/color v0.1.9\n   * https://github.com/kurkle/color#readme\n   * (c) 2020 Jukka Kurkela\n   * Released under the MIT License\n   */\n\n  var r = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15\n  },\n      l = \"0123456789ABCDEF\",\n      c = function c(t) {\n    return l[15 & t];\n  },\n      h = function h(t) {\n    return l[(240 & t) >> 4] + l[15 & t];\n  },\n      d = function d(t) {\n    return (240 & t) >> 4 == (15 & t);\n  };\n\n  function u(t) {\n    var e = function (t) {\n      return d(t.r) && d(t.g) && d(t.b) && d(t.a);\n    }(t) ? c : h;\n    return t ? \"#\" + e(t.r) + e(t.g) + e(t.b) + (t.a < 255 ? e(t.a) : \"\") : t;\n  }\n\n  function f(t) {\n    return t + .5 | 0;\n  }\n\n  var g = function g(t, e, i) {\n    return Math.max(Math.min(t, i), e);\n  };\n\n  function p(t) {\n    return g(f(2.55 * t), 0, 255);\n  }\n\n  function m(t) {\n    return g(f(255 * t), 0, 255);\n  }\n\n  function x(t) {\n    return g(f(t / 2.55) / 100, 0, 1);\n  }\n\n  function b(t) {\n    return g(f(100 * t), 0, 100);\n  }\n\n  var _ = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n  var y = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\n  function v(t, e, i) {\n    var n = e * Math.min(i, 1 - i),\n        o = function o(e) {\n      var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (e + t / 30) % 12;\n      return i - n * Math.max(Math.min(o - 3, 9 - o, 1), -1);\n    };\n\n    return [o(0), o(8), o(4)];\n  }\n\n  function w(t, e, i) {\n    var n = function n(_n2) {\n      var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (_n2 + t / 60) % 6;\n      return i - i * e * Math.max(Math.min(o, 4 - o, 1), 0);\n    };\n\n    return [n(5), n(3), n(1)];\n  }\n\n  function M(t, e, i) {\n    var n = v(t, 1, .5);\n    var o;\n\n    for (e + i > 1 && (o = 1 / (e + i), e *= o, i *= o), o = 0; o < 3; o++) {\n      n[o] *= 1 - e - i, n[o] += e;\n    }\n\n    return n;\n  }\n\n  function k(t) {\n    var e = t.r / 255,\n        i = t.g / 255,\n        n = t.b / 255,\n        o = Math.max(e, i, n),\n        s = Math.min(e, i, n),\n        a = (o + s) / 2;\n    var r, l, c;\n    return o !== s && (c = o - s, l = a > .5 ? c / (2 - o - s) : c / (o + s), r = o === e ? (i - n) / c + (i < n ? 6 : 0) : o === i ? (n - e) / c + 2 : (e - i) / c + 4, r = 60 * r + .5), [0 | r, l || 0, a];\n  }\n\n  function S(t, e, i, n) {\n    return (Array.isArray(e) ? t(e[0], e[1], e[2]) : t(e, i, n)).map(m);\n  }\n\n  function P(t, e, i) {\n    return S(v, t, e, i);\n  }\n\n  function D(t) {\n    return (t % 360 + 360) % 360;\n  }\n\n  function C(t) {\n    var e = y.exec(t);\n    var i,\n        n = 255;\n    if (!e) return;\n    e[5] !== i && (n = e[6] ? p(+e[5]) : m(+e[5]));\n    var o = D(+e[2]),\n        s = +e[3] / 100,\n        a = +e[4] / 100;\n    return i = \"hwb\" === e[1] ? function (t, e, i) {\n      return S(M, t, e, i);\n    }(o, s, a) : \"hsv\" === e[1] ? function (t, e, i) {\n      return S(w, t, e, i);\n    }(o, s, a) : P(o, s, a), {\n      r: i[0],\n      g: i[1],\n      b: i[2],\n      a: n\n    };\n  }\n\n  var O = {\n    x: \"dark\",\n    Z: \"light\",\n    Y: \"re\",\n    X: \"blu\",\n    W: \"gr\",\n    V: \"medium\",\n    U: \"slate\",\n    A: \"ee\",\n    T: \"ol\",\n    S: \"or\",\n    B: \"ra\",\n    C: \"lateg\",\n    D: \"ights\",\n    R: \"in\",\n    Q: \"turquois\",\n    E: \"hi\",\n    P: \"ro\",\n    O: \"al\",\n    N: \"le\",\n    M: \"de\",\n    L: \"yello\",\n    F: \"en\",\n    K: \"ch\",\n    G: \"arks\",\n    H: \"ea\",\n    I: \"ightg\",\n    J: \"wh\"\n  },\n      T = {\n    OiceXe: \"f0f8ff\",\n    antiquewEte: \"faebd7\",\n    aqua: \"ffff\",\n    aquamarRe: \"7fffd4\",\n    azuY: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"0\",\n    blanKedOmond: \"ffebcd\",\n    Xe: \"ff\",\n    XeviTet: \"8a2be2\",\n    bPwn: \"a52a2a\",\n    burlywood: \"deb887\",\n    caMtXe: \"5f9ea0\",\n    KartYuse: \"7fff00\",\n    KocTate: \"d2691e\",\n    cSO: \"ff7f50\",\n    cSnflowerXe: \"6495ed\",\n    cSnsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"ffff\",\n    xXe: \"8b\",\n    xcyan: \"8b8b\",\n    xgTMnPd: \"b8860b\",\n    xWay: \"a9a9a9\",\n    xgYF: \"6400\",\n    xgYy: \"a9a9a9\",\n    xkhaki: \"bdb76b\",\n    xmagFta: \"8b008b\",\n    xTivegYF: \"556b2f\",\n    xSange: \"ff8c00\",\n    xScEd: \"9932cc\",\n    xYd: \"8b0000\",\n    xsOmon: \"e9967a\",\n    xsHgYF: \"8fbc8f\",\n    xUXe: \"483d8b\",\n    xUWay: \"2f4f4f\",\n    xUgYy: \"2f4f4f\",\n    xQe: \"ced1\",\n    xviTet: \"9400d3\",\n    dAppRk: \"ff1493\",\n    dApskyXe: \"bfff\",\n    dimWay: \"696969\",\n    dimgYy: \"696969\",\n    dodgerXe: \"1e90ff\",\n    fiYbrick: \"b22222\",\n    flSOwEte: \"fffaf0\",\n    foYstWAn: \"228b22\",\n    fuKsia: \"ff00ff\",\n    gaRsbSo: \"dcdcdc\",\n    ghostwEte: \"f8f8ff\",\n    gTd: \"ffd700\",\n    gTMnPd: \"daa520\",\n    Way: \"808080\",\n    gYF: \"8000\",\n    gYFLw: \"adff2f\",\n    gYy: \"808080\",\n    honeyMw: \"f0fff0\",\n    hotpRk: \"ff69b4\",\n    RdianYd: \"cd5c5c\",\n    Rdigo: \"4b0082\",\n    ivSy: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavFMr: \"e6e6fa\",\n    lavFMrXsh: \"fff0f5\",\n    lawngYF: \"7cfc00\",\n    NmoncEffon: \"fffacd\",\n    ZXe: \"add8e6\",\n    ZcSO: \"f08080\",\n    Zcyan: \"e0ffff\",\n    ZgTMnPdLw: \"fafad2\",\n    ZWay: \"d3d3d3\",\n    ZgYF: \"90ee90\",\n    ZgYy: \"d3d3d3\",\n    ZpRk: \"ffb6c1\",\n    ZsOmon: \"ffa07a\",\n    ZsHgYF: \"20b2aa\",\n    ZskyXe: \"87cefa\",\n    ZUWay: \"778899\",\n    ZUgYy: \"778899\",\n    ZstAlXe: \"b0c4de\",\n    ZLw: \"ffffe0\",\n    lime: \"ff00\",\n    limegYF: \"32cd32\",\n    lRF: \"faf0e6\",\n    magFta: \"ff00ff\",\n    maPon: \"800000\",\n    VaquamarRe: \"66cdaa\",\n    VXe: \"cd\",\n    VScEd: \"ba55d3\",\n    VpurpN: \"9370db\",\n    VsHgYF: \"3cb371\",\n    VUXe: \"7b68ee\",\n    VsprRggYF: \"fa9a\",\n    VQe: \"48d1cc\",\n    VviTetYd: \"c71585\",\n    midnightXe: \"191970\",\n    mRtcYam: \"f5fffa\",\n    mistyPse: \"ffe4e1\",\n    moccasR: \"ffe4b5\",\n    navajowEte: \"ffdead\",\n    navy: \"80\",\n    Tdlace: \"fdf5e6\",\n    Tive: \"808000\",\n    TivedBb: \"6b8e23\",\n    Sange: \"ffa500\",\n    SangeYd: \"ff4500\",\n    ScEd: \"da70d6\",\n    pOegTMnPd: \"eee8aa\",\n    pOegYF: \"98fb98\",\n    pOeQe: \"afeeee\",\n    pOeviTetYd: \"db7093\",\n    papayawEp: \"ffefd5\",\n    pHKpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pRk: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powMrXe: \"b0e0e6\",\n    purpN: \"800080\",\n    YbeccapurpN: \"663399\",\n    Yd: \"ff0000\",\n    Psybrown: \"bc8f8f\",\n    PyOXe: \"4169e1\",\n    saddNbPwn: \"8b4513\",\n    sOmon: \"fa8072\",\n    sandybPwn: \"f4a460\",\n    sHgYF: \"2e8b57\",\n    sHshell: \"fff5ee\",\n    siFna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyXe: \"87ceeb\",\n    UXe: \"6a5acd\",\n    UWay: \"708090\",\n    UgYy: \"708090\",\n    snow: \"fffafa\",\n    sprRggYF: \"ff7f\",\n    stAlXe: \"4682b4\",\n    tan: \"d2b48c\",\n    teO: \"8080\",\n    tEstN: \"d8bfd8\",\n    tomato: \"ff6347\",\n    Qe: \"40e0d0\",\n    viTet: \"ee82ee\",\n    JHt: \"f5deb3\",\n    wEte: \"ffffff\",\n    wEtesmoke: \"f5f5f5\",\n    Lw: \"ffff00\",\n    LwgYF: \"9acd32\"\n  };\n  var A;\n\n  function L(t) {\n    A || (A = function () {\n      var t = {},\n          e = Object.keys(T),\n          i = Object.keys(O);\n      var n, o, s, a, r;\n\n      for (n = 0; n < e.length; n++) {\n        for (a = r = e[n], o = 0; o < i.length; o++) {\n          s = i[o], r = r.replace(s, O[s]);\n        }\n\n        s = parseInt(T[a], 16), t[r] = [s >> 16 & 255, s >> 8 & 255, 255 & s];\n      }\n\n      return t;\n    }(), A.transparent = [0, 0, 0, 0]);\n    var e = A[t.toLowerCase()];\n    return e && {\n      r: e[0],\n      g: e[1],\n      b: e[2],\n      a: 4 === e.length ? e[3] : 255\n    };\n  }\n\n  function R(t, e, i) {\n    if (t) {\n      var _n3 = k(t);\n\n      _n3[e] = Math.max(0, Math.min(_n3[e] + _n3[e] * i, 0 === e ? 360 : 1)), _n3 = P(_n3), t.r = _n3[0], t.g = _n3[1], t.b = _n3[2];\n    }\n  }\n\n  function E(t, e) {\n    return t ? Object.assign(e || {}, t) : t;\n  }\n\n  function I(t) {\n    var e = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 255\n    };\n    return Array.isArray(t) ? t.length >= 3 && (e = {\n      r: t[0],\n      g: t[1],\n      b: t[2],\n      a: 255\n    }, t.length > 3 && (e.a = m(t[3]))) : (e = E(t, {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    })).a = m(e.a), e;\n  }\n\n  function z(t) {\n    return \"r\" === t.charAt(0) ? function (t) {\n      var e = _.exec(t);\n\n      var i,\n          n,\n          o,\n          s = 255;\n\n      if (e) {\n        if (e[7] !== i) {\n          var _t2 = +e[7];\n\n          s = 255 & (e[8] ? p(_t2) : 255 * _t2);\n        }\n\n        return i = +e[1], n = +e[3], o = +e[5], i = 255 & (e[2] ? p(i) : i), n = 255 & (e[4] ? p(n) : n), o = 255 & (e[6] ? p(o) : o), {\n          r: i,\n          g: n,\n          b: o,\n          a: s\n        };\n      }\n    }(t) : C(t);\n  }\n\n  var F = /*#__PURE__*/function () {\n    function F(t) {\n      _classCallCheck(this, F);\n\n      if (t instanceof F) return t;\n\n      var e = _typeof(t);\n\n      var i;\n      var n, o, s;\n      \"object\" === e ? i = I(t) : \"string\" === e && (s = (n = t).length, \"#\" === n[0] && (4 === s || 5 === s ? o = {\n        r: 255 & 17 * r[n[1]],\n        g: 255 & 17 * r[n[2]],\n        b: 255 & 17 * r[n[3]],\n        a: 5 === s ? 17 * r[n[4]] : 255\n      } : 7 !== s && 9 !== s || (o = {\n        r: r[n[1]] << 4 | r[n[2]],\n        g: r[n[3]] << 4 | r[n[4]],\n        b: r[n[5]] << 4 | r[n[6]],\n        a: 9 === s ? r[n[7]] << 4 | r[n[8]] : 255\n      })), i = o || L(t) || z(t)), this._rgb = i, this._valid = !!i;\n    }\n\n    _createClass(F, [{\n      key: \"valid\",\n      get: function get() {\n        return this._valid;\n      }\n    }, {\n      key: \"rgb\",\n      get: function get() {\n        var t = E(this._rgb);\n        return t && (t.a = x(t.a)), t;\n      },\n      set: function set(t) {\n        this._rgb = I(t);\n      }\n    }, {\n      key: \"rgbString\",\n      value: function rgbString() {\n        return this._valid ? (t = this._rgb) && (t.a < 255 ? \"rgba(\".concat(t.r, \", \").concat(t.g, \", \").concat(t.b, \", \").concat(x(t.a), \")\") : \"rgb(\".concat(t.r, \", \").concat(t.g, \", \").concat(t.b, \")\")) : this._rgb;\n        var t;\n      }\n    }, {\n      key: \"hexString\",\n      value: function hexString() {\n        return this._valid ? u(this._rgb) : this._rgb;\n      }\n    }, {\n      key: \"hslString\",\n      value: function hslString() {\n        return this._valid ? function (t) {\n          if (!t) return;\n          var e = k(t),\n              i = e[0],\n              n = b(e[1]),\n              o = b(e[2]);\n          return t.a < 255 ? \"hsla(\".concat(i, \", \").concat(n, \"%, \").concat(o, \"%, \").concat(x(t.a), \")\") : \"hsl(\".concat(i, \", \").concat(n, \"%, \").concat(o, \"%)\");\n        }(this._rgb) : this._rgb;\n      }\n    }, {\n      key: \"mix\",\n      value: function mix(t, e) {\n        var i = this;\n\n        if (t) {\n          var _n4 = i.rgb,\n              _o2 = t.rgb;\n\n          var _s2;\n\n          var _a = e === _s2 ? .5 : e,\n              _r = 2 * _a - 1,\n              _l = _n4.a - _o2.a,\n              _c = ((_r * _l == -1 ? _r : (_r + _l) / (1 + _r * _l)) + 1) / 2;\n\n          _s2 = 1 - _c, _n4.r = 255 & _c * _n4.r + _s2 * _o2.r + .5, _n4.g = 255 & _c * _n4.g + _s2 * _o2.g + .5, _n4.b = 255 & _c * _n4.b + _s2 * _o2.b + .5, _n4.a = _a * _n4.a + (1 - _a) * _o2.a, i.rgb = _n4;\n        }\n\n        return i;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new F(this.rgb);\n      }\n    }, {\n      key: \"alpha\",\n      value: function alpha(t) {\n        return this._rgb.a = m(t), this;\n      }\n    }, {\n      key: \"clearer\",\n      value: function clearer(t) {\n        return this._rgb.a *= 1 - t, this;\n      }\n    }, {\n      key: \"greyscale\",\n      value: function greyscale() {\n        var t = this._rgb,\n            e = f(.3 * t.r + .59 * t.g + .11 * t.b);\n        return t.r = t.g = t.b = e, this;\n      }\n    }, {\n      key: \"opaquer\",\n      value: function opaquer(t) {\n        return this._rgb.a *= 1 + t, this;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        var t = this._rgb;\n        return t.r = 255 - t.r, t.g = 255 - t.g, t.b = 255 - t.b, this;\n      }\n    }, {\n      key: \"lighten\",\n      value: function lighten(t) {\n        return R(this._rgb, 2, t), this;\n      }\n    }, {\n      key: \"darken\",\n      value: function darken(t) {\n        return R(this._rgb, 2, -t), this;\n      }\n    }, {\n      key: \"saturate\",\n      value: function saturate(t) {\n        return R(this._rgb, 1, t), this;\n      }\n    }, {\n      key: \"desaturate\",\n      value: function desaturate(t) {\n        return R(this._rgb, 1, -t), this;\n      }\n    }, {\n      key: \"rotate\",\n      value: function rotate(t) {\n        return function (t, e) {\n          var i = k(t);\n          i[0] = D(i[0] + e), i = P(i), t.r = i[0], t.g = i[1], t.b = i[2];\n        }(this._rgb, t), this;\n      }\n    }]);\n\n    return F;\n  }();\n\n  function V(t) {\n    return new F(t);\n  }\n\n  var B = function B(t) {\n    return t instanceof CanvasGradient || t instanceof CanvasPattern;\n  };\n\n  function W(t) {\n    return B(t) ? t : V(t);\n  }\n\n  function H(t) {\n    return B(t) ? t : V(t).saturate(.5).darken(.1).hexString();\n  }\n\n  function N() {}\n\n  var j = function () {\n    var t = 0;\n    return function () {\n      return t++;\n    };\n  }();\n\n  function $(t) {\n    return null == t;\n  }\n\n  function Y(t) {\n    if (Array.isArray && Array.isArray(t)) return !0;\n    var e = Object.prototype.toString.call(t);\n    return \"[object\" === e.substr(0, 7) && \"Array]\" === e.substr(-6);\n  }\n\n  function U(t) {\n    return null !== t && \"[object Object]\" === Object.prototype.toString.call(t);\n  }\n\n  var X = function X(t) {\n    return (\"number\" == typeof t || t instanceof Number) && isFinite(+t);\n  };\n\n  function q(t, e) {\n    return X(t) ? t : e;\n  }\n\n  function K(t, e) {\n    return void 0 === t ? e : t;\n  }\n\n  var G = function G(t, e) {\n    return \"string\" == typeof t && t.endsWith(\"%\") ? parseFloat(t) / 100 : t / e;\n  },\n      Z = function Z(t, e) {\n    return \"string\" == typeof t && t.endsWith(\"%\") ? parseFloat(t) / 100 * e : +t;\n  };\n\n  function Q(t, e, i) {\n    if (t && \"function\" == typeof t.call) return t.apply(i, e);\n  }\n\n  function J(t, e, i, n) {\n    var o, s, a;\n    if (Y(t)) {\n      if (s = t.length, n) for (o = s - 1; o >= 0; o--) {\n        e.call(i, t[o], o);\n      } else for (o = 0; o < s; o++) {\n        e.call(i, t[o], o);\n      }\n    } else if (U(t)) for (a = Object.keys(t), s = a.length, o = 0; o < s; o++) {\n      e.call(i, t[a[o]], a[o]);\n    }\n  }\n\n  function tt(t, e) {\n    var i, n, o, s;\n    if (!t || !e || t.length !== e.length) return !1;\n\n    for (i = 0, n = t.length; i < n; ++i) {\n      if (o = t[i], s = e[i], o.datasetIndex !== s.datasetIndex || o.index !== s.index) return !1;\n    }\n\n    return !0;\n  }\n\n  function et(t) {\n    if (Y(t)) return t.map(et);\n\n    if (U(t)) {\n      var _e2 = Object.create(null),\n          _i2 = Object.keys(t),\n          _n5 = _i2.length;\n\n      var _o3 = 0;\n\n      for (; _o3 < _n5; ++_o3) {\n        _e2[_i2[_o3]] = et(t[_i2[_o3]]);\n      }\n\n      return _e2;\n    }\n\n    return t;\n  }\n\n  function it(t) {\n    return -1 === [\"__proto__\", \"prototype\", \"constructor\"].indexOf(t);\n  }\n\n  function nt(t, e, i, n) {\n    if (!it(t)) return;\n    var o = e[t],\n        s = i[t];\n    U(o) && U(s) ? ot(o, s, n) : e[t] = et(s);\n  }\n\n  function ot(t, e, i) {\n    var n = Y(e) ? e : [e],\n        o = n.length;\n    if (!U(t)) return t;\n    var s = (i = i || {}).merger || nt;\n\n    for (var _a2 = 0; _a2 < o; ++_a2) {\n      if (!U(e = n[_a2])) continue;\n\n      var _o4 = Object.keys(e);\n\n      for (var _n6 = 0, _a3 = _o4.length; _n6 < _a3; ++_n6) {\n        s(_o4[_n6], t, e, i);\n      }\n    }\n\n    return t;\n  }\n\n  function st(t, e) {\n    return ot(t, e, {\n      merger: at\n    });\n  }\n\n  function at(t, e, i) {\n    if (!it(t)) return;\n    var n = e[t],\n        o = i[t];\n    U(n) && U(o) ? st(n, o) : Object.prototype.hasOwnProperty.call(e, t) || (e[t] = et(o));\n  }\n\n  function rt(t, e) {\n    var i = t.indexOf(\".\", e);\n    return -1 === i ? t.length : i;\n  }\n\n  function lt(t, e) {\n    if (\"\" === e) return t;\n    var i = 0,\n        n = rt(e, i);\n\n    for (; t && n > i;) {\n      t = t[e.substr(i, n - i)], i = n + 1, n = rt(e, i);\n    }\n\n    return t;\n  }\n\n  function ct(t) {\n    return t.charAt(0).toUpperCase() + t.slice(1);\n  }\n\n  var ht = function ht(t) {\n    return void 0 !== t;\n  },\n      dt = function dt(t) {\n    return \"function\" == typeof t;\n  },\n      ut = function ut(t, e) {\n    if (t.size !== e.size) return !1;\n\n    var _iterator = _createForOfIteratorHelper(t),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _i3 = _step.value;\n        if (!e.has(_i3)) return !1;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return !0;\n  },\n      ft = Object.create(null),\n      gt = Object.create(null);\n\n  function pt(t, e) {\n    if (!e) return t;\n    var i = e.split(\".\");\n\n    for (var _e3 = 0, _n7 = i.length; _e3 < _n7; ++_e3) {\n      var _n8 = i[_e3];\n      t = t[_n8] || (t[_n8] = Object.create(null));\n    }\n\n    return t;\n  }\n\n  function mt(t, e, i) {\n    return \"string\" == typeof e ? ot(pt(t, e), i) : ot(pt(t, \"\"), e);\n  }\n\n  var xt = new ( /*#__PURE__*/function () {\n    function _class2(t) {\n      _classCallCheck(this, _class2);\n\n      this.animation = void 0, this.backgroundColor = \"rgba(0,0,0,0.1)\", this.borderColor = \"rgba(0,0,0,0.1)\", this.color = \"#666\", this.datasets = {}, this.devicePixelRatio = function (t) {\n        return t.chart.platform.getDevicePixelRatio();\n      }, this.elements = {}, this.events = [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"], this.font = {\n        family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n        size: 12,\n        style: \"normal\",\n        lineHeight: 1.2,\n        weight: null\n      }, this.hover = {}, this.hoverBackgroundColor = function (t, e) {\n        return H(e.backgroundColor);\n      }, this.hoverBorderColor = function (t, e) {\n        return H(e.borderColor);\n      }, this.hoverColor = function (t, e) {\n        return H(e.color);\n      }, this.indexAxis = \"x\", this.interaction = {\n        mode: \"nearest\",\n        intersect: !0\n      }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.describe(t);\n    }\n\n    _createClass(_class2, [{\n      key: \"set\",\n      value: function set(t, e) {\n        return mt(this, t, e);\n      }\n    }, {\n      key: \"get\",\n      value: function get(t) {\n        return pt(this, t);\n      }\n    }, {\n      key: \"describe\",\n      value: function describe(t, e) {\n        return mt(gt, t, e);\n      }\n    }, {\n      key: \"override\",\n      value: function override(t, e) {\n        return mt(ft, t, e);\n      }\n    }, {\n      key: \"route\",\n      value: function route(t, e, i, n) {\n        var _Object$definePropert;\n\n        var o = pt(this, t),\n            s = pt(this, i),\n            a = \"_\" + e;\n        Object.defineProperties(o, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, a, {\n          value: o[e],\n          writable: !0\n        }), _defineProperty(_Object$definePropert, e, {\n          enumerable: !0,\n          get: function get() {\n            var t = this[a],\n                e = s[n];\n            return U(t) ? Object.assign({}, e, t) : K(t, e);\n          },\n          set: function set(t) {\n            this[a] = t;\n          }\n        }), _Object$definePropert));\n      }\n    }]);\n\n    return _class2;\n  }())({\n    _scriptable: function _scriptable(t) {\n      return !t.startsWith(\"on\");\n    },\n    _indexable: function _indexable(t) {\n      return \"events\" !== t;\n    },\n    hover: {\n      _fallback: \"interaction\"\n    },\n    interaction: {\n      _scriptable: !1,\n      _indexable: !1\n    }\n  });\n\n  var bt = Math.PI,\n      _t = 2 * bt,\n      yt = _t + bt,\n      vt = Number.POSITIVE_INFINITY,\n      wt = bt / 180,\n      Mt = bt / 2,\n      kt = bt / 4,\n      St = 2 * bt / 3,\n      Pt = Math.log10,\n      Dt = Math.sign;\n\n  function Ct(t) {\n    var e = Math.pow(10, Math.floor(Pt(t))),\n        i = t / e;\n    return (i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * e;\n  }\n\n  function Ot(t) {\n    var e = [],\n        i = Math.sqrt(t);\n    var n;\n\n    for (n = 1; n < i; n++) {\n      t % n == 0 && (e.push(n), e.push(t / n));\n    }\n\n    return i === (0 | i) && e.push(i), e.sort(function (t, e) {\n      return t - e;\n    }).pop(), e;\n  }\n\n  function Tt(t) {\n    return !isNaN(parseFloat(t)) && isFinite(t);\n  }\n\n  function At(t, e, i) {\n    return Math.abs(t - e) < i;\n  }\n\n  function Lt(t, e) {\n    var i = Math.round(t);\n    return i - e <= t && i + e >= t;\n  }\n\n  function Rt(t, e, i) {\n    var n, o, s;\n\n    for (n = 0, o = t.length; n < o; n++) {\n      s = t[n][i], isNaN(s) || (e.min = Math.min(e.min, s), e.max = Math.max(e.max, s));\n    }\n  }\n\n  function Et(t) {\n    return t * (bt / 180);\n  }\n\n  function It(t) {\n    return t * (180 / bt);\n  }\n\n  function zt(t) {\n    if (!X(t)) return;\n    var e = 1,\n        i = 0;\n\n    for (; Math.round(t * e) / e !== t;) {\n      e *= 10, i++;\n    }\n\n    return i;\n  }\n\n  function Ft(t, e) {\n    var i = e.x - t.x,\n        n = e.y - t.y,\n        o = Math.sqrt(i * i + n * n);\n    var s = Math.atan2(n, i);\n    return s < -.5 * bt && (s += _t), {\n      angle: s,\n      distance: o\n    };\n  }\n\n  function Vt(t, e) {\n    return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));\n  }\n\n  function Bt(t, e) {\n    return (t - e + yt) % _t - bt;\n  }\n\n  function Wt(t) {\n    return (t % _t + _t) % _t;\n  }\n\n  function Ht(t, e, i, n) {\n    var o = Wt(t),\n        s = Wt(e),\n        a = Wt(i),\n        r = Wt(s - o),\n        l = Wt(a - o),\n        c = Wt(o - s),\n        h = Wt(o - a);\n    return o === s || o === a || n && s === a || r > l && c < h;\n  }\n\n  function Nt(t, e, i) {\n    return Math.max(e, Math.min(i, t));\n  }\n\n  function jt(t) {\n    return Nt(t, -32768, 32767);\n  }\n\n  function $t(t) {\n    return !t || $(t.size) || $(t.family) ? null : (t.style ? t.style + \" \" : \"\") + (t.weight ? t.weight + \" \" : \"\") + t.size + \"px \" + t.family;\n  }\n\n  function Yt(t, e, i, n, o) {\n    var s = e[o];\n    return s || (s = e[o] = t.measureText(o).width, i.push(o)), s > n && (n = s), n;\n  }\n\n  function Ut(t, e, i, n) {\n    var o = (n = n || {}).data = n.data || {},\n        s = n.garbageCollect = n.garbageCollect || [];\n    n.font !== e && (o = n.data = {}, s = n.garbageCollect = [], n.font = e), t.save(), t.font = e;\n    var a = 0;\n    var r = i.length;\n    var l, c, h, d, u;\n\n    for (l = 0; l < r; l++) {\n      if (d = i[l], null != d && !0 !== Y(d)) a = Yt(t, o, s, a, d);else if (Y(d)) for (c = 0, h = d.length; c < h; c++) {\n        u = d[c], null == u || Y(u) || (a = Yt(t, o, s, a, u));\n      }\n    }\n\n    t.restore();\n    var f = s.length / 2;\n\n    if (f > i.length) {\n      for (l = 0; l < f; l++) {\n        delete o[s[l]];\n      }\n\n      s.splice(0, f);\n    }\n\n    return a;\n  }\n\n  function Xt(t, e, i) {\n    var n = t.currentDevicePixelRatio,\n        o = 0 !== i ? Math.max(i / 2, .5) : 0;\n    return Math.round((e - o) * n) / n + o;\n  }\n\n  function qt(t, e) {\n    (e = e || t.getContext(\"2d\")).save(), e.resetTransform(), e.clearRect(0, 0, t.width, t.height), e.restore();\n  }\n\n  function Kt(t, e, i, n) {\n    var o, s, a, r, l;\n    var c = e.pointStyle,\n        h = e.rotation,\n        d = e.radius;\n    var u = (h || 0) * wt;\n    if (c && \"object\" == _typeof(c) && (o = c.toString(), \"[object HTMLImageElement]\" === o || \"[object HTMLCanvasElement]\" === o)) return t.save(), t.translate(i, n), t.rotate(u), t.drawImage(c, -c.width / 2, -c.height / 2, c.width, c.height), void t.restore();\n\n    if (!(isNaN(d) || d <= 0)) {\n      switch (t.beginPath(), c) {\n        default:\n          t.arc(i, n, d, 0, _t), t.closePath();\n          break;\n\n        case \"triangle\":\n          t.moveTo(i + Math.sin(u) * d, n - Math.cos(u) * d), u += St, t.lineTo(i + Math.sin(u) * d, n - Math.cos(u) * d), u += St, t.lineTo(i + Math.sin(u) * d, n - Math.cos(u) * d), t.closePath();\n          break;\n\n        case \"rectRounded\":\n          l = .516 * d, r = d - l, s = Math.cos(u + kt) * r, a = Math.sin(u + kt) * r, t.arc(i - s, n - a, l, u - bt, u - Mt), t.arc(i + a, n - s, l, u - Mt, u), t.arc(i + s, n + a, l, u, u + Mt), t.arc(i - a, n + s, l, u + Mt, u + bt), t.closePath();\n          break;\n\n        case \"rect\":\n          if (!h) {\n            r = Math.SQRT1_2 * d, t.rect(i - r, n - r, 2 * r, 2 * r);\n            break;\n          }\n\n          u += kt;\n\n        case \"rectRot\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + a, n - s), t.lineTo(i + s, n + a), t.lineTo(i - a, n + s), t.closePath();\n          break;\n\n        case \"crossRot\":\n          u += kt;\n\n        case \"cross\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s);\n          break;\n\n        case \"star\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s), u += kt, s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s);\n          break;\n\n        case \"line\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a);\n          break;\n\n        case \"dash\":\n          t.moveTo(i, n), t.lineTo(i + Math.cos(u) * d, n + Math.sin(u) * d);\n      }\n\n      t.fill(), e.borderWidth > 0 && t.stroke();\n    }\n  }\n\n  function Gt(t, e, i) {\n    return i = i || .5, t && t.x > e.left - i && t.x < e.right + i && t.y > e.top - i && t.y < e.bottom + i;\n  }\n\n  function Zt(t, e) {\n    t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();\n  }\n\n  function Qt(t) {\n    t.restore();\n  }\n\n  function Jt(t, e, i, n, o) {\n    if (!e) return t.lineTo(i.x, i.y);\n\n    if (\"middle\" === o) {\n      var _n9 = (e.x + i.x) / 2;\n\n      t.lineTo(_n9, e.y), t.lineTo(_n9, i.y);\n    } else \"after\" === o != !!n ? t.lineTo(e.x, i.y) : t.lineTo(i.x, e.y);\n\n    t.lineTo(i.x, i.y);\n  }\n\n  function te(t, e, i, n) {\n    if (!e) return t.lineTo(i.x, i.y);\n    t.bezierCurveTo(n ? e.cp1x : e.cp2x, n ? e.cp1y : e.cp2y, n ? i.cp2x : i.cp1x, n ? i.cp2y : i.cp1y, i.x, i.y);\n  }\n\n  function ee(t, e, i, n, o) {\n    var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var a = Y(e) ? e : [e],\n        r = s.strokeWidth > 0 && \"\" !== s.strokeColor;\n    var l, c;\n\n    for (t.save(), s.translation && t.translate(s.translation[0], s.translation[1]), $(s.rotation) || t.rotate(s.rotation), t.font = o.string, s.color && (t.fillStyle = s.color), s.textAlign && (t.textAlign = s.textAlign), s.textBaseline && (t.textBaseline = s.textBaseline), l = 0; l < a.length; ++l) {\n      if (c = a[l], r && (s.strokeColor && (t.strokeStyle = s.strokeColor), $(s.strokeWidth) || (t.lineWidth = s.strokeWidth), t.strokeText(c, i, n, s.maxWidth)), t.fillText(c, i, n, s.maxWidth), s.strikethrough || s.underline) {\n        var _e4 = t.measureText(c),\n            _o5 = i - _e4.actualBoundingBoxLeft,\n            _a4 = i + _e4.actualBoundingBoxRight,\n            _r2 = n - _e4.actualBoundingBoxAscent,\n            _l2 = n + _e4.actualBoundingBoxDescent,\n            _h = s.strikethrough ? (_r2 + _l2) / 2 : _l2;\n\n        t.strokeStyle = t.fillStyle, t.beginPath(), t.lineWidth = s.decorationWidth || 2, t.moveTo(_o5, _h), t.lineTo(_a4, _h), t.stroke();\n      }\n\n      n += o.lineHeight;\n    }\n\n    t.restore();\n  }\n\n  function ie(t, e) {\n    var i = e.x,\n        n = e.y,\n        o = e.w,\n        s = e.h,\n        a = e.radius;\n    t.arc(i + a.topLeft, n + a.topLeft, a.topLeft, -Mt, bt, !0), t.lineTo(i, n + s - a.bottomLeft), t.arc(i + a.bottomLeft, n + s - a.bottomLeft, a.bottomLeft, bt, Mt, !0), t.lineTo(i + o - a.bottomRight, n + s), t.arc(i + o - a.bottomRight, n + s - a.bottomRight, a.bottomRight, Mt, 0, !0), t.lineTo(i + o, n + a.topRight), t.arc(i + o - a.topRight, n + a.topRight, a.topRight, 0, -Mt, !0), t.lineTo(i + a.topLeft, n);\n  }\n\n  function ne(t, e, i) {\n    i = i || function (i) {\n      return t[i] < e;\n    };\n\n    var n,\n        o = t.length - 1,\n        s = 0;\n\n    for (; o - s > 1;) {\n      n = s + o >> 1, i(n) ? s = n : o = n;\n    }\n\n    return {\n      lo: s,\n      hi: o\n    };\n  }\n\n  var oe = function oe(t, e, i) {\n    return ne(t, i, function (n) {\n      return t[n][e] < i;\n    });\n  },\n      se = function se(t, e, i) {\n    return ne(t, i, function (n) {\n      return t[n][e] >= i;\n    });\n  };\n\n  function ae(t, e, i) {\n    var n = 0,\n        o = t.length;\n\n    for (; n < o && t[n] < e;) {\n      n++;\n    }\n\n    for (; o > n && t[o - 1] > i;) {\n      o--;\n    }\n\n    return n > 0 || o < t.length ? t.slice(n, o) : t;\n  }\n\n  var re = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n\n  function le(t, e) {\n    t._chartjs ? t._chartjs.listeners.push(e) : (Object.defineProperty(t, \"_chartjs\", {\n      configurable: !0,\n      enumerable: !1,\n      value: {\n        listeners: [e]\n      }\n    }), re.forEach(function (e) {\n      var i = \"_onData\" + ct(e),\n          n = t[e];\n      Object.defineProperty(t, e, {\n        configurable: !0,\n        enumerable: !1,\n        value: function value() {\n          for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            e[_key2] = arguments[_key2];\n          }\n\n          var o = n.apply(this, e);\n          return t._chartjs.listeners.forEach(function (t) {\n            \"function\" == typeof t[i] && t[i].apply(t, e);\n          }), o;\n        }\n      });\n    }));\n  }\n\n  function ce(t, e) {\n    var i = t._chartjs;\n    if (!i) return;\n    var n = i.listeners,\n        o = n.indexOf(e);\n    -1 !== o && n.splice(o, 1), n.length > 0 || (re.forEach(function (e) {\n      delete t[e];\n    }), delete t._chartjs);\n  }\n\n  function he(t) {\n    var e = new Set();\n    var i, n;\n\n    for (i = 0, n = t.length; i < n; ++i) {\n      e.add(t[i]);\n    }\n\n    if (e.size === n) return t;\n    var o = [];\n    return e.forEach(function (t) {\n      o.push(t);\n    }), o;\n  }\n\n  function de(t) {\n    var e = t.parentNode;\n    return e && \"[object ShadowRoot]\" === e.toString() && (e = e.host), e;\n  }\n\n  function ue(t, e, i) {\n    var n;\n    return \"string\" == typeof t ? (n = parseInt(t, 10), -1 !== t.indexOf(\"%\") && (n = n / 100 * e.parentNode[i])) : n = t, n;\n  }\n\n  var fe = function fe(t) {\n    return window.getComputedStyle(t, null);\n  };\n\n  function ge(t, e) {\n    return fe(t).getPropertyValue(e);\n  }\n\n  var pe = [\"top\", \"right\", \"bottom\", \"left\"];\n\n  function me(t, e, i) {\n    var n = {};\n    i = i ? \"-\" + i : \"\";\n\n    for (var _o6 = 0; _o6 < 4; _o6++) {\n      var _s3 = pe[_o6];\n      n[_s3] = parseFloat(t[e + \"-\" + _s3 + i]) || 0;\n    }\n\n    return n.width = n.left + n.right, n.height = n.top + n.bottom, n;\n  }\n\n  function xe(t, e) {\n    var i = e.canvas,\n        n = e.currentDevicePixelRatio,\n        o = fe(i),\n        s = \"border-box\" === o.boxSizing,\n        a = me(o, \"padding\"),\n        r = me(o, \"border\", \"width\"),\n        _ref = function (t, e) {\n      var i = t[\"native\"] || t,\n          n = i.touches,\n          o = n && n.length ? n[0] : i,\n          s = o.offsetX,\n          a = o.offsetY;\n      var r,\n          l,\n          c = !1;\n      if (function (t, e, i) {\n        return (t > 0 || e > 0) && (!i || !i.shadowRoot);\n      }(s, a, i.target)) r = s, l = a;else {\n        var _t3 = e.getBoundingClientRect();\n\n        r = o.clientX - _t3.left, l = o.clientY - _t3.top, c = !0;\n      }\n      return {\n        x: r,\n        y: l,\n        box: c\n      };\n    }(t, i),\n        l = _ref.x,\n        c = _ref.y,\n        h = _ref.box,\n        d = a.left + (h && r.left),\n        u = a.top + (h && r.top);\n\n    var f = e.width,\n        g = e.height;\n    return s && (f -= a.width + r.width, g -= a.height + r.height), {\n      x: Math.round((l - d) / f * i.width / n),\n      y: Math.round((c - u) / g * i.height / n)\n    };\n  }\n\n  var be = function be(t) {\n    return Math.round(10 * t) / 10;\n  };\n\n  function _e(t, e, i, n) {\n    var o = fe(t),\n        s = me(o, \"margin\"),\n        a = ue(o.maxWidth, t, \"clientWidth\") || vt,\n        r = ue(o.maxHeight, t, \"clientHeight\") || vt,\n        l = function (t, e, i) {\n      var n, o;\n\n      if (void 0 === e || void 0 === i) {\n        var _s4 = de(t);\n\n        if (_s4) {\n          var _t4 = _s4.getBoundingClientRect(),\n              _a5 = fe(_s4),\n              _r3 = me(_a5, \"border\", \"width\"),\n              _l3 = me(_a5, \"padding\");\n\n          e = _t4.width - _l3.width - _r3.width, i = _t4.height - _l3.height - _r3.height, n = ue(_a5.maxWidth, _s4, \"clientWidth\"), o = ue(_a5.maxHeight, _s4, \"clientHeight\");\n        } else e = t.clientWidth, i = t.clientHeight;\n      }\n\n      return {\n        width: e,\n        height: i,\n        maxWidth: n || vt,\n        maxHeight: o || vt\n      };\n    }(t, e, i);\n\n    var c = l.width,\n        h = l.height;\n\n    if (\"content-box\" === o.boxSizing) {\n      var _t5 = me(o, \"border\", \"width\"),\n          _e5 = me(o, \"padding\");\n\n      c -= _e5.width + _t5.width, h -= _e5.height + _t5.height;\n    }\n\n    return c = Math.max(0, c - s.width), h = Math.max(0, n ? Math.floor(c / n) : h - s.height), c = be(Math.min(c, a, l.maxWidth)), h = be(Math.min(h, r, l.maxHeight)), c && !h && (h = be(c / 2)), {\n      width: c,\n      height: h\n    };\n  }\n\n  function ye(t, e, i) {\n    var n = e || 1,\n        o = Math.floor(t.height * n),\n        s = Math.floor(t.width * n);\n    t.height = o / n, t.width = s / n;\n    var a = t.canvas;\n    return a.style && (i || !a.style.height && !a.style.width) && (a.style.height = \"\".concat(t.height, \"px\"), a.style.width = \"\".concat(t.width, \"px\")), (t.currentDevicePixelRatio !== n || a.height !== o || a.width !== s) && (t.currentDevicePixelRatio = n, a.height = o, a.width = s, t.ctx.setTransform(n, 0, 0, n, 0, 0), !0);\n  }\n\n  var ve = function () {\n    var t = !1;\n\n    try {\n      var _e6 = {\n        get passive() {\n          return t = !0, !1;\n        }\n\n      };\n      window.addEventListener(\"test\", null, _e6), window.removeEventListener(\"test\", null, _e6);\n    } catch (t) {}\n\n    return t;\n  }();\n\n  function we(t, e) {\n    var i = ge(t, e),\n        n = i && i.match(/^(\\d+)(\\.\\d+)?px$/);\n    return n ? +n[1] : void 0;\n  }\n\n  function Me(t, e) {\n    return \"native\" in t ? {\n      x: t.x,\n      y: t.y\n    } : xe(t, e);\n  }\n\n  function ke(t, e, i, n) {\n    var o = t.controller,\n        s = t.data,\n        a = t._sorted,\n        r = o._cachedMeta.iScale;\n\n    if (r && e === r.axis && a && s.length) {\n      var _t6 = r._reversePixels ? se : oe;\n\n      if (!n) return _t6(s, e, i);\n\n      if (o._sharedOptions) {\n        var _n10 = s[0],\n            _o7 = \"function\" == typeof _n10.getRange && _n10.getRange(e);\n\n        if (_o7) {\n          var _n11 = _t6(s, e, i - _o7),\n              _a6 = _t6(s, e, i + _o7);\n\n          return {\n            lo: _n11.lo,\n            hi: _a6.hi\n          };\n        }\n      }\n    }\n\n    return {\n      lo: 0,\n      hi: s.length - 1\n    };\n  }\n\n  function Se(t, e, i, n, o) {\n    var s = t.getSortedVisibleDatasetMetas(),\n        a = i[e];\n\n    for (var _t7 = 0, _i4 = s.length; _t7 < _i4; ++_t7) {\n      var _s$_t = s[_t7],\n          _i5 = _s$_t.index,\n          _r4 = _s$_t.data,\n          _ke = ke(s[_t7], e, a, o),\n          _l4 = _ke.lo,\n          _c2 = _ke.hi;\n\n      for (var _t8 = _l4; _t8 <= _c2; ++_t8) {\n        var _e7 = _r4[_t8];\n        _e7.skip || n(_e7, _i5, _t8);\n      }\n    }\n  }\n\n  function Pe(t, e, i, n) {\n    var o = [];\n    if (!Gt(e, t.chartArea, t._minPadding)) return o;\n    return Se(t, i, e, function (t, i, s) {\n      t.inRange(e.x, e.y, n) && o.push({\n        element: t,\n        datasetIndex: i,\n        index: s\n      });\n    }, !0), o;\n  }\n\n  function De(t, e, i, n, o) {\n    var s = function (t) {\n      var e = -1 !== t.indexOf(\"x\"),\n          i = -1 !== t.indexOf(\"y\");\n      return function (t, n) {\n        var o = e ? Math.abs(t.x - n.x) : 0,\n            s = i ? Math.abs(t.y - n.y) : 0;\n        return Math.sqrt(Math.pow(o, 2) + Math.pow(s, 2));\n      };\n    }(i);\n\n    var a = Number.POSITIVE_INFINITY,\n        r = [];\n    if (!Gt(e, t.chartArea, t._minPadding)) return r;\n    return Se(t, i, e, function (i, l, c) {\n      if (n && !i.inRange(e.x, e.y, o)) return;\n      var h = i.getCenterPoint(o);\n      if (!Gt(h, t.chartArea, t._minPadding)) return;\n      var d = s(e, h);\n      d < a ? (r = [{\n        element: i,\n        datasetIndex: l,\n        index: c\n      }], a = d) : d === a && r.push({\n        element: i,\n        datasetIndex: l,\n        index: c\n      });\n    }), r;\n  }\n\n  function Ce(t, e, i, n) {\n    var o = Me(e, t),\n        s = [],\n        a = i.axis,\n        r = \"x\" === a ? \"inXRange\" : \"inYRange\";\n    var l = !1;\n    return function (t, e) {\n      var i = t.getSortedVisibleDatasetMetas();\n      var n, o, s;\n\n      for (var _t9 = 0, _a7 = i.length; _t9 < _a7; ++_t9) {\n        var _i$_t = i[_t9];\n        n = _i$_t.index;\n        o = _i$_t.data;\n\n        for (var _t10 = 0, _i6 = o.length; _t10 < _i6; ++_t10) {\n          s = o[_t10], s.skip || e(s, n, _t10);\n        }\n      }\n    }(t, function (t, e, i) {\n      t[r](o[a], n) && s.push({\n        element: t,\n        datasetIndex: e,\n        index: i\n      }), t.inRange(o.x, o.y, n) && (l = !0);\n    }), i.intersect && !l ? [] : s;\n  }\n\n  var Oe = {\n    modes: {\n      index: function index(t, e, i, n) {\n        var o = Me(e, t),\n            s = i.axis || \"x\",\n            a = i.intersect ? Pe(t, o, s, n) : De(t, o, s, !1, n),\n            r = [];\n        return a.length ? (t.getSortedVisibleDatasetMetas().forEach(function (t) {\n          var e = a[0].index,\n              i = t.data[e];\n          i && !i.skip && r.push({\n            element: i,\n            datasetIndex: t.index,\n            index: e\n          });\n        }), r) : [];\n      },\n      dataset: function dataset(t, e, i, n) {\n        var o = Me(e, t),\n            s = i.axis || \"xy\";\n        var a = i.intersect ? Pe(t, o, s, n) : De(t, o, s, !1, n);\n\n        if (a.length > 0) {\n          var _e8 = a[0].datasetIndex,\n              _i7 = t.getDatasetMeta(_e8).data;\n          a = [];\n\n          for (var _t11 = 0; _t11 < _i7.length; ++_t11) {\n            a.push({\n              element: _i7[_t11],\n              datasetIndex: _e8,\n              index: _t11\n            });\n          }\n        }\n\n        return a;\n      },\n      point: function point(t, e, i, n) {\n        return Pe(t, Me(e, t), i.axis || \"xy\", n);\n      },\n      nearest: function nearest(t, e, i, n) {\n        return De(t, Me(e, t), i.axis || \"xy\", i.intersect, n);\n      },\n      x: function x(t, e, i, n) {\n        return i.axis = \"x\", Ce(t, e, i, n);\n      },\n      y: function y(t, e, i, n) {\n        return i.axis = \"y\", Ce(t, e, i, n);\n      }\n    }\n  };\n  var Te = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/),\n      Ae = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\n\n  function Le(t, e) {\n    var i = (\"\" + t).match(Te);\n    if (!i || \"normal\" === i[1]) return 1.2 * e;\n\n    switch (t = +i[2], i[3]) {\n      case \"px\":\n        return t;\n\n      case \"%\":\n        t /= 100;\n    }\n\n    return e * t;\n  }\n\n  function Re(t, e) {\n    var i = {},\n        n = U(e),\n        o = n ? Object.keys(e) : e,\n        s = U(t) ? n ? function (i) {\n      return K(t[i], t[e[i]]);\n    } : function (e) {\n      return t[e];\n    } : function () {\n      return t;\n    };\n\n    var _iterator2 = _createForOfIteratorHelper(o),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _t12 = _step2.value;\n        i[_t12] = +s(_t12) || 0;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return i;\n  }\n\n  function Ee(t) {\n    return Re(t, {\n      top: \"y\",\n      right: \"x\",\n      bottom: \"y\",\n      left: \"x\"\n    });\n  }\n\n  function Ie(t) {\n    return Re(t, [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]);\n  }\n\n  function ze(t) {\n    var e = Ee(t);\n    return e.width = e.left + e.right, e.height = e.top + e.bottom, e;\n  }\n\n  function Fe(t, e) {\n    t = t || {}, e = e || xt.font;\n    var i = K(t.size, e.size);\n    \"string\" == typeof i && (i = parseInt(i, 10));\n    var n = K(t.style, e.style);\n    n && !(\"\" + n).match(Ae) && (console.warn('Invalid font style specified: \"' + n + '\"'), n = \"\");\n    var o = {\n      family: K(t.family, e.family),\n      lineHeight: Le(K(t.lineHeight, e.lineHeight), i),\n      size: i,\n      style: n,\n      weight: K(t.weight, e.weight),\n      string: \"\"\n    };\n    return o.string = $t(o), o;\n  }\n\n  function Ve(t, e, i, n) {\n    var o,\n        s,\n        a,\n        r = !0;\n\n    for (o = 0, s = t.length; o < s; ++o) {\n      if (a = t[o], void 0 !== a && (void 0 !== e && \"function\" == typeof a && (a = a(e), r = !1), void 0 !== i && Y(a) && (a = a[i % a.length], r = !1), void 0 !== a)) return n && !r && (n.cacheable = !1), a;\n    }\n  }\n\n  function Be(t, e) {\n    var i = t.min,\n        n = t.max;\n    return {\n      min: i - Math.abs(Z(e, i)),\n      max: n + Z(e, n)\n    };\n  }\n\n  var We = [\"left\", \"top\", \"right\", \"bottom\"];\n\n  function He(t, e) {\n    return t.filter(function (t) {\n      return t.pos === e;\n    });\n  }\n\n  function Ne(t, e) {\n    return t.filter(function (t) {\n      return -1 === We.indexOf(t.pos) && t.box.axis === e;\n    });\n  }\n\n  function je(t, e) {\n    return t.sort(function (t, i) {\n      var n = e ? i : t,\n          o = e ? t : i;\n      return n.weight === o.weight ? n.index - o.index : n.weight - o.weight;\n    });\n  }\n\n  function $e(t, e, i, n) {\n    return Math.max(t[i], e[i]) + Math.max(t[n], e[n]);\n  }\n\n  function Ye(t, e) {\n    t.top = Math.max(t.top, e.top), t.left = Math.max(t.left, e.left), t.bottom = Math.max(t.bottom, e.bottom), t.right = Math.max(t.right, e.right);\n  }\n\n  function Ue(t, e, i) {\n    var n = i.box,\n        o = t.maxPadding;\n    U(i.pos) || (i.size && (t[i.pos] -= i.size), i.size = i.horizontal ? n.height : n.width, t[i.pos] += i.size), n.getPadding && Ye(o, n.getPadding());\n    var s = Math.max(0, e.outerWidth - $e(o, t, \"left\", \"right\")),\n        a = Math.max(0, e.outerHeight - $e(o, t, \"top\", \"bottom\")),\n        r = s !== t.w,\n        l = a !== t.h;\n    return t.w = s, t.h = a, i.horizontal ? {\n      same: r,\n      other: l\n    } : {\n      same: l,\n      other: r\n    };\n  }\n\n  function Xe(t, e) {\n    var i = e.maxPadding;\n\n    function n(t) {\n      var n = {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      };\n      return t.forEach(function (t) {\n        n[t] = Math.max(e[t], i[t]);\n      }), n;\n    }\n\n    return n(t ? [\"left\", \"right\"] : [\"top\", \"bottom\"]);\n  }\n\n  function qe(t, e, i) {\n    var n = [];\n    var o, s, a, r, l, c;\n\n    for (o = 0, s = t.length, l = 0; o < s; ++o) {\n      a = t[o], r = a.box, r.update(a.width || e.w, a.height || e.h, Xe(a.horizontal, e));\n\n      var _Ue = Ue(e, i, a),\n          _s5 = _Ue.same,\n          _h2 = _Ue.other;\n\n      l |= _s5 && n.length, c = c || _h2, r.fullSize || n.push(a);\n    }\n\n    return l && qe(n, e, i) || c;\n  }\n\n  function Ke(t, e, i) {\n    var n = i.padding;\n    var o,\n        s,\n        a,\n        r,\n        l = e.x,\n        c = e.y;\n\n    for (o = 0, s = t.length; o < s; ++o) {\n      a = t[o], r = a.box, a.horizontal ? (r.left = r.fullSize ? n.left : e.left, r.right = r.fullSize ? i.outerWidth - n.right : e.left + e.w, r.top = c, r.bottom = c + r.height, r.width = r.right - r.left, c = r.bottom) : (r.left = l, r.right = l + r.width, r.top = r.fullSize ? n.top : e.top, r.bottom = r.fullSize ? i.outerHeight - n.right : e.top + e.h, r.height = r.bottom - r.top, l = r.right);\n    }\n\n    e.x = l, e.y = c;\n  }\n\n  xt.set(\"layout\", {\n    padding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  });\n  var Ge = {\n    addBox: function addBox(t, e) {\n      t.boxes || (t.boxes = []), e.fullSize = e.fullSize || !1, e.position = e.position || \"top\", e.weight = e.weight || 0, e._layers = e._layers || function () {\n        return [{\n          z: 0,\n          draw: function draw(t) {\n            e.draw(t);\n          }\n        }];\n      }, t.boxes.push(e);\n    },\n    removeBox: function removeBox(t, e) {\n      var i = t.boxes ? t.boxes.indexOf(e) : -1;\n      -1 !== i && t.boxes.splice(i, 1);\n    },\n    configure: function configure(t, e, i) {\n      e.fullSize = i.fullSize, e.position = i.position, e.weight = i.weight;\n    },\n    update: function update(t, e, i, n) {\n      if (!t) return;\n\n      var o = ze(t.options.layout.padding),\n          s = Math.max(e - o.width, 0),\n          a = Math.max(i - o.height, 0),\n          r = function (t) {\n        var e = function (t) {\n          var e = [];\n          var i, n, o;\n\n          for (i = 0, n = (t || []).length; i < n; ++i) {\n            o = t[i], e.push({\n              index: i,\n              box: o,\n              pos: o.position,\n              horizontal: o.isHorizontal(),\n              weight: o.weight\n            });\n          }\n\n          return e;\n        }(t),\n            i = je(e.filter(function (t) {\n          return t.box.fullSize;\n        }), !0),\n            n = je(He(e, \"left\"), !0),\n            o = je(He(e, \"right\")),\n            s = je(He(e, \"top\"), !0),\n            a = je(He(e, \"bottom\")),\n            r = Ne(e, \"x\"),\n            l = Ne(e, \"y\");\n\n        return {\n          fullSize: i,\n          leftAndTop: n.concat(s),\n          rightAndBottom: o.concat(l).concat(a).concat(r),\n          chartArea: He(e, \"chartArea\"),\n          vertical: n.concat(o).concat(l),\n          horizontal: s.concat(a).concat(r)\n        };\n      }(t.boxes),\n          l = r.vertical,\n          c = r.horizontal;\n\n      J(t.boxes, function (t) {\n        \"function\" == typeof t.beforeLayout && t.beforeLayout();\n      });\n      var h = l.reduce(function (t, e) {\n        return e.box.options && !1 === e.box.options.display ? t : t + 1;\n      }, 0) || 1,\n          d = Object.freeze({\n        outerWidth: e,\n        outerHeight: i,\n        padding: o,\n        availableWidth: s,\n        availableHeight: a,\n        vBoxMaxWidth: s / 2 / h,\n        hBoxMaxHeight: a / 2\n      }),\n          u = Object.assign({}, o);\n      Ye(u, ze(n));\n      var f = Object.assign({\n        maxPadding: u,\n        w: s,\n        h: a,\n        x: o.left,\n        y: o.top\n      }, o);\n      !function (t, e) {\n        var i, n, o;\n\n        for (i = 0, n = t.length; i < n; ++i) {\n          o = t[i], o.horizontal ? (o.width = o.box.fullSize && e.availableWidth, o.height = e.hBoxMaxHeight) : (o.width = e.vBoxMaxWidth, o.height = o.box.fullSize && e.availableHeight);\n        }\n      }(l.concat(c), d), qe(r.fullSize, f, d), qe(l, f, d), qe(c, f, d) && qe(l, f, d), function (t) {\n        var e = t.maxPadding;\n\n        function i(i) {\n          var n = Math.max(e[i] - t[i], 0);\n          return t[i] += n, n;\n        }\n\n        t.y += i(\"top\"), t.x += i(\"left\"), i(\"right\"), i(\"bottom\");\n      }(f), Ke(r.leftAndTop, f, d), f.x += f.w, f.y += f.h, Ke(r.rightAndBottom, f, d), t.chartArea = {\n        left: f.left,\n        top: f.top,\n        right: f.left + f.w,\n        bottom: f.top + f.h,\n        height: f.h,\n        width: f.w\n      }, J(r.chartArea, function (e) {\n        var i = e.box;\n        Object.assign(i, t.chartArea), i.update(f.w, f.h);\n      });\n    }\n  };\n\n  var Ze = /*#__PURE__*/function () {\n    function Ze() {\n      _classCallCheck(this, Ze);\n    }\n\n    _createClass(Ze, [{\n      key: \"acquireContext\",\n      value: function acquireContext(t, e) {}\n    }, {\n      key: \"releaseContext\",\n      value: function releaseContext(t) {\n        return !1;\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(t, e, i) {}\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(t, e, i) {}\n    }, {\n      key: \"getDevicePixelRatio\",\n      value: function getDevicePixelRatio() {\n        return 1;\n      }\n    }, {\n      key: \"getMaximumSize\",\n      value: function getMaximumSize(t, e, i, n) {\n        return e = Math.max(0, e || t.width), i = i || t.height, {\n          width: e,\n          height: Math.max(0, n ? Math.floor(e / n) : i)\n        };\n      }\n    }, {\n      key: \"isAttached\",\n      value: function isAttached(t) {\n        return !0;\n      }\n    }]);\n\n    return Ze;\n  }();\n\n  var Qe = /*#__PURE__*/function (_Ze) {\n    _inherits(Qe, _Ze);\n\n    var _super = _createSuper(Qe);\n\n    function Qe() {\n      _classCallCheck(this, Qe);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Qe, [{\n      key: \"acquireContext\",\n      value: function acquireContext(t) {\n        return t && t.getContext && t.getContext(\"2d\") || null;\n      }\n    }]);\n\n    return Qe;\n  }(Ze);\n\n  var Je = {\n    touchstart: \"mousedown\",\n    touchmove: \"mousemove\",\n    touchend: \"mouseup\",\n    pointerenter: \"mouseenter\",\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointerleave: \"mouseout\",\n    pointerout: \"mouseout\"\n  },\n      ti = function ti(t) {\n    return null === t || \"\" === t;\n  };\n\n  var ei = !!ve && {\n    passive: !0\n  };\n\n  function ii(t, e, i) {\n    t.canvas.removeEventListener(e, i, ei);\n  }\n\n  function ni(t, e, i) {\n    var n = t.canvas,\n        o = n && de(n) || n,\n        s = new MutationObserver(function (t) {\n      var e = de(o);\n      t.forEach(function (t) {\n        for (var _n12 = 0; _n12 < t.addedNodes.length; _n12++) {\n          var _s6 = t.addedNodes[_n12];\n          _s6 !== o && _s6 !== e || i(t.target);\n        }\n      });\n    });\n    return s.observe(document, {\n      childList: !0,\n      subtree: !0\n    }), s;\n  }\n\n  function oi(t, e, i) {\n    var n = t.canvas,\n        o = n && de(n);\n    if (!o) return;\n    var s = new MutationObserver(function (t) {\n      t.forEach(function (t) {\n        for (var _e9 = 0; _e9 < t.removedNodes.length; _e9++) {\n          if (t.removedNodes[_e9] === n) {\n            i();\n            break;\n          }\n        }\n      });\n    });\n    return s.observe(o, {\n      childList: !0\n    }), s;\n  }\n\n  var si = new Map();\n  var ai = 0;\n\n  function ri() {\n    var t = window.devicePixelRatio;\n    t !== ai && (ai = t, si.forEach(function (e, i) {\n      i.currentDevicePixelRatio !== t && e();\n    }));\n  }\n\n  function li(t, i, n) {\n    var o = t.canvas,\n        s = o && de(o);\n    if (!s) return;\n    var a = e(function (t, e) {\n      var i = s.clientWidth;\n      n(t, e), i < s.clientWidth && n();\n    }, window),\n        r = new ResizeObserver(function (t) {\n      var e = t[0],\n          i = e.contentRect.width,\n          n = e.contentRect.height;\n      0 === i && 0 === n || a(i, n);\n    });\n    return r.observe(s), function (t, e) {\n      si.size || window.addEventListener(\"resize\", ri), si.set(t, e);\n    }(t, a), r;\n  }\n\n  function ci(t, e, i) {\n    i && i.disconnect(), \"resize\" === e && function (t) {\n      si[\"delete\"](t), si.size || window.removeEventListener(\"resize\", ri);\n    }(t);\n  }\n\n  function hi(t, i, n) {\n    var o = t.canvas,\n        s = e(function (e) {\n      null !== t.ctx && n(function (t, e) {\n        var i = Je[t.type] || t.type,\n            _xe = xe(t, e),\n            n = _xe.x,\n            o = _xe.y;\n\n        return {\n          type: i,\n          chart: e,\n          \"native\": t,\n          x: void 0 !== n ? n : null,\n          y: void 0 !== o ? o : null\n        };\n      }(e, t));\n    }, t, function (t) {\n      var e = t[0];\n      return [e, e.offsetX, e.offsetY];\n    });\n    return function (t, e, i) {\n      t.addEventListener(e, i, ei);\n    }(o, i, s), s;\n  }\n\n  var di = /*#__PURE__*/function (_Ze2) {\n    _inherits(di, _Ze2);\n\n    var _super2 = _createSuper(di);\n\n    function di() {\n      _classCallCheck(this, di);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(di, [{\n      key: \"acquireContext\",\n      value: function acquireContext(t, e) {\n        var i = t && t.getContext && t.getContext(\"2d\");\n        return i && i.canvas === t ? (function (t, e) {\n          var i = t.style,\n              n = t.getAttribute(\"height\"),\n              o = t.getAttribute(\"width\");\n\n          if (t.$chartjs = {\n            initial: {\n              height: n,\n              width: o,\n              style: {\n                display: i.display,\n                height: i.height,\n                width: i.width\n              }\n            }\n          }, i.display = i.display || \"block\", i.boxSizing = i.boxSizing || \"border-box\", ti(o)) {\n            var _e10 = we(t, \"width\");\n\n            void 0 !== _e10 && (t.width = _e10);\n          }\n\n          if (ti(n)) if (\"\" === t.style.height) t.height = t.width / (e || 2);else {\n            var _e11 = we(t, \"height\");\n\n            void 0 !== _e11 && (t.height = _e11);\n          }\n        }(t, e), i) : null;\n      }\n    }, {\n      key: \"releaseContext\",\n      value: function releaseContext(t) {\n        var e = t.canvas;\n        if (!e.$chartjs) return !1;\n        var i = e.$chartjs.initial;\n        [\"height\", \"width\"].forEach(function (t) {\n          var n = i[t];\n          $(n) ? e.removeAttribute(t) : e.setAttribute(t, n);\n        });\n        var n = i.style || {};\n        return Object.keys(n).forEach(function (t) {\n          e.style[t] = n[t];\n        }), e.width = e.width, delete e.$chartjs, !0;\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(t, e, i) {\n        this.removeEventListener(t, e);\n        var n = t.$proxies || (t.$proxies = {}),\n            o = {\n          attach: ni,\n          detach: oi,\n          resize: li\n        }[e] || hi;\n        n[e] = o(t, e, i);\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(t, e) {\n        var i = t.$proxies || (t.$proxies = {}),\n            n = i[e];\n        if (!n) return;\n        (({\n          attach: ci,\n          detach: ci,\n          resize: ci\n        })[e] || ii)(t, e, n), i[e] = void 0;\n      }\n    }, {\n      key: \"getDevicePixelRatio\",\n      value: function getDevicePixelRatio() {\n        return window.devicePixelRatio;\n      }\n    }, {\n      key: \"getMaximumSize\",\n      value: function getMaximumSize(t, e, i, n) {\n        return _e(t, e, i, n);\n      }\n    }, {\n      key: \"isAttached\",\n      value: function isAttached(t) {\n        var e = de(t);\n        return !(!e || !de(e));\n      }\n    }]);\n\n    return di;\n  }(Ze);\n\n  var ui = Object.freeze({\n    __proto__: null,\n    BasePlatform: Ze,\n    BasicPlatform: Qe,\n    DomPlatform: di\n  });\n\n  var fi = function fi(t) {\n    return 0 === t || 1 === t;\n  },\n      gi = function gi(t, e, i) {\n    return -Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * _t / i);\n  },\n      pi = function pi(t, e, i) {\n    return Math.pow(2, -10 * t) * Math.sin((t - e) * _t / i) + 1;\n  },\n      mi = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      return (t /= .5) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t -= 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t -= 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t -= 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return 1 - Math.cos(t * Mt);\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * Mt);\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -.5 * (Math.cos(bt * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      return fi(t) ? t : t < .5 ? .5 * Math.pow(2, 10 * (2 * t - 1)) : .5 * (2 - Math.pow(2, -10 * (2 * t - 1)));\n    },\n    easeInCirc: function easeInCirc(t) {\n      return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t -= 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      return fi(t) ? t : gi(t, .075, .3);\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      return fi(t) ? t : pi(t, .075, .3);\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var e = .1125;\n      return fi(t) ? t : t < .5 ? .5 * gi(2 * t, e, .45) : .5 + .5 * pi(2 * t - 1, e, .45);\n    },\n    easeInBack: function easeInBack(t) {\n      var e = 1.70158;\n      return t * t * ((e + 1) * t - e);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var e = 1.70158;\n      return (t -= 1) * t * ((e + 1) * t + e) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var e = 1.70158;\n      return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - mi.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      var e = 7.5625,\n          i = 2.75;\n      return t < 1 / i ? e * t * t : t < 2 / i ? e * (t -= 1.5 / i) * t + .75 : t < 2.5 / i ? e * (t -= 2.25 / i) * t + .9375 : e * (t -= 2.625 / i) * t + .984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      return t < .5 ? .5 * mi.easeInBounce(2 * t) : .5 * mi.easeOutBounce(2 * t - 1) + .5;\n    }\n  },\n      xi = \"transparent\",\n      bi = {\n    \"boolean\": function boolean(t, e, i) {\n      return i > .5 ? e : t;\n    },\n    color: function color(t, e, i) {\n      var n = W(t || xi),\n          o = n.valid && W(e || xi);\n      return o && o.valid ? o.mix(n, i).hexString() : e;\n    },\n    number: function number(t, e, i) {\n      return t + (e - t) * i;\n    }\n  };\n\n  var _i = /*#__PURE__*/function () {\n    function _i(t, e, i, n) {\n      _classCallCheck(this, _i);\n\n      var o = e[i];\n      n = Ve([t.to, n, o, t.from]);\n      var s = Ve([t.from, o, n]);\n      this._active = !0, this._fn = t.fn || bi[t.type || _typeof(s)], this._easing = mi[t.easing] || mi.linear, this._start = Math.floor(Date.now() + (t.delay || 0)), this._duration = this._total = Math.floor(t.duration), this._loop = !!t.loop, this._target = e, this._prop = i, this._from = s, this._to = n, this._promises = void 0;\n    }\n\n    _createClass(_i, [{\n      key: \"active\",\n      value: function active() {\n        return this._active;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e, i) {\n        var n = this;\n\n        if (n._active) {\n          n._notify(!1);\n\n          var _o8 = n._target[n._prop],\n              _s7 = i - n._start,\n              _a8 = n._duration - _s7;\n\n          n._start = i, n._duration = Math.floor(Math.max(_a8, t.duration)), n._total += _s7, n._loop = !!t.loop, n._to = Ve([t.to, e, _o8, t.from]), n._from = Ve([t.from, _o8, e]);\n        }\n      }\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var t = this;\n        t._active && (t.tick(Date.now()), t._active = !1, t._notify(!1));\n      }\n    }, {\n      key: \"tick\",\n      value: function tick(t) {\n        var e = this,\n            i = t - e._start,\n            n = e._duration,\n            o = e._prop,\n            s = e._from,\n            a = e._loop,\n            r = e._to;\n        var l;\n        if (e._active = s !== r && (a || i < n), !e._active) return e._target[o] = r, void e._notify(!0);\n        i < 0 ? e._target[o] = s : (l = i / n % 2, l = a && l > 1 ? 2 - l : l, l = e._easing(Math.min(1, Math.max(0, l))), e._target[o] = e._fn(s, r, l));\n      }\n    }, {\n      key: \"wait\",\n      value: function wait() {\n        var t = this._promises || (this._promises = []);\n        return new Promise(function (e, i) {\n          t.push({\n            res: e,\n            rej: i\n          });\n        });\n      }\n    }, {\n      key: \"_notify\",\n      value: function _notify(t) {\n        var e = t ? \"res\" : \"rej\",\n            i = this._promises || [];\n\n        for (var _t13 = 0; _t13 < i.length; _t13++) {\n          i[_t13][e]();\n        }\n      }\n    }]);\n\n    return _i;\n  }();\n\n  xt.set(\"animation\", {\n    delay: void 0,\n    duration: 1e3,\n    easing: \"easeOutQuart\",\n    fn: void 0,\n    from: void 0,\n    loop: void 0,\n    to: void 0,\n    type: void 0\n  });\n  var yi = Object.keys(xt.animation);\n  xt.describe(\"animation\", {\n    _fallback: !1,\n    _indexable: !1,\n    _scriptable: function _scriptable(t) {\n      return \"onProgress\" !== t && \"onComplete\" !== t && \"fn\" !== t;\n    }\n  }), xt.set(\"animations\", {\n    colors: {\n      type: \"color\",\n      properties: [\"color\", \"borderColor\", \"backgroundColor\"]\n    },\n    numbers: {\n      type: \"number\",\n      properties: [\"x\", \"y\", \"borderWidth\", \"radius\", \"tension\"]\n    }\n  }), xt.describe(\"animations\", {\n    _fallback: \"animation\"\n  }), xt.set(\"transitions\", {\n    active: {\n      animation: {\n        duration: 400\n      }\n    },\n    resize: {\n      animation: {\n        duration: 0\n      }\n    },\n    show: {\n      animations: {\n        colors: {\n          from: \"transparent\"\n        },\n        visible: {\n          type: \"boolean\",\n          duration: 0\n        }\n      }\n    },\n    hide: {\n      animations: {\n        colors: {\n          to: \"transparent\"\n        },\n        visible: {\n          type: \"boolean\",\n          easing: \"linear\",\n          fn: function fn(t) {\n            return 0 | t;\n          }\n        }\n      }\n    }\n  });\n\n  var vi = /*#__PURE__*/function () {\n    function vi(t, e) {\n      _classCallCheck(this, vi);\n\n      this._chart = t, this._properties = new Map(), this.configure(e);\n    }\n\n    _createClass(vi, [{\n      key: \"configure\",\n      value: function configure(t) {\n        if (!U(t)) return;\n        var e = this._properties;\n        Object.getOwnPropertyNames(t).forEach(function (i) {\n          var n = t[i];\n          if (!U(n)) return;\n          var o = {};\n\n          var _iterator3 = _createForOfIteratorHelper(yi),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _t14 = _step3.value;\n              o[_t14] = n[_t14];\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          (Y(n.properties) && n.properties || [i]).forEach(function (t) {\n            t !== i && e.has(t) || e.set(t, o);\n          });\n        });\n      }\n    }, {\n      key: \"_animateOptions\",\n      value: function _animateOptions(t, e) {\n        var i = e.options,\n            n = function (t, e) {\n          if (!e) return;\n          var i = t.options;\n          if (!i) return void (t.options = e);\n          i.$shared && (t.options = i = Object.assign({}, i, {\n            $shared: !1,\n            $animations: {}\n          }));\n          return i;\n        }(t, i);\n\n        if (!n) return [];\n\n        var o = this._createAnimations(n, i);\n\n        return i.$shared && function (t, e) {\n          var i = [],\n              n = Object.keys(e);\n\n          for (var _e12 = 0; _e12 < n.length; _e12++) {\n            var _o9 = t[n[_e12]];\n            _o9 && _o9.active() && i.push(_o9.wait());\n          }\n\n          return Promise.all(i);\n        }(t.options.$animations, i).then(function () {\n          t.options = i;\n        }, function () {}), o;\n      }\n    }, {\n      key: \"_createAnimations\",\n      value: function _createAnimations(t, e) {\n        var i = this._properties,\n            n = [],\n            o = t.$animations || (t.$animations = {}),\n            s = Object.keys(e),\n            a = Date.now();\n        var r;\n\n        for (r = s.length - 1; r >= 0; --r) {\n          var _l5 = s[r];\n          if (\"$\" === _l5.charAt(0)) continue;\n\n          if (\"options\" === _l5) {\n            n.push.apply(n, _toConsumableArray(this._animateOptions(t, e)));\n            continue;\n          }\n\n          var _c3 = e[_l5];\n          var _h3 = o[_l5];\n\n          var _d = i.get(_l5);\n\n          if (_h3) {\n            if (_d && _h3.active()) {\n              _h3.update(_d, _c3, a);\n\n              continue;\n            }\n\n            _h3.cancel();\n          }\n\n          _d && _d.duration ? (o[_l5] = _h3 = new _i(_d, t, _l5, _c3), n.push(_h3)) : t[_l5] = _c3;\n        }\n\n        return n;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e) {\n        if (0 === this._properties.size) return void Object.assign(t, e);\n\n        var i = this._createAnimations(t, e);\n\n        return i.length ? (a.add(this._chart, i), !0) : void 0;\n      }\n    }]);\n\n    return vi;\n  }();\n\n  function wi(t, e) {\n    var i = t && t.options || {},\n        n = i.reverse,\n        o = void 0 === i.min ? e : 0,\n        s = void 0 === i.max ? e : 0;\n    return {\n      start: n ? s : o,\n      end: n ? o : s\n    };\n  }\n\n  function Mi(t, e) {\n    var i = [],\n        n = t._getSortedDatasetMetas(e);\n\n    var o, s;\n\n    for (o = 0, s = n.length; o < s; ++o) {\n      i.push(n[o].index);\n    }\n\n    return i;\n  }\n\n  function ki(t, e, i, n) {\n    var o = t.keys,\n        s = \"single\" === n.mode;\n    var a, r, l, c;\n\n    if (null !== e) {\n      for (a = 0, r = o.length; a < r; ++a) {\n        if (l = +o[a], l === i) {\n          if (n.all) continue;\n          break;\n        }\n\n        c = t.values[l], X(c) && (s || 0 === e || Dt(e) === Dt(c)) && (e += c);\n      }\n\n      return e;\n    }\n  }\n\n  function Si(t, e) {\n    var i = t && t.options.stacked;\n    return i || void 0 === i && void 0 !== e.stack;\n  }\n\n  function Pi(t, e, i) {\n    var n = t[e] || (t[e] = {});\n    return n[i] || (n[i] = {});\n  }\n\n  function Di(t, e, i) {\n    var _iterator4 = _createForOfIteratorHelper(e.getMatchingVisibleMetas(\"bar\").reverse()),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _n13 = _step4.value;\n        var _e13 = t[_n13.index];\n        if (i && _e13 > 0 || !i && _e13 < 0) return _n13.index;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return null;\n  }\n\n  function Ci(t, e) {\n    var i = t.chart,\n        n = t._cachedMeta,\n        o = i._stacks || (i._stacks = {}),\n        s = n.iScale,\n        a = n.vScale,\n        r = n.index,\n        l = s.axis,\n        c = a.axis,\n        h = function (t, e, i) {\n      return \"\".concat(t.id, \".\").concat(e.id, \".\").concat(i.stack || i.type);\n    }(s, a, n),\n        d = e.length;\n\n    var u;\n\n    for (var _t15 = 0; _t15 < d; ++_t15) {\n      var _i8 = e[_t15],\n          _n14 = _i8[l],\n          _s8 = _i8[c];\n      u = (_i8._stacks || (_i8._stacks = {}))[c] = Pi(o, h, _n14), u[r] = _s8, u._top = Di(u, a, !0), u._bottom = Di(u, a, !1);\n    }\n  }\n\n  function Oi(t, e) {\n    var i = t.scales;\n    return Object.keys(i).filter(function (t) {\n      return i[t].axis === e;\n    }).shift();\n  }\n\n  function Ti(t, e) {\n    var i = t.vScale && t.vScale.axis;\n\n    if (i) {\n      e = e || t._parsed;\n\n      var _iterator5 = _createForOfIteratorHelper(e),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _n15 = _step5.value;\n          var _e14 = _n15._stacks;\n          if (!_e14 || void 0 === _e14[i] || void 0 === _e14[i][t.index]) return;\n          delete _e14[i][t.index];\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }\n\n  var Ai = function Ai(t) {\n    return \"reset\" === t || \"none\" === t;\n  },\n      Li = function Li(t, e) {\n    return e ? t : Object.assign({}, t);\n  };\n\n  var Ri = /*#__PURE__*/function () {\n    function Ri(t, e) {\n      _classCallCheck(this, Ri);\n\n      this.chart = t, this._ctx = t.ctx, this.index = e, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.$context = void 0, this._syncList = [], this.initialize();\n    }\n\n    _createClass(Ri, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var t = this,\n            e = t._cachedMeta;\n        t.configure(), t.linkScales(), e._stacked = Si(e.vScale, e), t.addElements();\n      }\n    }, {\n      key: \"updateIndex\",\n      value: function updateIndex(t) {\n        this.index !== t && Ti(this._cachedMeta), this.index = t;\n      }\n    }, {\n      key: \"linkScales\",\n      value: function linkScales() {\n        var t = this,\n            e = t.chart,\n            i = t._cachedMeta,\n            n = t.getDataset(),\n            o = function o(t, e, i, n) {\n          return \"x\" === t ? e : \"r\" === t ? n : i;\n        },\n            s = i.xAxisID = K(n.xAxisID, Oi(e, \"x\")),\n            a = i.yAxisID = K(n.yAxisID, Oi(e, \"y\")),\n            r = i.rAxisID = K(n.rAxisID, Oi(e, \"r\")),\n            l = i.indexAxis,\n            c = i.iAxisID = o(l, s, a, r),\n            h = i.vAxisID = o(l, a, s, r);\n\n        i.xScale = t.getScaleForId(s), i.yScale = t.getScaleForId(a), i.rScale = t.getScaleForId(r), i.iScale = t.getScaleForId(c), i.vScale = t.getScaleForId(h);\n      }\n    }, {\n      key: \"getDataset\",\n      value: function getDataset() {\n        return this.chart.data.datasets[this.index];\n      }\n    }, {\n      key: \"getMeta\",\n      value: function getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n      }\n    }, {\n      key: \"getScaleForId\",\n      value: function getScaleForId(t) {\n        return this.chart.scales[t];\n      }\n    }, {\n      key: \"_getOtherScale\",\n      value: function _getOtherScale(t) {\n        var e = this._cachedMeta;\n        return t === e.iScale ? e.vScale : e.iScale;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._update(\"reset\");\n      }\n    }, {\n      key: \"_destroy\",\n      value: function _destroy() {\n        var t = this._cachedMeta;\n        this._data && ce(this._data, this), t._stacked && Ti(t);\n      }\n    }, {\n      key: \"_dataCheck\",\n      value: function _dataCheck() {\n        var t = this,\n            e = t.getDataset(),\n            i = e.data || (e.data = []),\n            n = t._data;\n        if (U(i)) t._data = function (t) {\n          var e = Object.keys(t),\n              i = new Array(e.length);\n          var n, o, s;\n\n          for (n = 0, o = e.length; n < o; ++n) {\n            s = e[n], i[n] = {\n              x: s,\n              y: t[s]\n            };\n          }\n\n          return i;\n        }(i);else if (n !== i) {\n          if (n) {\n            ce(n, t);\n            var _e15 = t._cachedMeta;\n            Ti(_e15), _e15._parsed = [];\n          }\n\n          i && Object.isExtensible(i) && le(i, t), t._syncList = [], t._data = i;\n        }\n      }\n    }, {\n      key: \"addElements\",\n      value: function addElements() {\n        var t = this,\n            e = t._cachedMeta;\n        t._dataCheck(), t.datasetElementType && (e.dataset = new t.datasetElementType());\n      }\n    }, {\n      key: \"buildOrUpdateElements\",\n      value: function buildOrUpdateElements(t) {\n        var e = this,\n            i = e._cachedMeta,\n            n = e.getDataset();\n        var o = !1;\n\n        e._dataCheck();\n\n        var s = i._stacked;\n        i._stacked = Si(i.vScale, i), i.stack !== n.stack && (o = !0, Ti(i), i.stack = n.stack), e._resyncElements(t), (o || s !== i._stacked) && Ci(e, i._parsed);\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this,\n            e = t.chart.config,\n            i = e.datasetScopeKeys(t._type),\n            n = e.getOptionScopes(t.getDataset(), i, !0);\n        t.options = e.createResolver(n, t.getContext()), t._parsing = t.options.parsing;\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        var i = this,\n            n = i._cachedMeta,\n            o = i._data,\n            s = n.iScale,\n            a = n._stacked,\n            r = s.axis;\n        var l,\n            c,\n            h,\n            d = 0 === t && e === o.length || n._sorted,\n            u = t > 0 && n._parsed[t - 1];\n        if (!1 === i._parsing) n._parsed = o, n._sorted = !0, h = o;else {\n          h = Y(o[t]) ? i.parseArrayData(n, o, t, e) : U(o[t]) ? i.parseObjectData(n, o, t, e) : i.parsePrimitiveData(n, o, t, e);\n\n          var _s9 = function _s9() {\n            return null === c[r] || u && c[r] < u[r];\n          };\n\n          for (l = 0; l < e; ++l) {\n            n._parsed[l + t] = c = h[l], d && (_s9() && (d = !1), u = c);\n          }\n\n          n._sorted = d;\n        }\n        a && Ci(i, h);\n      }\n    }, {\n      key: \"parsePrimitiveData\",\n      value: function parsePrimitiveData(t, e, i, n) {\n        var o = t.iScale,\n            s = t.vScale,\n            a = o.axis,\n            r = s.axis,\n            l = o.getLabels(),\n            c = o === s,\n            h = new Array(n);\n        var d, u, f;\n\n        for (d = 0, u = n; d < u; ++d) {\n          var _h$d;\n\n          f = d + i, h[d] = (_h$d = {}, _defineProperty(_h$d, a, c || o.parse(l[f], f)), _defineProperty(_h$d, r, s.parse(e[f], f)), _h$d);\n        }\n\n        return h;\n      }\n    }, {\n      key: \"parseArrayData\",\n      value: function parseArrayData(t, e, i, n) {\n        var o = t.xScale,\n            s = t.yScale,\n            a = new Array(n);\n        var r, l, c, h;\n\n        for (r = 0, l = n; r < l; ++r) {\n          c = r + i, h = e[c], a[r] = {\n            x: o.parse(h[0], c),\n            y: s.parse(h[1], c)\n          };\n        }\n\n        return a;\n      }\n    }, {\n      key: \"parseObjectData\",\n      value: function parseObjectData(t, e, i, n) {\n        var o = t.xScale,\n            s = t.yScale,\n            _this$_parsing = this._parsing,\n            _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n            a = _this$_parsing$xAxisK === void 0 ? \"x\" : _this$_parsing$xAxisK,\n            _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n            r = _this$_parsing$yAxisK === void 0 ? \"y\" : _this$_parsing$yAxisK,\n            l = new Array(n);\n        var c, h, d, u;\n\n        for (c = 0, h = n; c < h; ++c) {\n          d = c + i, u = e[d], l[c] = {\n            x: o.parse(lt(u, a), d),\n            y: s.parse(lt(u, r), d)\n          };\n        }\n\n        return l;\n      }\n    }, {\n      key: \"getParsed\",\n      value: function getParsed(t) {\n        return this._cachedMeta._parsed[t];\n      }\n    }, {\n      key: \"getDataElement\",\n      value: function getDataElement(t) {\n        return this._cachedMeta.data[t];\n      }\n    }, {\n      key: \"applyStack\",\n      value: function applyStack(t, e, i) {\n        var n = this.chart,\n            o = this._cachedMeta,\n            s = e[t.axis];\n        return ki({\n          keys: Mi(n, !0),\n          values: e._stacks[t.axis]\n        }, s, o.index, {\n          mode: i\n        });\n      }\n    }, {\n      key: \"updateRangeFromParsed\",\n      value: function updateRangeFromParsed(t, e, i, n) {\n        var o = i[e.axis];\n        var s = null === o ? NaN : o;\n        var a = n && i._stacks[e.axis];\n        n && a && (n.values = a, t.min = Math.min(t.min, s), t.max = Math.max(t.max, s), s = ki(n, o, this._cachedMeta.index, {\n          all: !0\n        })), t.min = Math.min(t.min, s), t.max = Math.max(t.max, s);\n      }\n    }, {\n      key: \"getMinMax\",\n      value: function getMinMax(t, e) {\n        var i = this,\n            n = i._cachedMeta,\n            o = n._parsed,\n            s = n._sorted && t === n.iScale,\n            a = o.length,\n            r = i._getOtherScale(t),\n            l = e && n._stacked && {\n          keys: Mi(i.chart, !0),\n          values: null\n        },\n            c = {\n          min: Number.POSITIVE_INFINITY,\n          max: Number.NEGATIVE_INFINITY\n        },\n            _ref2 = function (t) {\n          var _t$getUserBounds = t.getUserBounds(),\n              e = _t$getUserBounds.min,\n              i = _t$getUserBounds.max,\n              n = _t$getUserBounds.minDefined,\n              o = _t$getUserBounds.maxDefined;\n\n          return {\n            min: n ? e : Number.NEGATIVE_INFINITY,\n            max: o ? i : Number.POSITIVE_INFINITY\n          };\n        }(r),\n            h = _ref2.min,\n            d = _ref2.max;\n\n        var u, f, g, p;\n\n        function m() {\n          return g = o[u], f = g[t.axis], p = g[r.axis], !X(f) || h > p || d < p;\n        }\n\n        for (u = 0; u < a && (m() || (i.updateRangeFromParsed(c, t, g, l), !s)); ++u) {\n          ;\n        }\n\n        if (s) for (u = a - 1; u >= 0; --u) {\n          if (!m()) {\n            i.updateRangeFromParsed(c, t, g, l);\n            break;\n          }\n        }\n        return c;\n      }\n    }, {\n      key: \"getAllParsedValues\",\n      value: function getAllParsedValues(t) {\n        var e = this._cachedMeta._parsed,\n            i = [];\n        var n, o, s;\n\n        for (n = 0, o = e.length; n < o; ++n) {\n          s = e[n][t.axis], X(s) && i.push(s);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        return !1;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = e.iScale,\n            n = e.vScale,\n            o = this.getParsed(t);\n        return {\n          label: i ? \"\" + i.getLabelForValue(o[i.axis]) : \"\",\n          value: n ? \"\" + n.getLabelForValue(o[n.axis]) : \"\"\n        };\n      }\n    }, {\n      key: \"_update\",\n      value: function _update(t) {\n        var e = this,\n            i = e._cachedMeta;\n        e.configure(), e._cachedDataOpts = {}, e.update(t || \"default\"), i._clip = function (t) {\n          var e, i, n, o;\n          return U(t) ? (e = t.top, i = t.right, n = t.bottom, o = t.left) : e = i = n = o = t, {\n            top: e,\n            right: i,\n            bottom: n,\n            left: o\n          };\n        }(K(e.options.clip, function (t, e, i) {\n          if (!1 === i) return !1;\n          var n = wi(t, i),\n              o = wi(e, i);\n          return {\n            top: o.end,\n            right: n.end,\n            bottom: o.start,\n            left: n.start\n          };\n        }(i.xScale, i.yScale, e.getMaxOverflow())));\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {}\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this,\n            e = t._ctx,\n            i = t.chart,\n            n = t._cachedMeta,\n            o = n.data || [],\n            s = i.chartArea,\n            a = [],\n            r = t._drawStart || 0,\n            l = t._drawCount || o.length - r;\n        var c;\n\n        for (n.dataset && n.dataset.draw(e, s, r, l), c = r; c < r + l; ++c) {\n          var _t16 = o[c];\n          _t16.active ? a.push(_t16) : _t16.draw(e, s);\n        }\n\n        for (c = 0; c < a.length; ++c) {\n          a[c].draw(e, s);\n        }\n      }\n    }, {\n      key: \"getStyle\",\n      value: function getStyle(t, e) {\n        var i = e ? \"active\" : \"default\";\n        return void 0 === t && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(i) : this.resolveDataElementOptions(t || 0, i);\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext(t, e, i) {\n        var n = this,\n            o = n.getDataset();\n        var s;\n\n        if (t >= 0 && t < n._cachedMeta.data.length) {\n          var _e16 = n._cachedMeta.data[t];\n          s = _e16.$context || (_e16.$context = function (t, e, i) {\n            return Object.assign(Object.create(t), {\n              active: !1,\n              dataIndex: e,\n              parsed: void 0,\n              raw: void 0,\n              element: i,\n              index: e,\n              mode: \"default\",\n              type: \"data\"\n            });\n          }(n.getContext(), t, _e16)), s.parsed = n.getParsed(t), s.raw = o.data[t], s.index = s.dataIndex = t;\n        } else s = n.$context || (n.$context = function (t, e) {\n          return Object.assign(Object.create(t), {\n            active: !1,\n            dataset: void 0,\n            datasetIndex: e,\n            index: e,\n            mode: \"default\",\n            type: \"dataset\"\n          });\n        }(n.chart.getContext(), n.index)), s.dataset = o, s.index = s.datasetIndex = n.index;\n\n        return s.active = !!e, s.mode = i, s;\n      }\n    }, {\n      key: \"resolveDatasetElementOptions\",\n      value: function resolveDatasetElementOptions(t) {\n        return this._resolveElementOptions(this.datasetElementType.id, t);\n      }\n    }, {\n      key: \"resolveDataElementOptions\",\n      value: function resolveDataElementOptions(t, e) {\n        return this._resolveElementOptions(this.dataElementType.id, e, t);\n      }\n    }, {\n      key: \"_resolveElementOptions\",\n      value: function _resolveElementOptions(t) {\n        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"default\";\n        var i = arguments.length > 2 ? arguments[2] : undefined;\n        var n = this,\n            o = \"active\" === e,\n            s = n._cachedDataOpts,\n            a = t + \"-\" + e,\n            r = s[a],\n            l = n.enableOptionSharing && ht(i);\n        if (r) return Li(r, l);\n        var c = n.chart.config,\n            h = c.datasetElementScopeKeys(n._type, t),\n            d = o ? [\"\".concat(t, \"Hover\"), \"hover\", t, \"\"] : [t, \"\"],\n            u = c.getOptionScopes(n.getDataset(), h),\n            f = Object.keys(xt.elements[t]),\n            g = c.resolveNamedOptions(u, f, function () {\n          return n.getContext(i, o);\n        }, d);\n        return g.$shared && (g.$shared = l, s[a] = Object.freeze(Li(g, l))), g;\n      }\n    }, {\n      key: \"_resolveAnimations\",\n      value: function _resolveAnimations(t, e, i) {\n        var n = this,\n            o = n.chart,\n            s = n._cachedDataOpts,\n            a = \"animation-\".concat(e),\n            r = s[a];\n        if (r) return r;\n        var l;\n\n        if (!1 !== o.options.animation) {\n          var _o10 = n.chart.config,\n              _s10 = _o10.datasetAnimationScopeKeys(n._type, e),\n              _a9 = _o10.getOptionScopes(n.getDataset(), _s10);\n\n          l = _o10.createResolver(_a9, n.getContext(t, i, e));\n        }\n\n        var c = new vi(o, l && l.animations);\n        return l && l._cacheable && (s[a] = Object.freeze(c)), c;\n      }\n    }, {\n      key: \"getSharedOptions\",\n      value: function getSharedOptions(t) {\n        if (t.$shared) return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));\n      }\n    }, {\n      key: \"includeOptions\",\n      value: function includeOptions(t, e) {\n        return !e || Ai(t) || this.chart._animationsDisabled;\n      }\n    }, {\n      key: \"updateElement\",\n      value: function updateElement(t, e, i, n) {\n        Ai(n) ? Object.assign(t, i) : this._resolveAnimations(e, n).update(t, i);\n      }\n    }, {\n      key: \"updateSharedOptions\",\n      value: function updateSharedOptions(t, e, i) {\n        t && !Ai(e) && this._resolveAnimations(void 0, e).update(t, i);\n      }\n    }, {\n      key: \"_setStyle\",\n      value: function _setStyle(t, e, i, n) {\n        t.active = n;\n        var o = this.getStyle(e, n);\n\n        this._resolveAnimations(e, i, n).update(t, {\n          options: !n && this.getSharedOptions(o) || o\n        });\n      }\n    }, {\n      key: \"removeHoverStyle\",\n      value: function removeHoverStyle(t, e, i) {\n        this._setStyle(t, i, \"active\", !1);\n      }\n    }, {\n      key: \"setHoverStyle\",\n      value: function setHoverStyle(t, e, i) {\n        this._setStyle(t, i, \"active\", !0);\n      }\n    }, {\n      key: \"_removeDatasetHoverStyle\",\n      value: function _removeDatasetHoverStyle() {\n        var t = this._cachedMeta.dataset;\n        t && this._setStyle(t, void 0, \"active\", !1);\n      }\n    }, {\n      key: \"_setDatasetHoverStyle\",\n      value: function _setDatasetHoverStyle() {\n        var t = this._cachedMeta.dataset;\n        t && this._setStyle(t, void 0, \"active\", !0);\n      }\n    }, {\n      key: \"_resyncElements\",\n      value: function _resyncElements(t) {\n        var e = this,\n            i = e._data,\n            n = e._cachedMeta.data;\n\n        var _iterator6 = _createForOfIteratorHelper(e._syncList),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _step6$value = _slicedToArray(_step6.value, 3),\n                _t17 = _step6$value[0],\n                _i9 = _step6$value[1],\n                _n16 = _step6$value[2];\n\n            e[_t17](_i9, _n16);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        e._syncList = [];\n        var o = n.length,\n            s = i.length,\n            a = Math.min(s, o);\n        a && e.parse(0, a), s > o ? e._insertElements(o, s - o, t) : s < o && e._removeElements(s, o - s);\n      }\n    }, {\n      key: \"_insertElements\",\n      value: function _insertElements(t, e) {\n        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n        var n = this,\n            o = n._cachedMeta,\n            s = o.data,\n            a = t + e;\n        var r;\n\n        var l = function l(t) {\n          for (t.length += e, r = t.length - 1; r >= a; r--) {\n            t[r] = t[r - e];\n          }\n        };\n\n        for (l(s), r = t; r < a; ++r) {\n          s[r] = new n.dataElementType();\n        }\n\n        n._parsing && l(o._parsed), n.parse(t, e), i && n.updateElements(s, t, e, \"reset\");\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {}\n    }, {\n      key: \"_removeElements\",\n      value: function _removeElements(t, e) {\n        var i = this._cachedMeta;\n\n        if (this._parsing) {\n          var _n17 = i._parsed.splice(t, e);\n\n          i._stacked && Ti(i, _n17);\n        }\n\n        i.data.splice(t, e);\n      }\n    }, {\n      key: \"_onDataPush\",\n      value: function _onDataPush() {\n        var t = arguments.length;\n\n        this._syncList.push([\"_insertElements\", this.getDataset().data.length - t, t]);\n      }\n    }, {\n      key: \"_onDataPop\",\n      value: function _onDataPop() {\n        this._syncList.push([\"_removeElements\", this._cachedMeta.data.length - 1, 1]);\n      }\n    }, {\n      key: \"_onDataShift\",\n      value: function _onDataShift() {\n        this._syncList.push([\"_removeElements\", 0, 1]);\n      }\n    }, {\n      key: \"_onDataSplice\",\n      value: function _onDataSplice(t, e) {\n        this._syncList.push([\"_removeElements\", t, e]), this._syncList.push([\"_insertElements\", t, arguments.length - 2]);\n      }\n    }, {\n      key: \"_onDataUnshift\",\n      value: function _onDataUnshift() {\n        this._syncList.push([\"_insertElements\", 0, arguments.length]);\n      }\n    }]);\n\n    return Ri;\n  }();\n\n  Ri.defaults = {}, Ri.prototype.datasetElementType = null, Ri.prototype.dataElementType = null;\n\n  var Ei = /*#__PURE__*/function () {\n    function Ei() {\n      _classCallCheck(this, Ei);\n\n      this.x = void 0, this.y = void 0, this.active = !1, this.options = void 0, this.$animations = void 0;\n    }\n\n    _createClass(Ei, [{\n      key: \"tooltipPosition\",\n      value: function tooltipPosition(t) {\n        var _this$getProps = this.getProps([\"x\", \"y\"], t),\n            e = _this$getProps.x,\n            i = _this$getProps.y;\n\n        return {\n          x: e,\n          y: i\n        };\n      }\n    }, {\n      key: \"hasValue\",\n      value: function hasValue() {\n        return Tt(this.x) && Tt(this.y);\n      }\n    }, {\n      key: \"getProps\",\n      value: function getProps(t, e) {\n        var i = this,\n            n = this.$animations;\n        if (!e || !n) return i;\n        var o = {};\n        return t.forEach(function (t) {\n          o[t] = n[t] && n[t].active() ? n[t]._to : i[t];\n        }), o;\n      }\n    }]);\n\n    return Ei;\n  }();\n\n  Ei.defaults = {}, Ei.defaultRoutes = void 0;\n  var Ii = new Map();\n\n  function zi(t, e, i) {\n    return function (t, e) {\n      e = e || {};\n      var i = t + JSON.stringify(e);\n      var n = Ii.get(i);\n      return n || (n = new Intl.NumberFormat(t, e), Ii.set(i, n)), n;\n    }(e, i).format(t);\n  }\n\n  var Fi = {\n    values: function values(t) {\n      return Y(t) ? t : \"\" + t;\n    },\n    numeric: function numeric(t, e, i) {\n      if (0 === t) return \"0\";\n      var n = this.chart.options.locale;\n      var o,\n          s = t;\n\n      if (i.length > 1) {\n        var _e17 = Math.max(Math.abs(i[0].value), Math.abs(i[i.length - 1].value));\n\n        (_e17 < 1e-4 || _e17 > 1e15) && (o = \"scientific\"), s = function (t, e) {\n          var i = e.length > 3 ? e[2].value - e[1].value : e[1].value - e[0].value;\n          Math.abs(i) >= 1 && t !== Math.floor(t) && (i = t - Math.floor(t));\n          return i;\n        }(t, i);\n      }\n\n      var a = Pt(Math.abs(s)),\n          r = Math.max(Math.min(-1 * Math.floor(a), 20), 0),\n          l = {\n        notation: o,\n        minimumFractionDigits: r,\n        maximumFractionDigits: r\n      };\n      return Object.assign(l, this.options.ticks.format), zi(t, n, l);\n    },\n    logarithmic: function logarithmic(t, e, i) {\n      if (0 === t) return \"0\";\n      var n = t / Math.pow(10, Math.floor(Pt(t)));\n      return 1 === n || 2 === n || 5 === n ? Fi.numeric.call(this, t, e, i) : \"\";\n    }\n  };\n  var Vi = {\n    formatters: Fi\n  };\n\n  function Bi(t, e) {\n    var i = t.options.ticks,\n        n = i.maxTicksLimit || function (t) {\n      var e = t.options.offset,\n          i = t._tickSize(),\n          n = t._length / i + (e ? 0 : 1),\n          o = t._maxLength / i;\n\n      return Math.floor(Math.min(n, o));\n    }(t),\n        o = i.major.enabled ? function (t) {\n      var e = [];\n      var i, n;\n\n      for (i = 0, n = t.length; i < n; i++) {\n        t[i].major && e.push(i);\n      }\n\n      return e;\n    }(e) : [],\n        s = o.length,\n        a = o[0],\n        r = o[s - 1],\n        l = [];\n\n    if (s > n) return function (t, e, i, n) {\n      var o,\n          s = 0,\n          a = i[0];\n\n      for (n = Math.ceil(n), o = 0; o < t.length; o++) {\n        o === a && (e.push(t[o]), s++, a = i[s * n]);\n      }\n    }(e, l, o, s / n), l;\n\n    var c = function (t, e, i) {\n      var n = function (t) {\n        var e = t.length;\n        var i, n;\n        if (e < 2) return !1;\n\n        for (n = t[0], i = 1; i < e; ++i) {\n          if (t[i] - t[i - 1] !== n) return !1;\n        }\n\n        return n;\n      }(t),\n          o = e.length / i;\n\n      if (!n) return Math.max(o, 1);\n      var s = Ot(n);\n\n      for (var _t18 = 0, _e18 = s.length - 1; _t18 < _e18; _t18++) {\n        var _e19 = s[_t18];\n        if (_e19 > o) return _e19;\n      }\n\n      return Math.max(o, 1);\n    }(o, e, n);\n\n    if (s > 0) {\n      var _t19, _i10;\n\n      var _n18 = s > 1 ? Math.round((r - a) / (s - 1)) : null;\n\n      for (Wi(e, l, c, $(_n18) ? 0 : a - _n18, a), _t19 = 0, _i10 = s - 1; _t19 < _i10; _t19++) {\n        Wi(e, l, c, o[_t19], o[_t19 + 1]);\n      }\n\n      return Wi(e, l, c, r, $(_n18) ? e.length : r + _n18), l;\n    }\n\n    return Wi(e, l, c), l;\n  }\n\n  function Wi(t, e, i, n, o) {\n    var s = K(n, 0),\n        a = Math.min(K(o, t.length), t.length);\n    var r,\n        l,\n        c,\n        h = 0;\n\n    for (i = Math.ceil(i), o && (r = o - n, i = r / Math.floor(r / i)), c = s; c < 0;) {\n      h++, c = Math.round(s + h * i);\n    }\n\n    for (l = Math.max(s, 0); l < a; l++) {\n      l === c && (e.push(t[l]), h++, c = Math.round(s + h * i));\n    }\n  }\n\n  xt.set(\"scale\", {\n    display: !0,\n    offset: !1,\n    reverse: !1,\n    beginAtZero: !1,\n    bounds: \"ticks\",\n    grace: 0,\n    grid: {\n      display: !0,\n      lineWidth: 1,\n      drawBorder: !0,\n      drawOnChartArea: !0,\n      drawTicks: !0,\n      tickLength: 8,\n      tickWidth: function tickWidth(t, e) {\n        return e.lineWidth;\n      },\n      tickColor: function tickColor(t, e) {\n        return e.color;\n      },\n      offset: !1,\n      borderDash: [],\n      borderDashOffset: 0,\n      borderWidth: 1\n    },\n    title: {\n      display: !1,\n      text: \"\",\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: !1,\n      textStrokeWidth: 0,\n      textStrokeColor: \"\",\n      padding: 3,\n      display: !0,\n      autoSkip: !0,\n      autoSkipPadding: 3,\n      labelOffset: 0,\n      callback: Vi.formatters.values,\n      minor: {},\n      major: {},\n      align: \"center\",\n      crossAlign: \"near\",\n      showLabelBackdrop: !1,\n      backdropColor: \"rgba(255, 255, 255, 0.75)\",\n      backdropPadding: 2\n    }\n  }), xt.route(\"scale.ticks\", \"color\", \"\", \"color\"), xt.route(\"scale.grid\", \"color\", \"\", \"borderColor\"), xt.route(\"scale.grid\", \"borderColor\", \"\", \"borderColor\"), xt.route(\"scale.title\", \"color\", \"\", \"color\"), xt.describe(\"scale\", {\n    _fallback: !1,\n    _scriptable: function _scriptable(t) {\n      return !t.startsWith(\"before\") && !t.startsWith(\"after\") && \"callback\" !== t && \"parser\" !== t;\n    },\n    _indexable: function _indexable(t) {\n      return \"borderDash\" !== t && \"tickBorderDash\" !== t;\n    }\n  }), xt.describe(\"scales\", {\n    _fallback: \"scale\"\n  });\n\n  var Hi = function Hi(t, e, i) {\n    return \"top\" === e || \"left\" === e ? t[e] + i : t[e] - i;\n  };\n\n  function Ni(t, e) {\n    var i = [],\n        n = t.length / e,\n        o = t.length;\n    var s = 0;\n\n    for (; s < o; s += n) {\n      i.push(t[Math.floor(s)]);\n    }\n\n    return i;\n  }\n\n  function ji(t, e, i) {\n    var n = t.ticks.length,\n        o = Math.min(e, n - 1),\n        s = t._startPixel,\n        a = t._endPixel,\n        r = 1e-6;\n    var l,\n        c = t.getPixelForTick(o);\n    if (!(i && (l = 1 === n ? Math.max(c - s, a - c) : 0 === e ? (t.getPixelForTick(1) - c) / 2 : (c - t.getPixelForTick(o - 1)) / 2, c += o < e ? l : -l, c < s - r || c > a + r))) return c;\n  }\n\n  function $i(t) {\n    return t.drawTicks ? t.tickLength : 0;\n  }\n\n  function Yi(t, e) {\n    if (!t.display) return 0;\n    var i = Fe(t.font, e),\n        n = ze(t.padding);\n    return (Y(t.text) ? t.text.length : 1) * i.lineHeight + n.height;\n  }\n\n  function Ui(t, e, i) {\n    var o = n(t);\n    return (i && \"right\" !== e || !i && \"right\" === e) && (o = function (t) {\n      return \"left\" === t ? \"right\" : \"right\" === t ? \"left\" : t;\n    }(o)), o;\n  }\n\n  var Xi = /*#__PURE__*/function (_Ei) {\n    _inherits(Xi, _Ei);\n\n    var _super3 = _createSuper(Xi);\n\n    function Xi(t) {\n      var _this;\n\n      _classCallCheck(this, Xi);\n\n      _this = _super3.call(this), _this.id = t.id, _this.type = t.type, _this.options = void 0, _this.ctx = t.ctx, _this.chart = t.chart, _this.top = void 0, _this.bottom = void 0, _this.left = void 0, _this.right = void 0, _this.width = void 0, _this.height = void 0, _this._margins = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, _this.maxWidth = void 0, _this.maxHeight = void 0, _this.paddingTop = void 0, _this.paddingBottom = void 0, _this.paddingLeft = void 0, _this.paddingRight = void 0, _this.axis = void 0, _this.labelRotation = void 0, _this.min = void 0, _this.max = void 0, _this._range = void 0, _this.ticks = [], _this._gridLineItems = null, _this._labelItems = null, _this._labelSizes = null, _this._length = 0, _this._maxLength = 0, _this._longestTextCache = {}, _this._startPixel = void 0, _this._endPixel = void 0, _this._reversePixels = !1, _this._userMax = void 0, _this._userMin = void 0, _this._suggestedMax = void 0, _this._suggestedMin = void 0, _this._ticksLength = 0, _this._borderValue = 0, _this._cache = {}, _this._dataLimitsCached = !1, _this.$context = void 0;\n      return _this;\n    }\n\n    _createClass(Xi, [{\n      key: \"init\",\n      value: function init(t) {\n        var e = this;\n        e.options = t.setContext(e.getContext()), e.axis = t.axis, e._userMin = e.parse(t.min), e._userMax = e.parse(t.max), e._suggestedMin = e.parse(t.suggestedMin), e._suggestedMax = e.parse(t.suggestedMax);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        return t;\n      }\n    }, {\n      key: \"getUserBounds\",\n      value: function getUserBounds() {\n        var t = this._userMin,\n            e = this._userMax,\n            i = this._suggestedMin,\n            n = this._suggestedMax;\n        return t = q(t, Number.POSITIVE_INFINITY), e = q(e, Number.NEGATIVE_INFINITY), i = q(i, Number.POSITIVE_INFINITY), n = q(n, Number.NEGATIVE_INFINITY), {\n          min: q(t, i),\n          max: q(e, n),\n          minDefined: X(t),\n          maxDefined: X(e)\n        };\n      }\n    }, {\n      key: \"getMinMax\",\n      value: function getMinMax(t) {\n        var e = this;\n\n        var i,\n            _e$getUserBounds = e.getUserBounds(),\n            n = _e$getUserBounds.min,\n            o = _e$getUserBounds.max,\n            s = _e$getUserBounds.minDefined,\n            a = _e$getUserBounds.maxDefined;\n\n        if (s && a) return {\n          min: n,\n          max: o\n        };\n        var r = e.getMatchingVisibleMetas();\n\n        for (var _l6 = 0, _c4 = r.length; _l6 < _c4; ++_l6) {\n          i = r[_l6].controller.getMinMax(e, t), s || (n = Math.min(n, i.min)), a || (o = Math.max(o, i.max));\n        }\n\n        return {\n          min: q(n, q(o, n)),\n          max: q(o, q(n, o))\n        };\n      }\n    }, {\n      key: \"getPadding\",\n      value: function getPadding() {\n        var t = this;\n        return {\n          left: t.paddingLeft || 0,\n          top: t.paddingTop || 0,\n          right: t.paddingRight || 0,\n          bottom: t.paddingBottom || 0\n        };\n      }\n    }, {\n      key: \"getTicks\",\n      value: function getTicks() {\n        return this.ticks;\n      }\n    }, {\n      key: \"getLabels\",\n      value: function getLabels() {\n        var t = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];\n      }\n    }, {\n      key: \"beforeLayout\",\n      value: function beforeLayout() {\n        this._cache = {}, this._dataLimitsCached = !1;\n      }\n    }, {\n      key: \"beforeUpdate\",\n      value: function beforeUpdate() {\n        Q(this.options.beforeUpdate, [this]);\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e, i) {\n        var n = this,\n            o = n.options.ticks,\n            s = o.sampleSize;\n        n.beforeUpdate(), n.maxWidth = t, n.maxHeight = e, n._margins = i = Object.assign({\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        }, i), n.ticks = null, n._labelSizes = null, n._gridLineItems = null, n._labelItems = null, n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n._maxLength = n.isHorizontal() ? n.width + i.left + i.right : n.height + i.top + i.bottom, n._dataLimitsCached || (n.beforeDataLimits(), n.determineDataLimits(), n.afterDataLimits(), n._range = Be(n, n.options.grace), n._dataLimitsCached = !0), n.beforeBuildTicks(), n.ticks = n.buildTicks() || [], n.afterBuildTicks();\n        var a = s < n.ticks.length;\n        n._convertTicksToLabels(a ? Ni(n.ticks, s) : n.ticks), n.configure(), n.beforeCalculateLabelRotation(), n.calculateLabelRotation(), n.afterCalculateLabelRotation(), o.display && (o.autoSkip || \"auto\" === o.source) && (n.ticks = Bi(n, n.ticks), n._labelSizes = null), a && n._convertTicksToLabels(n.ticks), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate();\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this;\n        var e,\n            i,\n            n = t.options.reverse;\n        t.isHorizontal() ? (e = t.left, i = t.right) : (e = t.top, i = t.bottom, n = !n), t._startPixel = e, t._endPixel = i, t._reversePixels = n, t._length = i - e, t._alignToPixels = t.options.alignToPixels;\n      }\n    }, {\n      key: \"afterUpdate\",\n      value: function afterUpdate() {\n        Q(this.options.afterUpdate, [this]);\n      }\n    }, {\n      key: \"beforeSetDimensions\",\n      value: function beforeSetDimensions() {\n        Q(this.options.beforeSetDimensions, [this]);\n      }\n    }, {\n      key: \"setDimensions\",\n      value: function setDimensions() {\n        var t = this;\n        t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;\n      }\n    }, {\n      key: \"afterSetDimensions\",\n      value: function afterSetDimensions() {\n        Q(this.options.afterSetDimensions, [this]);\n      }\n    }, {\n      key: \"_callHooks\",\n      value: function _callHooks(t) {\n        var e = this;\n        e.chart.notifyPlugins(t, e.getContext()), Q(e.options[t], [e]);\n      }\n    }, {\n      key: \"beforeDataLimits\",\n      value: function beforeDataLimits() {\n        this._callHooks(\"beforeDataLimits\");\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {}\n    }, {\n      key: \"afterDataLimits\",\n      value: function afterDataLimits() {\n        this._callHooks(\"afterDataLimits\");\n      }\n    }, {\n      key: \"beforeBuildTicks\",\n      value: function beforeBuildTicks() {\n        this._callHooks(\"beforeBuildTicks\");\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        return [];\n      }\n    }, {\n      key: \"afterBuildTicks\",\n      value: function afterBuildTicks() {\n        this._callHooks(\"afterBuildTicks\");\n      }\n    }, {\n      key: \"beforeTickToLabelConversion\",\n      value: function beforeTickToLabelConversion() {\n        Q(this.options.beforeTickToLabelConversion, [this]);\n      }\n    }, {\n      key: \"generateTickLabels\",\n      value: function generateTickLabels(t) {\n        var e = this,\n            i = e.options.ticks;\n        var n, o, s;\n\n        for (n = 0, o = t.length; n < o; n++) {\n          s = t[n], s.label = Q(i.callback, [s.value, n, t], e);\n        }\n\n        for (n = 0; n < o; n++) {\n          $(t[n].label) && (t.splice(n, 1), o--, n--);\n        }\n      }\n    }, {\n      key: \"afterTickToLabelConversion\",\n      value: function afterTickToLabelConversion() {\n        Q(this.options.afterTickToLabelConversion, [this]);\n      }\n    }, {\n      key: \"beforeCalculateLabelRotation\",\n      value: function beforeCalculateLabelRotation() {\n        Q(this.options.beforeCalculateLabelRotation, [this]);\n      }\n    }, {\n      key: \"calculateLabelRotation\",\n      value: function calculateLabelRotation() {\n        var t = this,\n            e = t.options,\n            i = e.ticks,\n            n = t.ticks.length,\n            o = i.minRotation || 0,\n            s = i.maxRotation;\n        var a,\n            r,\n            l,\n            c = o;\n        if (!t._isVisible() || !i.display || o >= s || n <= 1 || !t.isHorizontal()) return void (t.labelRotation = o);\n\n        var h = t._getLabelSizes(),\n            d = h.widest.width,\n            u = h.highest.height,\n            f = Nt(t.chart.width - d, 0, t.maxWidth);\n\n        a = e.offset ? t.maxWidth / n : f / (n - 1), d + 6 > a && (a = f / (n - (e.offset ? .5 : 1)), r = t.maxHeight - $i(e.grid) - i.padding - Yi(e.title, t.chart.options.font), l = Math.sqrt(d * d + u * u), c = It(Math.min(Math.asin(Math.min((h.highest.height + 6) / a, 1)), Math.asin(Math.min(r / l, 1)) - Math.asin(u / l))), c = Math.max(o, Math.min(s, c))), t.labelRotation = c;\n      }\n    }, {\n      key: \"afterCalculateLabelRotation\",\n      value: function afterCalculateLabelRotation() {\n        Q(this.options.afterCalculateLabelRotation, [this]);\n      }\n    }, {\n      key: \"beforeFit\",\n      value: function beforeFit() {\n        Q(this.options.beforeFit, [this]);\n      }\n    }, {\n      key: \"fit\",\n      value: function fit() {\n        var t = this,\n            e = {\n          width: 0,\n          height: 0\n        },\n            i = t.chart,\n            _t$options = t.options,\n            n = _t$options.ticks,\n            o = _t$options.title,\n            s = _t$options.grid,\n            a = t._isVisible(),\n            r = t.isHorizontal();\n\n        if (a) {\n          var _a10 = Yi(o, i.options.font);\n\n          if (r ? (e.width = t.maxWidth, e.height = $i(s) + _a10) : (e.height = t.maxHeight, e.width = $i(s) + _a10), n.display && t.ticks.length) {\n            var _t$_getLabelSizes = t._getLabelSizes(),\n                _i11 = _t$_getLabelSizes.first,\n                _o11 = _t$_getLabelSizes.last,\n                _s11 = _t$_getLabelSizes.widest,\n                _a11 = _t$_getLabelSizes.highest,\n                _l7 = 2 * n.padding,\n                _c5 = Et(t.labelRotation),\n                _h4 = Math.cos(_c5),\n                _d2 = Math.sin(_c5);\n\n            if (r) {\n              var _i12 = n.mirror ? 0 : _d2 * _s11.width + _h4 * _a11.height;\n\n              e.height = Math.min(t.maxHeight, e.height + _i12 + _l7);\n            } else {\n              var _i13 = n.mirror ? 0 : _h4 * _s11.width + _d2 * _a11.height;\n\n              e.width = Math.min(t.maxWidth, e.width + _i13 + _l7);\n            }\n\n            t._calculatePadding(_i11, _o11, _d2, _h4);\n          }\n        }\n\n        t._handleMargins(), r ? (t.width = t._length = i.width - t._margins.left - t._margins.right, t.height = e.height) : (t.width = e.width, t.height = t._length = i.height - t._margins.top - t._margins.bottom);\n      }\n    }, {\n      key: \"_calculatePadding\",\n      value: function _calculatePadding(t, e, i, n) {\n        var o = this,\n            _o$options = o.options,\n            _o$options$ticks = _o$options.ticks,\n            s = _o$options$ticks.align,\n            a = _o$options$ticks.padding,\n            r = _o$options.position,\n            l = 0 !== o.labelRotation,\n            c = \"top\" !== r && \"x\" === o.axis;\n\n        if (o.isHorizontal()) {\n          var _r5 = o.getPixelForTick(0) - o.left,\n              _h5 = o.right - o.getPixelForTick(o.ticks.length - 1);\n\n          var _d3 = 0,\n              _u = 0;\n          l ? c ? (_d3 = n * t.width, _u = i * e.height) : (_d3 = i * t.height, _u = n * e.width) : \"start\" === s ? _u = e.width : \"end\" === s ? _d3 = t.width : (_d3 = t.width / 2, _u = e.width / 2), o.paddingLeft = Math.max((_d3 - _r5 + a) * o.width / (o.width - _r5), 0), o.paddingRight = Math.max((_u - _h5 + a) * o.width / (o.width - _h5), 0);\n        } else {\n          var _i14 = e.height / 2,\n              _n19 = t.height / 2;\n\n          \"start\" === s ? (_i14 = 0, _n19 = t.height) : \"end\" === s && (_i14 = e.height, _n19 = 0), o.paddingTop = _i14 + a, o.paddingBottom = _n19 + a;\n        }\n      }\n    }, {\n      key: \"_handleMargins\",\n      value: function _handleMargins() {\n        var t = this;\n        t._margins && (t._margins.left = Math.max(t.paddingLeft, t._margins.left), t._margins.top = Math.max(t.paddingTop, t._margins.top), t._margins.right = Math.max(t.paddingRight, t._margins.right), t._margins.bottom = Math.max(t.paddingBottom, t._margins.bottom));\n      }\n    }, {\n      key: \"afterFit\",\n      value: function afterFit() {\n        Q(this.options.afterFit, [this]);\n      }\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        var _this$options = this.options,\n            t = _this$options.axis,\n            e = _this$options.position;\n        return \"top\" === e || \"bottom\" === e || \"x\" === t;\n      }\n    }, {\n      key: \"isFullSize\",\n      value: function isFullSize() {\n        return this.options.fullSize;\n      }\n    }, {\n      key: \"_convertTicksToLabels\",\n      value: function _convertTicksToLabels(t) {\n        var e = this;\n        e.beforeTickToLabelConversion(), e.generateTickLabels(t), e.afterTickToLabelConversion();\n      }\n    }, {\n      key: \"_getLabelSizes\",\n      value: function _getLabelSizes() {\n        var t = this;\n        var e = t._labelSizes;\n\n        if (!e) {\n          var _i15 = t.options.ticks.sampleSize;\n          var _n20 = t.ticks;\n          _i15 < _n20.length && (_n20 = Ni(_n20, _i15)), t._labelSizes = e = t._computeLabelSizes(_n20, _n20.length);\n        }\n\n        return e;\n      }\n    }, {\n      key: \"_computeLabelSizes\",\n      value: function _computeLabelSizes(t, e) {\n        var i = this.ctx,\n            n = this._longestTextCache,\n            o = [],\n            s = [];\n        var a,\n            r,\n            l,\n            c,\n            h,\n            d,\n            u,\n            f,\n            g,\n            p,\n            m,\n            x = 0,\n            b = 0;\n\n        for (a = 0; a < e; ++a) {\n          if (c = t[a].label, h = this._resolveTickFontOptions(a), i.font = d = h.string, u = n[d] = n[d] || {\n            data: {},\n            gc: []\n          }, f = h.lineHeight, g = p = 0, $(c) || Y(c)) {\n            if (Y(c)) for (r = 0, l = c.length; r < l; ++r) {\n              m = c[r], $(m) || Y(m) || (g = Yt(i, u.data, u.gc, g, m), p += f);\n            }\n          } else g = Yt(i, u.data, u.gc, g, c), p = f;\n\n          o.push(g), s.push(p), x = Math.max(g, x), b = Math.max(p, b);\n        }\n\n        !function (t, e) {\n          J(t, function (t) {\n            var i = t.gc,\n                n = i.length / 2;\n            var o;\n\n            if (n > e) {\n              for (o = 0; o < n; ++o) {\n                delete t.data[i[o]];\n              }\n\n              i.splice(0, n);\n            }\n          });\n        }(n, e);\n\n        var _ = o.indexOf(x),\n            y = s.indexOf(b),\n            v = function v(t) {\n          return {\n            width: o[t] || 0,\n            height: s[t] || 0\n          };\n        };\n\n        return {\n          first: v(0),\n          last: v(e - 1),\n          widest: v(_),\n          highest: v(y),\n          widths: o,\n          heights: s\n        };\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        return t;\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t, e) {\n        return NaN;\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {}\n    }, {\n      key: \"getPixelForTick\",\n      value: function getPixelForTick(t) {\n        var e = this.ticks;\n        return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n      }\n    }, {\n      key: \"getPixelForDecimal\",\n      value: function getPixelForDecimal(t) {\n        var e = this;\n        e._reversePixels && (t = 1 - t);\n        var i = e._startPixel + t * e._length;\n        return jt(e._alignToPixels ? Xt(e.chart, i, 0) : i);\n      }\n    }, {\n      key: \"getDecimalForPixel\",\n      value: function getDecimalForPixel(t) {\n        var e = (t - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - e : e;\n      }\n    }, {\n      key: \"getBasePixel\",\n      value: function getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n      }\n    }, {\n      key: \"getBaseValue\",\n      value: function getBaseValue() {\n        var t = this.min,\n            e = this.max;\n        return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext(t) {\n        var e = this,\n            i = e.ticks || [];\n\n        if (t >= 0 && t < i.length) {\n          var _n21 = i[t];\n          return _n21.$context || (_n21.$context = function (t, e, i) {\n            return Object.assign(Object.create(t), {\n              tick: i,\n              index: e,\n              type: \"tick\"\n            });\n          }(e.getContext(), t, _n21));\n        }\n\n        return e.$context || (e.$context = (n = e.chart.getContext(), o = e, Object.assign(Object.create(n), {\n          scale: o,\n          type: \"scale\"\n        })));\n        var n, o;\n      }\n    }, {\n      key: \"_tickSize\",\n      value: function _tickSize() {\n        var t = this,\n            e = t.options.ticks,\n            i = Et(t.labelRotation),\n            n = Math.abs(Math.cos(i)),\n            o = Math.abs(Math.sin(i)),\n            s = t._getLabelSizes(),\n            a = e.autoSkipPadding || 0,\n            r = s ? s.widest.width + a : 0,\n            l = s ? s.highest.height + a : 0;\n\n        return t.isHorizontal() ? l * n > r * o ? r / n : l / o : l * o < r * n ? l / n : r / o;\n      }\n    }, {\n      key: \"_isVisible\",\n      value: function _isVisible() {\n        var t = this.options.display;\n        return \"auto\" !== t ? !!t : this.getMatchingVisibleMetas().length > 0;\n      }\n    }, {\n      key: \"_computeGridLineItems\",\n      value: function _computeGridLineItems(t) {\n        var e = this,\n            i = e.axis,\n            n = e.chart,\n            o = e.options,\n            s = o.grid,\n            a = o.position,\n            r = s.offset,\n            l = e.isHorizontal(),\n            c = e.ticks.length + (r ? 1 : 0),\n            h = $i(s),\n            d = [],\n            u = s.setContext(e.getContext()),\n            f = u.drawBorder ? u.borderWidth : 0,\n            g = f / 2,\n            p = function p(t) {\n          return Xt(n, t, f);\n        };\n\n        var m, x, b, _, y, v, w, M, k, S, P, D;\n\n        if (\"top\" === a) m = p(e.bottom), v = e.bottom - h, M = m - g, S = p(t.top) + g, D = t.bottom;else if (\"bottom\" === a) m = p(e.top), S = t.top, D = p(t.bottom) - g, v = m + g, M = e.top + h;else if (\"left\" === a) m = p(e.right), y = e.right - h, w = m - g, k = p(t.left) + g, P = t.right;else if (\"right\" === a) m = p(e.left), k = t.left, P = p(t.right) - g, y = m + g, w = e.left + h;else if (\"x\" === i) {\n          if (\"center\" === a) m = p((t.top + t.bottom) / 2 + .5);else if (U(a)) {\n            var _t20 = Object.keys(a)[0],\n                _i16 = a[_t20];\n            m = p(e.chart.scales[_t20].getPixelForValue(_i16));\n          }\n          S = t.top, D = t.bottom, v = m + g, M = v + h;\n        } else if (\"y\" === i) {\n          if (\"center\" === a) m = p((t.left + t.right) / 2);else if (U(a)) {\n            var _t21 = Object.keys(a)[0],\n                _i17 = a[_t21];\n            m = p(e.chart.scales[_t21].getPixelForValue(_i17));\n          }\n          y = m - g, w = y - h, k = t.left, P = t.right;\n        }\n\n        for (x = 0; x < c; ++x) {\n          var _t22 = s.setContext(e.getContext(x)),\n              _i18 = _t22.lineWidth,\n              _o12 = _t22.color,\n              _a12 = s.borderDash || [],\n              _c6 = _t22.borderDashOffset,\n              _h6 = _t22.tickWidth,\n              _u2 = _t22.tickColor,\n              _f = _t22.tickBorderDash || [],\n              _g = _t22.tickBorderDashOffset;\n\n          b = ji(e, x, r), void 0 !== b && (_ = Xt(n, b, _i18), l ? y = w = k = P = _ : v = M = S = D = _, d.push({\n            tx1: y,\n            ty1: v,\n            tx2: w,\n            ty2: M,\n            x1: k,\n            y1: S,\n            x2: P,\n            y2: D,\n            width: _i18,\n            color: _o12,\n            borderDash: _a12,\n            borderDashOffset: _c6,\n            tickWidth: _h6,\n            tickColor: _u2,\n            tickBorderDash: _f,\n            tickBorderDashOffset: _g\n          }));\n        }\n\n        return e._ticksLength = c, e._borderValue = m, d;\n      }\n    }, {\n      key: \"_computeLabelItems\",\n      value: function _computeLabelItems(t) {\n        var e = this,\n            i = e.axis,\n            n = e.options,\n            o = n.position,\n            s = n.ticks,\n            a = e.isHorizontal(),\n            r = e.ticks,\n            l = s.align,\n            c = s.crossAlign,\n            h = s.padding,\n            d = s.mirror,\n            u = $i(n.grid),\n            f = u + h,\n            g = d ? -h : f,\n            p = -Et(e.labelRotation),\n            m = [];\n\n        var x,\n            b,\n            _,\n            y,\n            v,\n            w,\n            M,\n            k,\n            S,\n            P,\n            D,\n            C,\n            O = \"middle\";\n\n        if (\"top\" === o) w = e.bottom - g, M = e._getXAxisLabelAlignment();else if (\"bottom\" === o) w = e.top + g, M = e._getXAxisLabelAlignment();else if (\"left\" === o) {\n          var _t23 = e._getYAxisLabelAlignment(u);\n\n          M = _t23.textAlign, v = _t23.x;\n        } else if (\"right\" === o) {\n          var _t24 = e._getYAxisLabelAlignment(u);\n\n          M = _t24.textAlign, v = _t24.x;\n        } else if (\"x\" === i) {\n          if (\"center\" === o) w = (t.top + t.bottom) / 2 + f;else if (U(o)) {\n            var _t25 = Object.keys(o)[0],\n                _i19 = o[_t25];\n            w = e.chart.scales[_t25].getPixelForValue(_i19) + f;\n          }\n          M = e._getXAxisLabelAlignment();\n        } else if (\"y\" === i) {\n          if (\"center\" === o) v = (t.left + t.right) / 2 - f;else if (U(o)) {\n            var _t26 = Object.keys(o)[0],\n                _i20 = o[_t26];\n            v = e.chart.scales[_t26].getPixelForValue(_i20);\n          }\n          M = e._getYAxisLabelAlignment(u).textAlign;\n        }\n        \"y\" === i && (\"start\" === l ? O = \"top\" : \"end\" === l && (O = \"bottom\"));\n\n        var T = e._getLabelSizes();\n\n        for (x = 0, b = r.length; x < b; ++x) {\n          _ = r[x], y = _.label;\n\n          var _t27 = s.setContext(e.getContext(x));\n\n          k = e.getPixelForTick(x) + s.labelOffset, S = e._resolveTickFontOptions(x), P = S.lineHeight, D = Y(y) ? y.length : 1;\n\n          var _i21 = D / 2,\n              _n22 = _t27.color,\n              _l8 = _t27.textStrokeColor,\n              _h7 = _t27.textStrokeWidth;\n\n          var _u3 = void 0;\n\n          if (a ? (v = k, C = \"top\" === o ? \"near\" === c || 0 !== p ? -D * P + P / 2 : \"center\" === c ? -T.highest.height / 2 - _i21 * P + P : -T.highest.height + P / 2 : \"near\" === c || 0 !== p ? P / 2 : \"center\" === c ? T.highest.height / 2 - _i21 * P : T.highest.height - D * P, d && (C *= -1)) : (w = k, C = (1 - D) * P / 2), _t27.showLabelBackdrop) {\n            var _e20 = ze(_t27.backdropPadding),\n                _i22 = T.heights[x],\n                _n23 = T.widths[x];\n\n            var _o13 = w + C - _e20.top,\n                _s12 = v - _e20.left;\n\n            switch (O) {\n              case \"middle\":\n                _o13 -= _i22 / 2;\n                break;\n\n              case \"bottom\":\n                _o13 -= _i22;\n            }\n\n            switch (M) {\n              case \"center\":\n                _s12 -= _n23 / 2;\n                break;\n\n              case \"right\":\n                _s12 -= _n23;\n            }\n\n            _u3 = {\n              left: _s12,\n              top: _o13,\n              width: _n23 + _e20.width,\n              height: _i22 + _e20.height,\n              color: _t27.backdropColor\n            };\n          }\n\n          m.push({\n            rotation: p,\n            label: y,\n            font: S,\n            color: _n22,\n            strokeColor: _l8,\n            strokeWidth: _h7,\n            textOffset: C,\n            textAlign: M,\n            textBaseline: O,\n            translation: [v, w],\n            backdrop: _u3\n          });\n        }\n\n        return m;\n      }\n    }, {\n      key: \"_getXAxisLabelAlignment\",\n      value: function _getXAxisLabelAlignment() {\n        var _this$options2 = this.options,\n            t = _this$options2.position,\n            e = _this$options2.ticks;\n        if (-Et(this.labelRotation)) return \"top\" === t ? \"left\" : \"right\";\n        var i = \"center\";\n        return \"start\" === e.align ? i = \"left\" : \"end\" === e.align && (i = \"right\"), i;\n      }\n    }, {\n      key: \"_getYAxisLabelAlignment\",\n      value: function _getYAxisLabelAlignment(t) {\n        var e = this,\n            _e$options = e.options,\n            i = _e$options.position,\n            _e$options$ticks = _e$options.ticks,\n            n = _e$options$ticks.crossAlign,\n            o = _e$options$ticks.mirror,\n            s = _e$options$ticks.padding,\n            a = t + s,\n            r = e._getLabelSizes().widest.width;\n\n        var l, c;\n        return \"left\" === i ? o ? (l = \"left\", c = e.right + s) : (c = e.right - a, \"near\" === n ? l = \"right\" : \"center\" === n ? (l = \"center\", c -= r / 2) : (l = \"left\", c = e.left)) : \"right\" === i ? o ? (l = \"right\", c = e.left + s) : (c = e.left + a, \"near\" === n ? l = \"left\" : \"center\" === n ? (l = \"center\", c += r / 2) : (l = \"right\", c = e.right)) : l = \"right\", {\n          textAlign: l,\n          x: c\n        };\n      }\n    }, {\n      key: \"_computeLabelArea\",\n      value: function _computeLabelArea() {\n        var t = this;\n        if (t.options.ticks.mirror) return;\n        var e = t.chart,\n            i = t.options.position;\n        return \"left\" === i || \"right\" === i ? {\n          top: 0,\n          left: t.left,\n          bottom: e.height,\n          right: t.right\n        } : \"top\" === i || \"bottom\" === i ? {\n          top: t.top,\n          left: 0,\n          bottom: t.bottom,\n          right: e.width\n        } : void 0;\n      }\n    }, {\n      key: \"drawBackground\",\n      value: function drawBackground() {\n        var t = this.ctx,\n            e = this.options.backgroundColor,\n            i = this.left,\n            n = this.top,\n            o = this.width,\n            s = this.height;\n        e && (t.save(), t.fillStyle = e, t.fillRect(i, n, o, s), t.restore());\n      }\n    }, {\n      key: \"getLineWidthForValue\",\n      value: function getLineWidthForValue(t) {\n        var e = this,\n            i = e.options.grid;\n        if (!e._isVisible() || !i.display) return 0;\n        var n = e.ticks.findIndex(function (e) {\n          return e.value === t;\n        });\n\n        if (n >= 0) {\n          return i.setContext(e.getContext(n)).lineWidth;\n        }\n\n        return 0;\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function drawGrid(t) {\n        var e = this,\n            i = e.options.grid,\n            n = e.ctx,\n            o = e._gridLineItems || (e._gridLineItems = e._computeGridLineItems(t));\n\n        var s, a;\n\n        var r = function r(t, e, i) {\n          i.width && i.color && (n.save(), n.lineWidth = i.width, n.strokeStyle = i.color, n.setLineDash(i.borderDash || []), n.lineDashOffset = i.borderDashOffset, n.beginPath(), n.moveTo(t.x, t.y), n.lineTo(e.x, e.y), n.stroke(), n.restore());\n        };\n\n        if (i.display) for (s = 0, a = o.length; s < a; ++s) {\n          var _t28 = o[s];\n          i.drawOnChartArea && r({\n            x: _t28.x1,\n            y: _t28.y1\n          }, {\n            x: _t28.x2,\n            y: _t28.y2\n          }, _t28), i.drawTicks && r({\n            x: _t28.tx1,\n            y: _t28.ty1\n          }, {\n            x: _t28.tx2,\n            y: _t28.ty2\n          }, {\n            color: _t28.tickColor,\n            width: _t28.tickWidth,\n            borderDash: _t28.tickBorderDash,\n            borderDashOffset: _t28.tickBorderDashOffset\n          });\n        }\n      }\n    }, {\n      key: \"drawBorder\",\n      value: function drawBorder() {\n        var t = this,\n            e = t.chart,\n            i = t.ctx,\n            n = t.options.grid,\n            o = n.setContext(t.getContext()),\n            s = n.drawBorder ? o.borderWidth : 0;\n        if (!s) return;\n        var a = n.setContext(t.getContext(0)).lineWidth,\n            r = t._borderValue;\n        var l, c, h, d;\n        t.isHorizontal() ? (l = Xt(e, t.left, s) - s / 2, c = Xt(e, t.right, a) + a / 2, h = d = r) : (h = Xt(e, t.top, s) - s / 2, d = Xt(e, t.bottom, a) + a / 2, l = c = r), i.save(), i.lineWidth = o.borderWidth, i.strokeStyle = o.borderColor, i.beginPath(), i.moveTo(l, h), i.lineTo(c, d), i.stroke(), i.restore();\n      }\n    }, {\n      key: \"drawLabels\",\n      value: function drawLabels(t) {\n        var e = this;\n        if (!e.options.ticks.display) return;\n\n        var i = e.ctx,\n            n = e._computeLabelArea();\n\n        n && Zt(i, n);\n\n        var o = e._labelItems || (e._labelItems = e._computeLabelItems(t));\n\n        var s, a;\n\n        for (s = 0, a = o.length; s < a; ++s) {\n          var _t29 = o[s],\n              _e21 = _t29.font,\n              _n24 = _t29.label;\n          _t29.backdrop && (i.fillStyle = _t29.backdrop.color, i.fillRect(_t29.backdrop.left, _t29.backdrop.top, _t29.backdrop.width, _t29.backdrop.height)), ee(i, _n24, 0, _t29.textOffset, _e21, _t29);\n        }\n\n        n && Qt(i);\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle() {\n        var t = this.ctx,\n            _this$options3 = this.options,\n            e = _this$options3.position,\n            i = _this$options3.title,\n            n = _this$options3.reverse;\n        if (!i.display) return;\n        var s = Fe(i.font),\n            a = ze(i.padding),\n            r = i.align;\n        var l = s.lineHeight / 2;\n        \"bottom\" === e ? (l += a.bottom, Y(i.text) && (l += s.lineHeight * (i.text.length - 1))) : l += a.top;\n\n        var _ref3 = function (t, e, i, n) {\n          var s = t.top,\n              a = t.left,\n              r = t.bottom,\n              l = t.right;\n          var c,\n              h,\n              d,\n              u = 0;\n          return t.isHorizontal() ? (h = o(n, a, l), d = Hi(t, i, e), c = l - a) : (h = Hi(t, i, e), d = o(n, r, s), u = \"left\" === i ? -Mt : Mt), {\n            titleX: h,\n            titleY: d,\n            maxWidth: c,\n            rotation: u\n          };\n        }(this, l, e, r),\n            c = _ref3.titleX,\n            h = _ref3.titleY,\n            d = _ref3.maxWidth,\n            u = _ref3.rotation;\n\n        ee(t, i.text, 0, 0, s, {\n          color: i.color,\n          maxWidth: d,\n          rotation: u,\n          textAlign: Ui(r, e, n),\n          textBaseline: \"middle\",\n          translation: [c, h]\n        });\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this;\n        e._isVisible() && (e.drawBackground(), e.drawGrid(t), e.drawBorder(), e.drawTitle(), e.drawLabels(t));\n      }\n    }, {\n      key: \"_layers\",\n      value: function _layers() {\n        var t = this,\n            e = t.options,\n            i = e.ticks && e.ticks.z || 0,\n            n = e.grid && e.grid.z || 0;\n        return t._isVisible() && t.draw === Xi.prototype.draw ? [{\n          z: n,\n          draw: function draw(e) {\n            t.drawBackground(), t.drawGrid(e), t.drawTitle();\n          }\n        }, {\n          z: n + 1,\n          draw: function draw() {\n            t.drawBorder();\n          }\n        }, {\n          z: i,\n          draw: function draw(e) {\n            t.drawLabels(e);\n          }\n        }] : [{\n          z: i,\n          draw: function draw(e) {\n            t.draw(e);\n          }\n        }];\n      }\n    }, {\n      key: \"getMatchingVisibleMetas\",\n      value: function getMatchingVisibleMetas(t) {\n        var e = this,\n            i = e.chart.getSortedVisibleDatasetMetas(),\n            n = e.axis + \"AxisID\",\n            o = [];\n        var s, a;\n\n        for (s = 0, a = i.length; s < a; ++s) {\n          var _a13 = i[s];\n          _a13[n] !== e.id || t && _a13.type !== t || o.push(_a13);\n        }\n\n        return o;\n      }\n    }, {\n      key: \"_resolveTickFontOptions\",\n      value: function _resolveTickFontOptions(t) {\n        return Fe(this.options.ticks.setContext(this.getContext(t)).font);\n      }\n    }, {\n      key: \"_maxDigits\",\n      value: function _maxDigits() {\n        var t = this,\n            e = t._resolveTickFontOptions(0).lineHeight;\n\n        return (t.isHorizontal() ? t.width : t.height) / e;\n      }\n    }]);\n\n    return Xi;\n  }(Ei);\n\n  function qi(t) {\n    var _s13;\n\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"\"];\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;\n    var n = arguments.length > 3 ? arguments[3] : undefined;\n    var o = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {\n      return t[0];\n    };\n    ht(n) || (n = an(\"_fallback\", t));\n    var s = (_s13 = {}, _defineProperty(_s13, Symbol.toStringTag, \"Object\"), _defineProperty(_s13, \"_cacheable\", !0), _defineProperty(_s13, \"_scopes\", t), _defineProperty(_s13, \"_rootScopes\", i), _defineProperty(_s13, \"_fallback\", n), _defineProperty(_s13, \"_getTarget\", o), _defineProperty(_s13, \"override\", function override(o) {\n      return qi([o].concat(_toConsumableArray(t)), e, i, n);\n    }), _s13);\n    return new Proxy(s, {\n      deleteProperty: function deleteProperty(e, i) {\n        return delete e[i], delete e._keys, delete t[0][i], !0;\n      },\n      get: function get(i, n) {\n        return Ji(i, n, function () {\n          return function (t, e, i, n) {\n            var o;\n\n            var _iterator7 = _createForOfIteratorHelper(e),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _s14 = _step7.value;\n                if (o = an(Zi(_s14, t), i), ht(o)) return Qi(t, o) ? on(i, n, t, o) : o;\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }(n, e, t, i);\n        });\n      },\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(t, e) {\n        return Reflect.getOwnPropertyDescriptor(t._scopes[0], e);\n      },\n      getPrototypeOf: function getPrototypeOf() {\n        return Reflect.getPrototypeOf(t[0]);\n      },\n      has: function has(t, e) {\n        return rn(t).includes(e);\n      },\n      ownKeys: function ownKeys(t) {\n        return rn(t);\n      },\n      set: function set(t, e, i) {\n        return (t._storage || (t._storage = o()))[e] = i, delete t[e], delete t._keys, !0;\n      }\n    });\n  }\n\n  function Ki(t, e, i, n) {\n    var o = {\n      _cacheable: !1,\n      _proxy: t,\n      _context: e,\n      _subProxy: i,\n      _stack: new Set(),\n      _descriptors: Gi(t, n),\n      setContext: function setContext(e) {\n        return Ki(t, e, i, n);\n      },\n      override: function override(o) {\n        return Ki(t.override(o), e, i, n);\n      }\n    };\n    return new Proxy(o, {\n      deleteProperty: function deleteProperty(e, i) {\n        return delete e[i], delete t[i], !0;\n      },\n      get: function get(t, e, i) {\n        return Ji(t, e, function () {\n          return function (t, e, i) {\n            var n = t._proxy,\n                o = t._context,\n                s = t._subProxy,\n                a = t._descriptors;\n            var r = n[e];\n            dt(r) && a.isScriptable(e) && (r = function (t, e, i, n) {\n              var o = i._proxy,\n                  s = i._context,\n                  a = i._subProxy,\n                  r = i._stack;\n              if (r.has(t)) throw new Error(\"Recursion detected: \" + _toConsumableArray(r).join(\"->\") + \"->\" + t);\n              r.add(t), e = e(s, a || n), r[\"delete\"](t), U(e) && (e = on(o._scopes, o, t, e));\n              return e;\n            }(e, r, t, i));\n            Y(r) && r.length && (r = function (t, e, i, n) {\n              var o = i._proxy,\n                  s = i._context,\n                  a = i._subProxy,\n                  r = i._descriptors;\n              if (ht(s.index) && n(t)) e = e[s.index % e.length];else if (U(e[0])) {\n                var _i23 = e,\n                    _n25 = o._scopes.filter(function (t) {\n                  return t !== _i23;\n                });\n\n                e = [];\n\n                var _iterator8 = _createForOfIteratorHelper(_i23),\n                    _step8;\n\n                try {\n                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                    var _l9 = _step8.value;\n\n                    var _i24 = on(_n25, o, t, _l9);\n\n                    e.push(Ki(_i24, s, a && a[t], r));\n                  }\n                } catch (err) {\n                  _iterator8.e(err);\n                } finally {\n                  _iterator8.f();\n                }\n              }\n              return e;\n            }(e, r, t, a.isIndexable));\n            Qi(e, r) && (r = Ki(r, o, s && s[e], a));\n            return r;\n          }(t, e, i);\n        });\n      },\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(e, i) {\n        return e._descriptors.allKeys ? Reflect.has(t, i) ? {\n          enumerable: !0,\n          configurable: !0\n        } : void 0 : Reflect.getOwnPropertyDescriptor(t, i);\n      },\n      getPrototypeOf: function getPrototypeOf() {\n        return Reflect.getPrototypeOf(t);\n      },\n      has: function has(e, i) {\n        return Reflect.has(t, i);\n      },\n      ownKeys: function ownKeys() {\n        return Reflect.ownKeys(t);\n      },\n      set: function set(e, i, n) {\n        return t[i] = n, delete e[i], !0;\n      }\n    });\n  }\n\n  function Gi(t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scriptable: !0,\n      indexable: !0\n    };\n    var _t$_scriptable = t._scriptable,\n        i = _t$_scriptable === void 0 ? e.scriptable : _t$_scriptable,\n        _t$_indexable = t._indexable,\n        n = _t$_indexable === void 0 ? e.indexable : _t$_indexable,\n        _t$_allKeys = t._allKeys,\n        o = _t$_allKeys === void 0 ? e.allKeys : _t$_allKeys;\n    return {\n      allKeys: o,\n      scriptable: i,\n      indexable: n,\n      isScriptable: dt(i) ? i : function () {\n        return i;\n      },\n      isIndexable: dt(n) ? n : function () {\n        return n;\n      }\n    };\n  }\n\n  var Zi = function Zi(t, e) {\n    return t ? t + ct(e) : e;\n  },\n      Qi = function Qi(t, e) {\n    return U(e) && \"adapters\" !== t;\n  };\n\n  function Ji(t, e, i) {\n    var n = t[e];\n    return ht(n) || (n = i(), ht(n) && (t[e] = n)), n;\n  }\n\n  function tn(t, e, i) {\n    return dt(t) ? t(e, i) : t;\n  }\n\n  var en = function en(t, e) {\n    return !0 === t ? e : \"string\" == typeof t ? lt(e, t) : void 0;\n  };\n\n  function nn(t, e, i, n) {\n    var _iterator9 = _createForOfIteratorHelper(e),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _o14 = _step9.value;\n\n        var _e22 = en(i, _o14);\n\n        if (_e22) {\n          t.add(_e22);\n\n          var _o15 = tn(_e22._fallback, i, _e22);\n\n          if (ht(_o15) && _o15 !== i && _o15 !== n) return _o15;\n        } else if (!1 === _e22 && ht(n) && i !== n) return null;\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    return !1;\n  }\n\n  function on(t, e, i, n) {\n    var o = e._rootScopes,\n        s = tn(e._fallback, i, n),\n        a = [].concat(_toConsumableArray(t), _toConsumableArray(o)),\n        r = new Set();\n    r.add(n);\n    var l = sn(r, a, i, s || i);\n    return null !== l && (!ht(s) || s === i || (l = sn(r, a, s, l), null !== l)) && qi(_toConsumableArray(r), [\"\"], o, s, function () {\n      return function (t, e, i) {\n        var n = t._getTarget();\n\n        e in n || (n[e] = {});\n        var o = n[e];\n        if (Y(o) && U(i)) return i;\n        return o;\n      }(e, i, n);\n    });\n  }\n\n  function sn(t, e, i, n) {\n    for (; i;) {\n      i = nn(t, e, i, n);\n    }\n\n    return i;\n  }\n\n  function an(t, e) {\n    var _iterator10 = _createForOfIteratorHelper(e),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var _i25 = _step10.value;\n        if (!_i25) continue;\n        var _e23 = _i25[t];\n        if (ht(_e23)) return _e23;\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n  }\n\n  function rn(t) {\n    var e = t._keys;\n    return e || (e = t._keys = function (t) {\n      var e = new Set();\n\n      var _iterator11 = _createForOfIteratorHelper(t),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _i26 = _step11.value;\n\n          var _iterator12 = _createForOfIteratorHelper(Object.keys(_i26).filter(function (t) {\n            return !t.startsWith(\"_\");\n          })),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var _t30 = _step12.value;\n              e.add(_t30);\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return _toConsumableArray(e);\n    }(t._scopes)), e;\n  }\n\n  var ln = Number.EPSILON || 1e-14,\n      cn = function cn(t, e) {\n    return e < t.length && !t[e].skip && t[e];\n  },\n      hn = function hn(t) {\n    return \"x\" === t ? \"y\" : \"x\";\n  };\n\n  function dn(t, e, i, n) {\n    var o = t.skip ? e : t,\n        s = e,\n        a = i.skip ? e : i,\n        r = Vt(s, o),\n        l = Vt(a, s);\n    var c = r / (r + l),\n        h = l / (r + l);\n    c = isNaN(c) ? 0 : c, h = isNaN(h) ? 0 : h;\n    var d = n * c,\n        u = n * h;\n    return {\n      previous: {\n        x: s.x - d * (a.x - o.x),\n        y: s.y - d * (a.y - o.y)\n      },\n      next: {\n        x: s.x + u * (a.x - o.x),\n        y: s.y + u * (a.y - o.y)\n      }\n    };\n  }\n\n  function un(t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"x\";\n    var i = hn(e),\n        n = t.length,\n        o = Array(n).fill(0),\n        s = Array(n);\n    var a,\n        r,\n        l,\n        c = cn(t, 0);\n\n    for (a = 0; a < n; ++a) {\n      if (r = l, l = c, c = cn(t, a + 1), l) {\n        if (c) {\n          var _t31 = c[e] - l[e];\n\n          o[a] = 0 !== _t31 ? (c[i] - l[i]) / _t31 : 0;\n        }\n\n        s[a] = r ? c ? Dt(o[a - 1]) !== Dt(o[a]) ? 0 : (o[a - 1] + o[a]) / 2 : o[a - 1] : o[a];\n      }\n    }\n\n    !function (t, e, i) {\n      var n = t.length;\n      var o,\n          s,\n          a,\n          r,\n          l,\n          c = cn(t, 0);\n\n      for (var _h8 = 0; _h8 < n - 1; ++_h8) {\n        l = c, c = cn(t, _h8 + 1), l && c && (At(e[_h8], 0, ln) ? i[_h8] = i[_h8 + 1] = 0 : (o = i[_h8] / e[_h8], s = i[_h8 + 1] / e[_h8], r = Math.pow(o, 2) + Math.pow(s, 2), r <= 9 || (a = 3 / Math.sqrt(r), i[_h8] = o * a * e[_h8], i[_h8 + 1] = s * a * e[_h8])));\n      }\n    }(t, o, s), function (t, e) {\n      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"x\";\n      var n = hn(i),\n          o = t.length;\n      var s,\n          a,\n          r,\n          l = cn(t, 0);\n\n      for (var _c7 = 0; _c7 < o; ++_c7) {\n        if (a = r, r = l, l = cn(t, _c7 + 1), !r) continue;\n        var _o16 = r[i],\n            _h9 = r[n];\n        a && (s = (_o16 - a[i]) / 3, r[\"cp1\".concat(i)] = _o16 - s, r[\"cp1\".concat(n)] = _h9 - s * e[_c7]), l && (s = (l[i] - _o16) / 3, r[\"cp2\".concat(i)] = _o16 + s, r[\"cp2\".concat(n)] = _h9 + s * e[_c7]);\n      }\n    }(t, s, e);\n  }\n\n  function fn(t, e, i) {\n    return Math.max(Math.min(t, i), e);\n  }\n\n  function gn(t, e, i, n, o) {\n    var s, a, r, l;\n    if (e.spanGaps && (t = t.filter(function (t) {\n      return !t.skip;\n    })), \"monotone\" === e.cubicInterpolationMode) un(t, o);else {\n      var _i27 = n ? t[t.length - 1] : t[0];\n\n      for (s = 0, a = t.length; s < a; ++s) {\n        r = t[s], l = dn(_i27, r, t[Math.min(s + 1, a - (n ? 0 : 1)) % a], e.tension), r.cp1x = l.previous.x, r.cp1y = l.previous.y, r.cp2x = l.next.x, r.cp2y = l.next.y, _i27 = r;\n      }\n    }\n    e.capBezierPoints && function (t, e) {\n      var i,\n          n,\n          o,\n          s,\n          a,\n          r = Gt(t[0], e);\n\n      for (i = 0, n = t.length; i < n; ++i) {\n        a = s, s = r, r = i < n - 1 && Gt(t[i + 1], e), s && (o = t[i], a && (o.cp1x = fn(o.cp1x, e.left, e.right), o.cp1y = fn(o.cp1y, e.top, e.bottom)), r && (o.cp2x = fn(o.cp2x, e.left, e.right), o.cp2y = fn(o.cp2y, e.top, e.bottom)));\n      }\n    }(t, i);\n  }\n\n  function pn(t, e, i, n) {\n    return {\n      x: t.x + i * (e.x - t.x),\n      y: t.y + i * (e.y - t.y)\n    };\n  }\n\n  function mn(t, e, i, n) {\n    return {\n      x: t.x + i * (e.x - t.x),\n      y: \"middle\" === n ? i < .5 ? t.y : e.y : \"after\" === n ? i < 1 ? t.y : e.y : i > 0 ? e.y : t.y\n    };\n  }\n\n  function xn(t, e, i, n) {\n    var o = {\n      x: t.cp2x,\n      y: t.cp2y\n    },\n        s = {\n      x: e.cp1x,\n      y: e.cp1y\n    },\n        a = pn(t, o, i),\n        r = pn(o, s, i),\n        l = pn(s, e, i),\n        c = pn(a, r, i),\n        h = pn(r, l, i);\n    return pn(c, h, i);\n  }\n\n  function bn(t, e, i) {\n    return t ? function (t, e) {\n      return {\n        x: function x(i) {\n          return t + t + e - i;\n        },\n        setWidth: function setWidth(t) {\n          e = t;\n        },\n        textAlign: function textAlign(t) {\n          return \"center\" === t ? t : \"right\" === t ? \"left\" : \"right\";\n        },\n        xPlus: function xPlus(t, e) {\n          return t - e;\n        },\n        leftForLtr: function leftForLtr(t, e) {\n          return t - e;\n        }\n      };\n    }(e, i) : {\n      x: function x(t) {\n        return t;\n      },\n      setWidth: function setWidth(t) {},\n      textAlign: function textAlign(t) {\n        return t;\n      },\n      xPlus: function xPlus(t, e) {\n        return t + e;\n      },\n      leftForLtr: function leftForLtr(t, e) {\n        return t;\n      }\n    };\n  }\n\n  function _n(t, e) {\n    var i, n;\n    \"ltr\" !== e && \"rtl\" !== e || (i = t.canvas.style, n = [i.getPropertyValue(\"direction\"), i.getPropertyPriority(\"direction\")], i.setProperty(\"direction\", e, \"important\"), t.prevTextDirection = n);\n  }\n\n  function yn(t, e) {\n    void 0 !== e && (delete t.prevTextDirection, t.canvas.style.setProperty(\"direction\", e[0], e[1]));\n  }\n\n  function vn(t) {\n    return \"angle\" === t ? {\n      between: Ht,\n      compare: Bt,\n      normalize: Wt\n    } : {\n      between: function between(t, e, i) {\n        return t >= Math.min(e, i) && t <= Math.max(i, e);\n      },\n      compare: function compare(t, e) {\n        return t - e;\n      },\n      normalize: function normalize(t) {\n        return t;\n      }\n    };\n  }\n\n  function wn(_ref4) {\n    var t = _ref4.start,\n        e = _ref4.end,\n        i = _ref4.count,\n        n = _ref4.loop,\n        o = _ref4.style;\n    return {\n      start: t % i,\n      end: e % i,\n      loop: n && (e - t + 1) % i == 0,\n      style: o\n    };\n  }\n\n  function Mn(t, e, i) {\n    if (!i) return [t];\n\n    var n = i.property,\n        o = i.start,\n        s = i.end,\n        a = e.length,\n        _vn = vn(n),\n        r = _vn.compare,\n        l = _vn.between,\n        c = _vn.normalize,\n        _ref5 = function (t, e, i) {\n      var n = i.property,\n          o = i.start,\n          s = i.end,\n          _vn2 = vn(n),\n          a = _vn2.between,\n          r = _vn2.normalize,\n          l = e.length;\n\n      var c,\n          h,\n          d = t.start,\n          u = t.end,\n          f = t.loop;\n\n      if (f) {\n        for (d += l, u += l, c = 0, h = l; c < h && a(r(e[d % l][n]), o, s); ++c) {\n          d--, u--;\n        }\n\n        d %= l, u %= l;\n      }\n\n      return u < d && (u += l), {\n        start: d,\n        end: u,\n        loop: f,\n        style: t.style\n      };\n    }(t, e, i),\n        h = _ref5.start,\n        d = _ref5.end,\n        u = _ref5.loop,\n        f = _ref5.style,\n        g = [];\n\n    var p,\n        m,\n        x,\n        b = !1,\n        _ = null;\n\n    var y = function y() {\n      return b || l(o, x, p) && 0 !== r(o, x);\n    },\n        v = function v() {\n      return !b || 0 === r(s, p) || l(s, x, p);\n    };\n\n    for (var _t32 = h, _i28 = h; _t32 <= d; ++_t32) {\n      m = e[_t32 % a], m.skip || (p = c(m[n]), p !== x && (b = l(p, o, s), null === _ && y() && (_ = 0 === r(p, o) ? _t32 : _i28), null !== _ && v() && (g.push(wn({\n        start: _,\n        end: _t32,\n        loop: u,\n        count: a,\n        style: f\n      })), _ = null), _i28 = _t32, x = p));\n    }\n\n    return null !== _ && g.push(wn({\n      start: _,\n      end: d,\n      loop: u,\n      count: a,\n      style: f\n    })), g;\n  }\n\n  function kn(t, e) {\n    var i = [],\n        n = t.segments;\n\n    for (var _o17 = 0; _o17 < n.length; _o17++) {\n      var _s15 = Mn(n[_o17], t.points, e);\n\n      _s15.length && i.push.apply(i, _toConsumableArray(_s15));\n    }\n\n    return i;\n  }\n\n  function Sn(t, e) {\n    var i = t.points,\n        n = t.options.spanGaps,\n        o = i.length;\n    if (!o) return [];\n\n    var s = !!t._loop,\n        _ref6 = function (t, e, i, n) {\n      var o = 0,\n          s = e - 1;\n      if (i && !n) for (; o < e && !t[o].skip;) {\n        o++;\n      }\n\n      for (; o < e && t[o].skip;) {\n        o++;\n      }\n\n      for (o %= e, i && (s += o); s > o && t[s % e].skip;) {\n        s--;\n      }\n\n      return s %= e, {\n        start: o,\n        end: s\n      };\n    }(i, o, s, n),\n        a = _ref6.start,\n        r = _ref6.end;\n\n    if (!0 === n) return Pn([{\n      start: a,\n      end: r,\n      loop: s\n    }], i, e);\n    return Pn(function (t, e, i, n) {\n      var o = t.length,\n          s = [];\n      var a,\n          r = e,\n          l = t[e];\n\n      for (a = e + 1; a <= i; ++a) {\n        var _i29 = t[a % o];\n        _i29.skip || _i29.stop ? l.skip || (n = !1, s.push({\n          start: e % o,\n          end: (a - 1) % o,\n          loop: n\n        }), e = r = _i29.stop ? a : null) : (r = a, l.skip && (e = a)), l = _i29;\n      }\n\n      return null !== r && s.push({\n        start: e % o,\n        end: r % o,\n        loop: n\n      }), s;\n    }(i, a, r < a ? r + o : r, !!t._fullLoop && 0 === a && r === o - 1), i, e);\n  }\n\n  function Pn(t, e, i) {\n    return i && i.setContext && e ? function (t, e, i) {\n      var n = e.length,\n          o = [];\n      var s = t[0].start,\n          a = s;\n\n      var _iterator13 = _createForOfIteratorHelper(t),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _r6 = _step13.value;\n\n          var _t33 = void 0,\n              _l10 = void 0,\n              _c8 = e[s % n];\n\n          for (a = s + 1; a <= _r6.end; a++) {\n            var _h10 = e[a % n];\n            _l10 = Dn(i.setContext({\n              type: \"segment\",\n              p0: _c8,\n              p1: _h10\n            })), Cn(_l10, _t33) && (o.push({\n              start: s,\n              end: a - 1,\n              loop: _r6.loop,\n              style: _t33\n            }), _t33 = _l10, s = a - 1), _c8 = _h10, _t33 = _l10;\n          }\n\n          s < a - 1 && (o.push({\n            start: s,\n            end: a - 1,\n            loop: _r6.loop,\n            style: _l10\n          }), s = a - 1);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      return o;\n    }(t, e, i) : t;\n  }\n\n  function Dn(t) {\n    return {\n      backgroundColor: t.backgroundColor,\n      borderCapStyle: t.borderCapStyle,\n      borderDash: t.borderDash,\n      borderDashOffset: t.borderDashOffset,\n      borderJoinStyle: t.borderJoinStyle,\n      borderWidth: t.borderWidth,\n      borderColor: t.borderColor\n    };\n  }\n\n  function Cn(t, e) {\n    return e && JSON.stringify(t) !== JSON.stringify(e);\n  }\n\n  var On = Object.freeze({\n    __proto__: null,\n    easingEffects: mi,\n    color: W,\n    getHoverColor: H,\n    noop: N,\n    uid: j,\n    isNullOrUndef: $,\n    isArray: Y,\n    isObject: U,\n    isFinite: X,\n    finiteOrDefault: q,\n    valueOrDefault: K,\n    toPercentage: G,\n    toDimension: Z,\n    callback: Q,\n    each: J,\n    _elementsEqual: tt,\n    clone: et,\n    _merger: nt,\n    merge: ot,\n    mergeIf: st,\n    _mergerIf: at,\n    _deprecated: function _deprecated(t, e, i, n) {\n      void 0 !== e && console.warn(t + ': \"' + i + '\" is deprecated. Please use \"' + n + '\" instead');\n    },\n    resolveObjectKey: lt,\n    _capitalize: ct,\n    defined: ht,\n    isFunction: dt,\n    setsEqual: ut,\n    toFontString: $t,\n    _measureText: Yt,\n    _longestText: Ut,\n    _alignPixel: Xt,\n    clearCanvas: qt,\n    drawPoint: Kt,\n    _isPointInArea: Gt,\n    clipArea: Zt,\n    unclipArea: Qt,\n    _steppedLineTo: Jt,\n    _bezierCurveTo: te,\n    renderText: ee,\n    addRoundedRectPath: ie,\n    _lookup: ne,\n    _lookupByKey: oe,\n    _rlookupByKey: se,\n    _filterBetween: ae,\n    listenArrayEvents: le,\n    unlistenArrayEvents: ce,\n    _arrayUnique: he,\n    _createResolver: qi,\n    _attachContext: Ki,\n    _descriptors: Gi,\n    splineCurve: dn,\n    splineCurveMonotone: un,\n    _updateBezierControlPoints: gn,\n    _getParentNode: de,\n    getStyle: ge,\n    getRelativePosition: xe,\n    getMaximumSize: _e,\n    retinaScale: ye,\n    supportsEventListenerOptions: ve,\n    readUsedSize: we,\n    fontString: function fontString(t, e, i) {\n      return e + \" \" + t + \"px \" + i;\n    },\n    requestAnimFrame: t,\n    throttled: e,\n    debounce: i,\n    _toLeftRightCenter: n,\n    _alignStartEnd: o,\n    _textX: s,\n    _pointInLine: pn,\n    _steppedInterpolation: mn,\n    _bezierInterpolation: xn,\n    formatNumber: zi,\n    toLineHeight: Le,\n    _readValueToProps: Re,\n    toTRBL: Ee,\n    toTRBLCorners: Ie,\n    toPadding: ze,\n    toFont: Fe,\n    resolve: Ve,\n    _addGrace: Be,\n    PI: bt,\n    TAU: _t,\n    PITAU: yt,\n    INFINITY: vt,\n    RAD_PER_DEG: wt,\n    HALF_PI: Mt,\n    QUARTER_PI: kt,\n    TWO_THIRDS_PI: St,\n    log10: Pt,\n    sign: Dt,\n    niceNum: Ct,\n    _factorize: Ot,\n    isNumber: Tt,\n    almostEquals: At,\n    almostWhole: Lt,\n    _setMinAndMaxByKey: Rt,\n    toRadians: Et,\n    toDegrees: It,\n    _decimalPlaces: zt,\n    getAngleFromPoint: Ft,\n    distanceBetweenPoints: Vt,\n    _angleDiff: Bt,\n    _normalizeAngle: Wt,\n    _angleBetween: Ht,\n    _limitValue: Nt,\n    _int16Range: jt,\n    getRtlAdapter: bn,\n    overrideTextDirection: _n,\n    restoreTextDirection: yn,\n    _boundSegment: Mn,\n    _boundSegments: kn,\n    _computeSegments: Sn\n  });\n\n  var Tn = /*#__PURE__*/function () {\n    function Tn(t, e, i) {\n      _classCallCheck(this, Tn);\n\n      this.type = t, this.scope = e, this.override = i, this.items = Object.create(null);\n    }\n\n    _createClass(Tn, [{\n      key: \"isForType\",\n      value: function isForType(t) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);\n      }\n    }, {\n      key: \"register\",\n      value: function register(t) {\n        var e = this,\n            i = Object.getPrototypeOf(t);\n        var n;\n        (function (t) {\n          return \"id\" in t && \"defaults\" in t;\n        })(i) && (n = e.register(i));\n        var o = e.items,\n            s = t.id,\n            a = e.scope + \".\" + s;\n        if (!s) throw new Error(\"class does not have id: \" + t);\n        return s in o || (o[s] = t, function (t, e, i) {\n          var n = ot(Object.create(null), [i ? xt.get(i) : {}, xt.get(e), t.defaults]);\n          xt.set(e, n), t.defaultRoutes && function (t, e) {\n            Object.keys(e).forEach(function (i) {\n              var n = i.split(\".\"),\n                  o = n.pop(),\n                  s = [t].concat(n).join(\".\"),\n                  a = e[i].split(\".\"),\n                  r = a.pop(),\n                  l = a.join(\".\");\n              xt.route(s, o, l, r);\n            });\n          }(e, t.defaultRoutes);\n          t.descriptors && xt.describe(e, t.descriptors);\n        }(t, a, n), e.override && xt.override(t.id, t.overrides)), a;\n      }\n    }, {\n      key: \"get\",\n      value: function get(t) {\n        return this.items[t];\n      }\n    }, {\n      key: \"unregister\",\n      value: function unregister(t) {\n        var e = this.items,\n            i = t.id,\n            n = this.scope;\n        i in e && delete e[i], n && i in xt[n] && (delete xt[n][i], this.override && delete ft[i]);\n      }\n    }]);\n\n    return Tn;\n  }();\n\n  var An = new ( /*#__PURE__*/function () {\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      this.controllers = new Tn(Ri, \"datasets\", !0), this.elements = new Tn(Ei, \"elements\"), this.plugins = new Tn(Object, \"plugins\"), this.scales = new Tn(Xi, \"scales\"), this._typedRegistries = [this.controllers, this.scales, this.elements];\n    }\n\n    _createClass(_class3, [{\n      key: \"add\",\n      value: function add() {\n        for (var _len3 = arguments.length, t = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          t[_key3] = arguments[_key3];\n        }\n\n        this._each(\"register\", t);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          t[_key4] = arguments[_key4];\n        }\n\n        this._each(\"unregister\", t);\n      }\n    }, {\n      key: \"addControllers\",\n      value: function addControllers() {\n        for (var _len5 = arguments.length, t = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          t[_key5] = arguments[_key5];\n        }\n\n        this._each(\"register\", t, this.controllers);\n      }\n    }, {\n      key: \"addElements\",\n      value: function addElements() {\n        for (var _len6 = arguments.length, t = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          t[_key6] = arguments[_key6];\n        }\n\n        this._each(\"register\", t, this.elements);\n      }\n    }, {\n      key: \"addPlugins\",\n      value: function addPlugins() {\n        for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          t[_key7] = arguments[_key7];\n        }\n\n        this._each(\"register\", t, this.plugins);\n      }\n    }, {\n      key: \"addScales\",\n      value: function addScales() {\n        for (var _len8 = arguments.length, t = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n          t[_key8] = arguments[_key8];\n        }\n\n        this._each(\"register\", t, this.scales);\n      }\n    }, {\n      key: \"getController\",\n      value: function getController(t) {\n        return this._get(t, this.controllers, \"controller\");\n      }\n    }, {\n      key: \"getElement\",\n      value: function getElement(t) {\n        return this._get(t, this.elements, \"element\");\n      }\n    }, {\n      key: \"getPlugin\",\n      value: function getPlugin(t) {\n        return this._get(t, this.plugins, \"plugin\");\n      }\n    }, {\n      key: \"getScale\",\n      value: function getScale(t) {\n        return this._get(t, this.scales, \"scale\");\n      }\n    }, {\n      key: \"removeControllers\",\n      value: function removeControllers() {\n        for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n          t[_key9] = arguments[_key9];\n        }\n\n        this._each(\"unregister\", t, this.controllers);\n      }\n    }, {\n      key: \"removeElements\",\n      value: function removeElements() {\n        for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n          t[_key10] = arguments[_key10];\n        }\n\n        this._each(\"unregister\", t, this.elements);\n      }\n    }, {\n      key: \"removePlugins\",\n      value: function removePlugins() {\n        for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          t[_key11] = arguments[_key11];\n        }\n\n        this._each(\"unregister\", t, this.plugins);\n      }\n    }, {\n      key: \"removeScales\",\n      value: function removeScales() {\n        for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n          t[_key12] = arguments[_key12];\n        }\n\n        this._each(\"unregister\", t, this.scales);\n      }\n    }, {\n      key: \"_each\",\n      value: function _each(t, e, i) {\n        var n = this;\n\n        _toConsumableArray(e).forEach(function (e) {\n          var o = i || n._getRegistryForType(e);\n\n          i || o.isForType(e) || o === n.plugins && e.id ? n._exec(t, o, e) : J(e, function (e) {\n            var o = i || n._getRegistryForType(e);\n\n            n._exec(t, o, e);\n          });\n        });\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec(t, e, i) {\n        var n = ct(t);\n        Q(i[\"before\" + n], [], i), e[t](i), Q(i[\"after\" + n], [], i);\n      }\n    }, {\n      key: \"_getRegistryForType\",\n      value: function _getRegistryForType(t) {\n        for (var _e24 = 0; _e24 < this._typedRegistries.length; _e24++) {\n          var _i30 = this._typedRegistries[_e24];\n          if (_i30.isForType(t)) return _i30;\n        }\n\n        return this.plugins;\n      }\n    }, {\n      key: \"_get\",\n      value: function _get(t, e, i) {\n        var n = e.get(t);\n        if (void 0 === n) throw new Error('\"' + t + '\" is not a registered ' + i + \".\");\n        return n;\n      }\n    }]);\n\n    return _class3;\n  }())();\n\n  var Ln = /*#__PURE__*/function () {\n    function Ln() {\n      _classCallCheck(this, Ln);\n\n      this._init = [];\n    }\n\n    _createClass(Ln, [{\n      key: \"notify\",\n      value: function notify(t, e, i, n) {\n        var o = this;\n        \"beforeInit\" === e && (o._init = o._createDescriptors(t, !0), o._notify(o._init, t, \"install\"));\n\n        var s = n ? o._descriptors(t).filter(n) : o._descriptors(t),\n            a = o._notify(s, t, e, i);\n\n        return \"destroy\" === e && (o._notify(s, t, \"stop\"), o._notify(o._init, t, \"uninstall\")), a;\n      }\n    }, {\n      key: \"_notify\",\n      value: function _notify(t, e, i, n) {\n        n = n || {};\n\n        var _iterator14 = _createForOfIteratorHelper(t),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var _o18 = _step14.value;\n            var _t34 = _o18.plugin;\n            if (!1 === Q(_t34[i], [e, n, _o18.options], _t34) && n.cancelable) return !1;\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n\n        return !0;\n      }\n    }, {\n      key: \"invalidate\",\n      value: function invalidate() {\n        $(this._cache) || (this._oldCache = this._cache, this._cache = void 0);\n      }\n    }, {\n      key: \"_descriptors\",\n      value: function _descriptors(t) {\n        if (this._cache) return this._cache;\n\n        var e = this._cache = this._createDescriptors(t);\n\n        return this._notifyStateChanges(t), e;\n      }\n    }, {\n      key: \"_createDescriptors\",\n      value: function _createDescriptors(t, e) {\n        var i = t && t.config,\n            n = K(i.options && i.options.plugins, {}),\n            o = function (t) {\n          var e = [],\n              i = Object.keys(An.plugins.items);\n\n          for (var _t35 = 0; _t35 < i.length; _t35++) {\n            e.push(An.getPlugin(i[_t35]));\n          }\n\n          var n = t.plugins || [];\n\n          for (var _t36 = 0; _t36 < n.length; _t36++) {\n            var _i31 = n[_t36];\n            -1 === e.indexOf(_i31) && e.push(_i31);\n          }\n\n          return e;\n        }(i);\n\n        return !1 !== n || e ? function (t, e, i, n) {\n          var o = [],\n              s = t.getContext();\n\n          for (var _a14 = 0; _a14 < e.length; _a14++) {\n            var _r7 = e[_a14],\n                _l11 = Rn(i[_r7.id], n);\n\n            null !== _l11 && o.push({\n              plugin: _r7,\n              options: En(t.config, _r7, _l11, s)\n            });\n          }\n\n          return o;\n        }(t, o, n, e) : [];\n      }\n    }, {\n      key: \"_notifyStateChanges\",\n      value: function _notifyStateChanges(t) {\n        var e = this._oldCache || [],\n            i = this._cache,\n            n = function n(t, e) {\n          return t.filter(function (t) {\n            return !e.some(function (e) {\n              return t.plugin.id === e.plugin.id;\n            });\n          });\n        };\n\n        this._notify(n(e, i), t, \"stop\"), this._notify(n(i, e), t, \"start\");\n      }\n    }]);\n\n    return Ln;\n  }();\n\n  function Rn(t, e) {\n    return e || !1 !== t ? !0 === t ? {} : t : null;\n  }\n\n  function En(t, e, i, n) {\n    var o = t.pluginScopeKeys(e),\n        s = t.getOptionScopes(i, o);\n    return t.createResolver(s, n, [\"\"], {\n      scriptable: !1,\n      indexable: !1,\n      allKeys: !0\n    });\n  }\n\n  function In(t, e) {\n    var i = xt.datasets[t] || {};\n    return ((e.datasets || {})[t] || {}).indexAxis || e.indexAxis || i.indexAxis || \"x\";\n  }\n\n  function zn(t, e) {\n    return \"x\" === t || \"y\" === t ? t : e.axis || (\"top\" === (i = e.position) || \"bottom\" === i ? \"x\" : \"left\" === i || \"right\" === i ? \"y\" : void 0) || t.charAt(0).toLowerCase();\n    var i;\n  }\n\n  function Fn(t) {\n    var e = t.options || (t.options = {});\n    e.plugins = K(e.plugins, {}), e.scales = function (t, e) {\n      var i = ft[t.type] || {\n        scales: {}\n      },\n          n = e.scales || {},\n          o = In(t.type, e),\n          s = Object.create(null),\n          a = Object.create(null);\n      return Object.keys(n).forEach(function (t) {\n        var e = n[t],\n            r = zn(t, e),\n            l = function (t, e) {\n          return t === e ? \"_index_\" : \"_value_\";\n        }(r, o),\n            c = i.scales || {};\n\n        s[r] = s[r] || t, a[t] = st(Object.create(null), [{\n          axis: r\n        }, e, c[r], c[l]]);\n      }), t.data.datasets.forEach(function (i) {\n        var o = i.type || t.type,\n            r = i.indexAxis || In(o, e),\n            l = (ft[o] || {}).scales || {};\n        Object.keys(l).forEach(function (t) {\n          var e = function (t, e) {\n            var i = t;\n            return \"_index_\" === t ? i = e : \"_value_\" === t && (i = \"x\" === e ? \"y\" : \"x\"), i;\n          }(t, r),\n              o = i[e + \"AxisID\"] || s[e] || e;\n\n          a[o] = a[o] || Object.create(null), st(a[o], [{\n            axis: e\n          }, n[o], l[t]]);\n        });\n      }), Object.keys(a).forEach(function (t) {\n        var e = a[t];\n        st(e, [xt.scales[e.type], xt.scale]);\n      }), a;\n    }(t, e);\n  }\n\n  function Vn(t) {\n    return (t = t || {}).datasets = t.datasets || [], t.labels = t.labels || [], t;\n  }\n\n  var Bn = new Map(),\n      Wn = new Set();\n\n  function Hn(t, e) {\n    var i = Bn.get(t);\n    return i || (i = e(), Bn.set(t, i), Wn.add(i)), i;\n  }\n\n  var Nn = function Nn(t, e, i) {\n    var n = lt(e, i);\n    void 0 !== n && t.add(n);\n  };\n\n  var jn = /*#__PURE__*/function () {\n    function jn(t) {\n      _classCallCheck(this, jn);\n\n      this._config = function (t) {\n        return (t = t || {}).data = Vn(t.data), Fn(t), t;\n      }(t), this._scopeCache = new Map(), this._resolverCache = new Map();\n    }\n\n    _createClass(jn, [{\n      key: \"type\",\n      get: function get() {\n        return this._config.type;\n      },\n      set: function set(t) {\n        this._config.type = t;\n      }\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this._config.data;\n      },\n      set: function set(t) {\n        this._config.data = Vn(t);\n      }\n    }, {\n      key: \"options\",\n      get: function get() {\n        return this._config.options;\n      },\n      set: function set(t) {\n        this._config.options = t;\n      }\n    }, {\n      key: \"plugins\",\n      get: function get() {\n        return this._config.plugins;\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var t = this._config;\n        this.clearCache(), Fn(t);\n      }\n    }, {\n      key: \"clearCache\",\n      value: function clearCache() {\n        this._scopeCache.clear(), this._resolverCache.clear();\n      }\n    }, {\n      key: \"datasetScopeKeys\",\n      value: function datasetScopeKeys(t) {\n        return Hn(t, function () {\n          return [[\"datasets.\".concat(t), \"\"]];\n        });\n      }\n    }, {\n      key: \"datasetAnimationScopeKeys\",\n      value: function datasetAnimationScopeKeys(t, e) {\n        return Hn(\"\".concat(t, \".transition.\").concat(e), function () {\n          return [[\"datasets.\".concat(t, \".transitions.\").concat(e), \"transitions.\".concat(e)], [\"datasets.\".concat(t), \"\"]];\n        });\n      }\n    }, {\n      key: \"datasetElementScopeKeys\",\n      value: function datasetElementScopeKeys(t, e) {\n        return Hn(\"\".concat(t, \"-\").concat(e), function () {\n          return [[\"datasets.\".concat(t, \".elements.\").concat(e), \"datasets.\".concat(t), \"elements.\".concat(e), \"\"]];\n        });\n      }\n    }, {\n      key: \"pluginScopeKeys\",\n      value: function pluginScopeKeys(t) {\n        var e = t.id;\n        return Hn(\"\".concat(this.type, \"-plugin-\").concat(e), function () {\n          return [[\"plugins.\".concat(e)].concat(_toConsumableArray(t.additionalOptionScopes || []))];\n        });\n      }\n    }, {\n      key: \"_cachedScopes\",\n      value: function _cachedScopes(t, e) {\n        var i = this._scopeCache;\n        var n = i.get(t);\n        return n && !e || (n = new Map(), i.set(t, n)), n;\n      }\n    }, {\n      key: \"getOptionScopes\",\n      value: function getOptionScopes(t, e, i) {\n        var n = this.options,\n            o = this.type,\n            s = this._cachedScopes(t, i),\n            a = s.get(e);\n\n        if (a) return a;\n        var r = new Set();\n        e.forEach(function (e) {\n          t && (r.add(t), e.forEach(function (e) {\n            return Nn(r, t, e);\n          })), e.forEach(function (t) {\n            return Nn(r, n, t);\n          }), e.forEach(function (t) {\n            return Nn(r, ft[o] || {}, t);\n          }), e.forEach(function (t) {\n            return Nn(r, xt, t);\n          }), e.forEach(function (t) {\n            return Nn(r, gt, t);\n          });\n        });\n\n        var l = _toConsumableArray(r);\n\n        return Wn.has(e) && s.set(e, l), l;\n      }\n    }, {\n      key: \"chartOptionScopes\",\n      value: function chartOptionScopes() {\n        var t = this.options,\n            e = this.type;\n        return [t, ft[e] || {}, xt.datasets[e] || {}, {\n          type: e\n        }, xt, gt];\n      }\n    }, {\n      key: \"resolveNamedOptions\",\n      value: function resolveNamedOptions(t, e, i) {\n        var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [\"\"];\n\n        var o = {\n          $shared: !0\n        },\n            _$n = $n(this._resolverCache, t, n),\n            s = _$n.resolver,\n            a = _$n.subPrefixes;\n\n        var r = s;\n\n        if (function (t, e) {\n          var _Gi = Gi(t),\n              i = _Gi.isScriptable,\n              n = _Gi.isIndexable;\n\n          var _iterator15 = _createForOfIteratorHelper(e),\n              _step15;\n\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var _o19 = _step15.value;\n              if (i(_o19) && dt(t[_o19]) || n(_o19) && Y(t[_o19])) return !0;\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n\n          return !1;\n        }(s, e)) {\n          o.$shared = !1;\n          r = Ki(s, i = dt(i) ? i() : i, this.createResolver(t, i, a));\n        }\n\n        var _iterator16 = _createForOfIteratorHelper(e),\n            _step16;\n\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _t37 = _step16.value;\n            o[_t37] = r[_t37];\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n\n        return o;\n      }\n    }, {\n      key: \"createResolver\",\n      value: function createResolver(t, e) {\n        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [\"\"];\n        var n = arguments.length > 3 ? arguments[3] : undefined;\n\n        var _$n2 = $n(this._resolverCache, t, i),\n            o = _$n2.resolver;\n\n        return U(e) ? Ki(o, e, void 0, n) : o;\n      }\n    }]);\n\n    return jn;\n  }();\n\n  function $n(t, e, i) {\n    var n = t.get(e);\n    n || (n = new Map(), t.set(e, n));\n    var o = i.join();\n    var s = n.get(o);\n\n    if (!s) {\n      s = {\n        resolver: qi(e, i),\n        subPrefixes: i.filter(function (t) {\n          return !t.toLowerCase().includes(\"hover\");\n        })\n      }, n.set(o, s);\n    }\n\n    return s;\n  }\n\n  var Yn = [\"top\", \"bottom\", \"left\", \"right\", \"chartArea\"];\n\n  function Un(t, e) {\n    return \"top\" === t || \"bottom\" === t || -1 === Yn.indexOf(t) && \"x\" === e;\n  }\n\n  function Xn(t, e) {\n    return function (i, n) {\n      return i[t] === n[t] ? i[e] - n[e] : i[t] - n[t];\n    };\n  }\n\n  function qn(t) {\n    var e = t.chart,\n        i = e.options.animation;\n    e.notifyPlugins(\"afterRender\"), Q(i && i.onComplete, [t], e);\n  }\n\n  function Kn(t) {\n    var e = t.chart,\n        i = e.options.animation;\n    Q(i && i.onProgress, [t], e);\n  }\n\n  function Gn() {\n    return \"undefined\" != typeof window && \"undefined\" != typeof document;\n  }\n\n  function Zn(t) {\n    return Gn() && \"string\" == typeof t ? t = document.getElementById(t) : t && t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t;\n  }\n\n  var Qn = {},\n      Jn = function Jn(t) {\n    var e = Zn(t);\n    return Object.values(Qn).filter(function (t) {\n      return t.canvas === e;\n    }).pop();\n  };\n\n  var to = /*#__PURE__*/function () {\n    function to(t, e) {\n      var _this2 = this;\n\n      _classCallCheck(this, to);\n\n      var n = this;\n      this.config = e = new jn(e);\n      var o = Zn(t),\n          s = Jn(o);\n      if (s) throw new Error(\"Canvas is already in use. Chart with ID '\" + s.id + \"' must be destroyed before the canvas can be reused.\");\n      var r = e.createResolver(e.chartOptionScopes(), n.getContext());\n      this.platform = n._initializePlatform(o, e);\n      var l = n.platform.acquireContext(o, r.aspectRatio),\n          c = l && l.canvas,\n          h = c && c.height,\n          d = c && c.width;\n      this.id = j(), this.ctx = l, this.canvas = c, this.width = d, this.height = h, this._options = r, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._responsiveListeners = void 0, this._sortedMetasets = [], this.scales = {}, this.scale = void 0, this._plugins = new Ln(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = i(function () {\n        return _this2.update(\"resize\");\n      }, r.resizeDelay || 0), Qn[n.id] = n, l && c ? (a.listen(n, \"complete\", qn), a.listen(n, \"progress\", Kn), n._initialize(), n.attached && n.update()) : console.error(\"Failed to create chart: can't acquire context from the given item\");\n    }\n\n    _createClass(to, [{\n      key: \"aspectRatio\",\n      get: function get() {\n        var _this$options4 = this.options,\n            t = _this$options4.aspectRatio,\n            e = _this$options4.maintainAspectRatio,\n            i = this.width,\n            n = this.height,\n            o = this._aspectRatio;\n        return $(t) ? e && o ? o : n ? i / n : null : t;\n      }\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this.config.data;\n      },\n      set: function set(t) {\n        this.config.data = t;\n      }\n    }, {\n      key: \"options\",\n      get: function get() {\n        return this._options;\n      },\n      set: function set(t) {\n        this.config.options = t;\n      }\n    }, {\n      key: \"_initialize\",\n      value: function _initialize() {\n        var t = this;\n        return t.notifyPlugins(\"beforeInit\"), t.options.responsive ? t.resize() : ye(t, t.options.devicePixelRatio), t.bindEvents(), t.notifyPlugins(\"afterInit\"), t;\n      }\n    }, {\n      key: \"_initializePlatform\",\n      value: function _initializePlatform(t, e) {\n        return e.platform ? new e.platform() : !Gn() || \"undefined\" != typeof OffscreenCanvas && t instanceof OffscreenCanvas ? new Qe() : new di();\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        return qt(this.canvas, this.ctx), this;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        return a.stop(this), this;\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(t, e) {\n        a.running(this) ? this._resizeBeforeDraw = {\n          width: t,\n          height: e\n        } : this._resize(t, e);\n      }\n    }, {\n      key: \"_resize\",\n      value: function _resize(t, e) {\n        var i = this,\n            n = i.options,\n            o = i.canvas,\n            s = n.maintainAspectRatio && i.aspectRatio,\n            a = i.platform.getMaximumSize(o, t, e, s),\n            r = n.devicePixelRatio || i.platform.getDevicePixelRatio();\n        i.width = a.width, i.height = a.height, i._aspectRatio = i.aspectRatio, ye(i, r, !0) && (i.notifyPlugins(\"resize\", {\n          size: a\n        }), Q(n.onResize, [i, a], i), i.attached && i._doResize() && i.render());\n      }\n    }, {\n      key: \"ensureScalesHaveIDs\",\n      value: function ensureScalesHaveIDs() {\n        J(this.options.scales || {}, function (t, e) {\n          t.id = e;\n        });\n      }\n    }, {\n      key: \"buildOrUpdateScales\",\n      value: function buildOrUpdateScales() {\n        var t = this,\n            e = t.options,\n            i = e.scales,\n            n = t.scales,\n            o = Object.keys(n).reduce(function (t, e) {\n          return t[e] = !1, t;\n        }, {});\n        var s = [];\n        i && (s = s.concat(Object.keys(i).map(function (t) {\n          var e = i[t],\n              n = zn(t, e),\n              o = \"r\" === n,\n              s = \"x\" === n;\n          return {\n            options: e,\n            dposition: o ? \"chartArea\" : s ? \"bottom\" : \"left\",\n            dtype: o ? \"radialLinear\" : s ? \"category\" : \"linear\"\n          };\n        }))), J(s, function (i) {\n          var s = i.options,\n              a = s.id,\n              r = zn(a, s),\n              l = K(s.type, i.dtype);\n          void 0 !== s.position && Un(s.position, r) === Un(i.dposition) || (s.position = i.dposition), o[a] = !0;\n          var c = null;\n          if (a in n && n[a].type === l) c = n[a];else {\n            c = new (An.getScale(l))({\n              id: a,\n              type: l,\n              ctx: t.ctx,\n              chart: t\n            }), n[c.id] = c;\n          }\n          c.init(s, e);\n        }), J(o, function (t, e) {\n          t || delete n[e];\n        }), J(n, function (e) {\n          Ge.configure(t, e, e.options), Ge.addBox(t, e);\n        });\n      }\n    }, {\n      key: \"_updateMetasets\",\n      value: function _updateMetasets() {\n        var t = this,\n            e = t._metasets,\n            i = t.data.datasets.length,\n            n = e.length;\n\n        if (e.sort(function (t, e) {\n          return t.index - e.index;\n        }), n > i) {\n          for (var _e25 = i; _e25 < n; ++_e25) {\n            t._destroyDatasetMeta(_e25);\n          }\n\n          e.splice(i, n - i);\n        }\n\n        t._sortedMetasets = e.slice(0).sort(Xn(\"order\", \"index\"));\n      }\n    }, {\n      key: \"_removeUnreferencedMetasets\",\n      value: function _removeUnreferencedMetasets() {\n        var t = this,\n            e = t._metasets,\n            i = t.data.datasets;\n        e.length > i.length && delete t._stacks, e.forEach(function (e, n) {\n          0 === i.filter(function (t) {\n            return t === e._dataset;\n          }).length && t._destroyDatasetMeta(n);\n        });\n      }\n    }, {\n      key: \"buildOrUpdateControllers\",\n      value: function buildOrUpdateControllers() {\n        var t = this,\n            e = [],\n            i = t.data.datasets;\n        var n, o;\n\n        for (t._removeUnreferencedMetasets(), n = 0, o = i.length; n < o; n++) {\n          var _o20 = i[n];\n\n          var _s16 = t.getDatasetMeta(n);\n\n          var _a15 = _o20.type || t.config.type;\n\n          if (_s16.type && _s16.type !== _a15 && (t._destroyDatasetMeta(n), _s16 = t.getDatasetMeta(n)), _s16.type = _a15, _s16.indexAxis = _o20.indexAxis || In(_a15, t.options), _s16.order = _o20.order || 0, _s16.index = n, _s16.label = \"\" + _o20.label, _s16.visible = t.isDatasetVisible(n), _s16.controller) _s16.controller.updateIndex(n), _s16.controller.linkScales();else {\n            var _i32 = An.getController(_a15),\n                _xt$datasets$_a = xt.datasets[_a15],\n                _o21 = _xt$datasets$_a.datasetElementType,\n                _r8 = _xt$datasets$_a.dataElementType;\n\n            Object.assign(_i32.prototype, {\n              dataElementType: An.getElement(_r8),\n              datasetElementType: _o21 && An.getElement(_o21)\n            }), _s16.controller = new _i32(t, n), e.push(_s16.controller);\n          }\n        }\n\n        return t._updateMetasets(), e;\n      }\n    }, {\n      key: \"_resetElements\",\n      value: function _resetElements() {\n        var t = this;\n        J(t.data.datasets, function (e, i) {\n          t.getDatasetMeta(i).controller.reset();\n        }, t);\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._resetElements(), this.notifyPlugins(\"reset\");\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e.config;\n        i.update(), e._options = i.createResolver(i.chartOptionScopes(), e.getContext()), J(e.scales, function (t) {\n          Ge.removeBox(e, t);\n        });\n        var n = e._animationsDisabled = !e.options.animation;\n        e.ensureScalesHaveIDs(), e.buildOrUpdateScales();\n        var o = new Set(Object.keys(e._listeners)),\n            s = new Set(e.options.events);\n        if (ut(o, s) && !!this._responsiveListeners === e.options.responsive || (e.unbindEvents(), e.bindEvents()), e._plugins.invalidate(), !1 === e.notifyPlugins(\"beforeUpdate\", {\n          mode: t,\n          cancelable: !0\n        })) return;\n        var a = e.buildOrUpdateControllers();\n        e.notifyPlugins(\"beforeElementsUpdate\");\n        var r = 0;\n\n        for (var _t38 = 0, _i33 = e.data.datasets.length; _t38 < _i33; _t38++) {\n          var _e$getDatasetMeta = e.getDatasetMeta(_t38),\n              _i34 = _e$getDatasetMeta.controller,\n              _o22 = !n && -1 === a.indexOf(_i34);\n\n          _i34.buildOrUpdateElements(_o22), r = Math.max(+_i34.getMaxOverflow(), r);\n        }\n\n        e._minPadding = r, e._updateLayout(r), n || J(a, function (t) {\n          t.reset();\n        }), e._updateDatasets(t), e.notifyPlugins(\"afterUpdate\", {\n          mode: t\n        }), e._layers.sort(Xn(\"z\", \"_idx\")), e._lastEvent && e._eventHandler(e._lastEvent, !0), e.render();\n      }\n    }, {\n      key: \"_updateLayout\",\n      value: function _updateLayout(t) {\n        var e = this;\n        if (!1 === e.notifyPlugins(\"beforeLayout\", {\n          cancelable: !0\n        })) return;\n        Ge.update(e, e.width, e.height, t);\n        var i = e.chartArea,\n            n = i.width <= 0 || i.height <= 0;\n        e._layers = [], J(e.boxes, function (t) {\n          var _e$_layers;\n\n          n && \"chartArea\" === t.position || (t.configure && t.configure(), (_e$_layers = e._layers).push.apply(_e$_layers, _toConsumableArray(t._layers())));\n        }, e), e._layers.forEach(function (t, e) {\n          t._idx = e;\n        }), e.notifyPlugins(\"afterLayout\");\n      }\n    }, {\n      key: \"_updateDatasets\",\n      value: function _updateDatasets(t) {\n        var e = this,\n            i = \"function\" == typeof t;\n\n        if (!1 !== e.notifyPlugins(\"beforeDatasetsUpdate\", {\n          mode: t,\n          cancelable: !0\n        })) {\n          for (var _n26 = 0, _o23 = e.data.datasets.length; _n26 < _o23; ++_n26) {\n            e._updateDataset(_n26, i ? t({\n              datasetIndex: _n26\n            }) : t);\n          }\n\n          e.notifyPlugins(\"afterDatasetsUpdate\", {\n            mode: t\n          });\n        }\n      }\n    }, {\n      key: \"_updateDataset\",\n      value: function _updateDataset(t, e) {\n        var i = this,\n            n = i.getDatasetMeta(t),\n            o = {\n          meta: n,\n          index: t,\n          mode: e,\n          cancelable: !0\n        };\n        !1 !== i.notifyPlugins(\"beforeDatasetUpdate\", o) && (n.controller._update(e), o.cancelable = !1, i.notifyPlugins(\"afterDatasetUpdate\", o));\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var t = this;\n        !1 !== t.notifyPlugins(\"beforeRender\", {\n          cancelable: !0\n        }) && (a.has(t) ? t.attached && !a.running(t) && a.start(t) : (t.draw(), qn({\n          chart: t\n        })));\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this;\n        var e;\n\n        if (t._resizeBeforeDraw) {\n          var _t$_resizeBeforeDraw = t._resizeBeforeDraw,\n              _e26 = _t$_resizeBeforeDraw.width,\n              _i35 = _t$_resizeBeforeDraw.height;\n          t._resize(_e26, _i35), t._resizeBeforeDraw = null;\n        }\n\n        if (t.clear(), t.width <= 0 || t.height <= 0) return;\n        if (!1 === t.notifyPlugins(\"beforeDraw\", {\n          cancelable: !0\n        })) return;\n        var i = t._layers;\n\n        for (e = 0; e < i.length && i[e].z <= 0; ++e) {\n          i[e].draw(t.chartArea);\n        }\n\n        for (t._drawDatasets(); e < i.length; ++e) {\n          i[e].draw(t.chartArea);\n        }\n\n        t.notifyPlugins(\"afterDraw\");\n      }\n    }, {\n      key: \"_getSortedDatasetMetas\",\n      value: function _getSortedDatasetMetas(t) {\n        var e = this._sortedMetasets,\n            i = [];\n        var n, o;\n\n        for (n = 0, o = e.length; n < o; ++n) {\n          var _o24 = e[n];\n          t && !_o24.visible || i.push(_o24);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getSortedVisibleDatasetMetas\",\n      value: function getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(!0);\n      }\n    }, {\n      key: \"_drawDatasets\",\n      value: function _drawDatasets() {\n        var t = this;\n        if (!1 === t.notifyPlugins(\"beforeDatasetsDraw\", {\n          cancelable: !0\n        })) return;\n        var e = t.getSortedVisibleDatasetMetas();\n\n        for (var _i36 = e.length - 1; _i36 >= 0; --_i36) {\n          t._drawDataset(e[_i36]);\n        }\n\n        t.notifyPlugins(\"afterDatasetsDraw\");\n      }\n    }, {\n      key: \"_drawDataset\",\n      value: function _drawDataset(t) {\n        var e = this,\n            i = e.ctx,\n            n = t._clip,\n            o = e.chartArea,\n            s = {\n          meta: t,\n          index: t.index,\n          cancelable: !0\n        };\n        !1 !== e.notifyPlugins(\"beforeDatasetDraw\", s) && (Zt(i, {\n          left: !1 === n.left ? 0 : o.left - n.left,\n          right: !1 === n.right ? e.width : o.right + n.right,\n          top: !1 === n.top ? 0 : o.top - n.top,\n          bottom: !1 === n.bottom ? e.height : o.bottom + n.bottom\n        }), t.controller.draw(), Qt(i), s.cancelable = !1, e.notifyPlugins(\"afterDatasetDraw\", s));\n      }\n    }, {\n      key: \"getElementsAtEventForMode\",\n      value: function getElementsAtEventForMode(t, e, i, n) {\n        var o = Oe.modes[e];\n        return \"function\" == typeof o ? o(this, t, i, n) : [];\n      }\n    }, {\n      key: \"getDatasetMeta\",\n      value: function getDatasetMeta(t) {\n        var e = this.data.datasets[t],\n            i = this._metasets;\n        var n = i.filter(function (t) {\n          return t && t._dataset === e;\n        }).pop();\n        return n || (n = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: e && e.order || 0,\n          index: t,\n          _dataset: e,\n          _parsed: [],\n          _sorted: !1\n        }, i.push(n)), n;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.$context || (this.$context = {\n          chart: this,\n          type: \"chart\"\n        });\n      }\n    }, {\n      key: \"getVisibleDatasetCount\",\n      value: function getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n      }\n    }, {\n      key: \"isDatasetVisible\",\n      value: function isDatasetVisible(t) {\n        var e = this.data.datasets[t];\n        if (!e) return !1;\n        var i = this.getDatasetMeta(t);\n        return \"boolean\" == typeof i.hidden ? !i.hidden : !e.hidden;\n      }\n    }, {\n      key: \"setDatasetVisibility\",\n      value: function setDatasetVisibility(t, e) {\n        this.getDatasetMeta(t).hidden = !e;\n      }\n    }, {\n      key: \"toggleDataVisibility\",\n      value: function toggleDataVisibility(t) {\n        this._hiddenIndices[t] = !this._hiddenIndices[t];\n      }\n    }, {\n      key: \"getDataVisibility\",\n      value: function getDataVisibility(t) {\n        return !this._hiddenIndices[t];\n      }\n    }, {\n      key: \"_updateDatasetVisibility\",\n      value: function _updateDatasetVisibility(t, e) {\n        var i = this,\n            n = e ? \"show\" : \"hide\",\n            o = i.getDatasetMeta(t),\n            s = o.controller._resolveAnimations(void 0, n);\n\n        i.setDatasetVisibility(t, e), s.update(o, {\n          visible: e\n        }), i.update(function (e) {\n          return e.datasetIndex === t ? n : void 0;\n        });\n      }\n    }, {\n      key: \"hide\",\n      value: function hide(t) {\n        this._updateDatasetVisibility(t, !1);\n      }\n    }, {\n      key: \"show\",\n      value: function show(t) {\n        this._updateDatasetVisibility(t, !0);\n      }\n    }, {\n      key: \"_destroyDatasetMeta\",\n      value: function _destroyDatasetMeta(t) {\n        var e = this,\n            i = e._metasets && e._metasets[t];\n        i && i.controller && (i.controller._destroy(), delete e._metasets[t]);\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        var t = this,\n            e = t.canvas,\n            i = t.ctx;\n        var n, o;\n\n        for (t.stop(), a.remove(t), n = 0, o = t.data.datasets.length; n < o; ++n) {\n          t._destroyDatasetMeta(n);\n        }\n\n        t.config.clearCache(), e && (t.unbindEvents(), qt(e, i), t.platform.releaseContext(i), t.canvas = null, t.ctx = null), t.notifyPlugins(\"destroy\"), delete Qn[t.id];\n      }\n    }, {\n      key: \"toBase64Image\",\n      value: function toBase64Image() {\n        var _this$canvas;\n\n        return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n      }\n    }, {\n      key: \"bindEvents\",\n      value: function bindEvents() {\n        this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;\n      }\n    }, {\n      key: \"bindUserEvents\",\n      value: function bindUserEvents() {\n        var t = this,\n            e = t._listeners,\n            i = t.platform,\n            n = function n(e, i, _n27) {\n          e.offsetX = i, e.offsetY = _n27, t._eventHandler(e);\n        };\n\n        J(t.options.events, function (o) {\n          return function (n, o) {\n            i.addEventListener(t, n, o), e[n] = o;\n          }(o, n);\n        });\n      }\n    }, {\n      key: \"bindResponsiveEvents\",\n      value: function bindResponsiveEvents() {\n        var t = this;\n        t._responsiveListeners || (t._responsiveListeners = {});\n\n        var e = t._responsiveListeners,\n            i = t.platform,\n            n = function n(_n28, o) {\n          i.addEventListener(t, _n28, o), e[_n28] = o;\n        },\n            o = function o(n, _o25) {\n          e[n] && (i.removeEventListener(t, n, _o25), delete e[n]);\n        },\n            s = function s(e, i) {\n          t.canvas && t.resize(e, i);\n        };\n\n        var a;\n\n        var r = function r() {\n          o(\"attach\", r), t.attached = !0, t.resize(), n(\"resize\", s), n(\"detach\", a);\n        };\n\n        a = function a() {\n          t.attached = !1, o(\"resize\", s), n(\"attach\", r);\n        }, i.isAttached(t.canvas) ? r() : a();\n      }\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {\n        var t = this;\n        J(t._listeners, function (e, i) {\n          t.platform.removeEventListener(t, i, e);\n        }), t._listeners = {}, J(t._responsiveListeners, function (e, i) {\n          t.platform.removeEventListener(t, i, e);\n        }), t._responsiveListeners = void 0;\n      }\n    }, {\n      key: \"updateHoverStyle\",\n      value: function updateHoverStyle(t, e, i) {\n        var n = i ? \"set\" : \"remove\";\n        var o, s, a, r;\n\n        for (\"dataset\" === e && (o = this.getDatasetMeta(t[0].datasetIndex), o.controller[\"_\" + n + \"DatasetHoverStyle\"]()), a = 0, r = t.length; a < r; ++a) {\n          s = t[a];\n\n          var _e27 = s && this.getDatasetMeta(s.datasetIndex).controller;\n\n          _e27 && _e27[n + \"HoverStyle\"](s.element, s.datasetIndex, s.index);\n        }\n      }\n    }, {\n      key: \"getActiveElements\",\n      value: function getActiveElements() {\n        return this._active || [];\n      }\n    }, {\n      key: \"setActiveElements\",\n      value: function setActiveElements(t) {\n        var e = this,\n            i = e._active || [],\n            n = t.map(function (_ref7) {\n          var t = _ref7.datasetIndex,\n              i = _ref7.index;\n          var n = e.getDatasetMeta(t);\n          if (!n) throw new Error(\"No dataset found at index \" + t);\n          return {\n            datasetIndex: t,\n            element: n.data[i],\n            index: i\n          };\n        });\n        !tt(n, i) && (e._active = n, e._updateHoverStyles(n, i));\n      }\n    }, {\n      key: \"notifyPlugins\",\n      value: function notifyPlugins(t, e, i) {\n        return this._plugins.notify(this, t, e, i);\n      }\n    }, {\n      key: \"_updateHoverStyles\",\n      value: function _updateHoverStyles(t, e, i) {\n        var n = this,\n            o = n.options.hover,\n            s = function s(t, e) {\n          return t.filter(function (t) {\n            return !e.some(function (e) {\n              return t.datasetIndex === e.datasetIndex && t.index === e.index;\n            });\n          });\n        },\n            a = s(e, t),\n            r = i ? t : s(t, e);\n\n        a.length && n.updateHoverStyle(a, o.mode, !1), r.length && o.mode && n.updateHoverStyle(r, o.mode, !0);\n      }\n    }, {\n      key: \"_eventHandler\",\n      value: function _eventHandler(t, e) {\n        var _this3 = this;\n\n        var i = this,\n            n = {\n          event: t,\n          replay: e,\n          cancelable: !0\n        },\n            o = function o(e) {\n          return (e.options.events || _this3.options.events).includes(t.type);\n        };\n\n        if (!1 === i.notifyPlugins(\"beforeEvent\", n, o)) return;\n\n        var s = i._handleEvent(t, e);\n\n        return n.cancelable = !1, i.notifyPlugins(\"afterEvent\", n, o), (s || n.changed) && i.render(), i;\n      }\n    }, {\n      key: \"_handleEvent\",\n      value: function _handleEvent(t, e) {\n        var i = this,\n            _i$_active = i._active,\n            n = _i$_active === void 0 ? [] : _i$_active,\n            o = i.options,\n            s = o.hover,\n            a = e;\n        var r = [],\n            l = !1,\n            c = null;\n        return \"mouseout\" !== t.type && (r = i.getElementsAtEventForMode(t, s.mode, s, a), c = \"click\" === t.type ? i._lastEvent : t), i._lastEvent = null, Gt(t, i.chartArea, i._minPadding) && (Q(o.onHover, [t, r, i], i), \"mouseup\" !== t.type && \"click\" !== t.type && \"contextmenu\" !== t.type || Q(o.onClick, [t, r, i], i)), l = !tt(r, n), (l || e) && (i._active = r, i._updateHoverStyles(r, n, e)), i._lastEvent = c, l;\n      }\n    }]);\n\n    return to;\n  }();\n\n  var eo = function eo() {\n    return J(to.instances, function (t) {\n      return t._plugins.invalidate();\n    });\n  },\n      io = !0;\n\n  function no() {\n    throw new Error(\"This method is not implemented: Check that a complete date adapter is provided.\");\n  }\n\n  Object.defineProperties(to, {\n    defaults: {\n      enumerable: io,\n      value: xt\n    },\n    instances: {\n      enumerable: io,\n      value: Qn\n    },\n    overrides: {\n      enumerable: io,\n      value: ft\n    },\n    registry: {\n      enumerable: io,\n      value: An\n    },\n    version: {\n      enumerable: io,\n      value: \"3.3.2\"\n    },\n    getChart: {\n      enumerable: io,\n      value: Jn\n    },\n    register: {\n      enumerable: io,\n      value: function value() {\n        An.add.apply(An, arguments), eo();\n      }\n    },\n    unregister: {\n      enumerable: io,\n      value: function value() {\n        An.remove.apply(An, arguments), eo();\n      }\n    }\n  });\n\n  var oo = /*#__PURE__*/function () {\n    function oo(t) {\n      _classCallCheck(this, oo);\n\n      this.options = t || {};\n    }\n\n    _createClass(oo, [{\n      key: \"formats\",\n      value: function formats() {\n        return no();\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        return no();\n      }\n    }, {\n      key: \"format\",\n      value: function format(t, e) {\n        return no();\n      }\n    }, {\n      key: \"add\",\n      value: function add(t, e, i) {\n        return no();\n      }\n    }, {\n      key: \"diff\",\n      value: function diff(t, e, i) {\n        return no();\n      }\n    }, {\n      key: \"startOf\",\n      value: function startOf(t, e, i) {\n        return no();\n      }\n    }, {\n      key: \"endOf\",\n      value: function endOf(t, e) {\n        return no();\n      }\n    }]);\n\n    return oo;\n  }();\n\n  oo.override = function (t) {\n    Object.assign(oo.prototype, t);\n  };\n\n  var so = {\n    _date: oo\n  };\n\n  function ao(t) {\n    var e = function (t) {\n      if (!t._cache.$bar) {\n        var _e28 = t.getMatchingVisibleMetas(\"bar\");\n\n        var _i37 = [];\n\n        for (var _n29 = 0, _o26 = _e28.length; _n29 < _o26; _n29++) {\n          _i37 = _i37.concat(_e28[_n29].controller.getAllParsedValues(t));\n        }\n\n        t._cache.$bar = he(_i37.sort(function (t, e) {\n          return t - e;\n        }));\n      }\n\n      return t._cache.$bar;\n    }(t);\n\n    var i,\n        n,\n        o,\n        s,\n        a = t._length;\n\n    var r = function r() {\n      32767 !== o && -32768 !== o && (ht(s) && (a = Math.min(a, Math.abs(o - s) || a)), s = o);\n    };\n\n    for (i = 0, n = e.length; i < n; ++i) {\n      o = t.getPixelForValue(e[i]), r();\n    }\n\n    for (s = void 0, i = 0, n = t.ticks.length; i < n; ++i) {\n      o = t.getPixelForTick(i), r();\n    }\n\n    return a;\n  }\n\n  function ro(t, e, i, n) {\n    return Y(t) ? function (t, e, i, n) {\n      var o = i.parse(t[0], n),\n          s = i.parse(t[1], n),\n          a = Math.min(o, s),\n          r = Math.max(o, s);\n      var l = a,\n          c = r;\n      Math.abs(a) > Math.abs(r) && (l = r, c = a), e[i.axis] = c, e._custom = {\n        barStart: l,\n        barEnd: c,\n        start: o,\n        end: s,\n        min: a,\n        max: r\n      };\n    }(t, e, i, n) : e[i.axis] = i.parse(t, n), e;\n  }\n\n  function lo(t, e, i, n) {\n    var o = t.iScale,\n        s = t.vScale,\n        a = o.getLabels(),\n        r = o === s,\n        l = [];\n    var c, h, d, u;\n\n    for (c = i, h = i + n; c < h; ++c) {\n      u = e[c], d = {}, d[o.axis] = r || o.parse(a[c], c), l.push(ro(u, d, s, c));\n    }\n\n    return l;\n  }\n\n  function co(t) {\n    return t && void 0 !== t.barStart && void 0 !== t.barEnd;\n  }\n\n  var ho = /*#__PURE__*/function (_Ri) {\n    _inherits(ho, _Ri);\n\n    var _super4 = _createSuper(ho);\n\n    function ho() {\n      _classCallCheck(this, ho);\n\n      return _super4.apply(this, arguments);\n    }\n\n    _createClass(ho, [{\n      key: \"parsePrimitiveData\",\n      value: function parsePrimitiveData(t, e, i, n) {\n        return lo(t, e, i, n);\n      }\n    }, {\n      key: \"parseArrayData\",\n      value: function parseArrayData(t, e, i, n) {\n        return lo(t, e, i, n);\n      }\n    }, {\n      key: \"parseObjectData\",\n      value: function parseObjectData(t, e, i, n) {\n        var o = t.iScale,\n            s = t.vScale,\n            _this$_parsing2 = this._parsing,\n            _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n            a = _this$_parsing2$xAxis === void 0 ? \"x\" : _this$_parsing2$xAxis,\n            _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n            r = _this$_parsing2$yAxis === void 0 ? \"y\" : _this$_parsing2$yAxis,\n            l = \"x\" === o.axis ? a : r,\n            c = \"x\" === s.axis ? a : r,\n            h = [];\n        var d, u, f, g;\n\n        for (d = i, u = i + n; d < u; ++d) {\n          g = e[d], f = {}, f[o.axis] = o.parse(lt(g, l), d), h.push(ro(lt(g, c), f, s, d));\n        }\n\n        return h;\n      }\n    }, {\n      key: \"updateRangeFromParsed\",\n      value: function updateRangeFromParsed(t, e, i, n) {\n        _get2(_getPrototypeOf(ho.prototype), \"updateRangeFromParsed\", this).call(this, t, e, i, n);\n\n        var o = i._custom;\n        o && e === this._cachedMeta.vScale && (t.min = Math.min(t.min, o.min), t.max = Math.max(t.max, o.max));\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = e.iScale,\n            n = e.vScale,\n            o = this.getParsed(t),\n            s = o._custom,\n            a = co(s) ? \"[\" + s.start + \", \" + s.end + \"]\" : \"\" + n.getLabelForValue(o[n.axis]);\n        return {\n          label: \"\" + i.getLabelForValue(o[i.axis]),\n          value: a\n        };\n      }\n    }, {\n      key: \"initialize\",\n      value: function initialize() {\n        var t = this;\n        t.enableOptionSharing = !0, _get2(_getPrototypeOf(ho.prototype), \"initialize\", this).call(this);\n        t._cachedMeta.stack = t.getDataset().stack;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this._cachedMeta;\n        this.updateElements(e.data, 0, e.data.length, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            a = o._cachedMeta.vScale,\n            r = a.getBasePixel(),\n            l = a.isHorizontal(),\n            c = o._getRuler(),\n            h = o.resolveDataElementOptions(e, n),\n            d = o.getSharedOptions(h),\n            u = o.includeOptions(n, d);\n\n        o.updateSharedOptions(d, n, h);\n\n        for (var _h11 = e; _h11 < e + i; _h11++) {\n          var _e29 = o.getParsed(_h11),\n              _i38 = s || $(_e29[a.axis]) ? {\n            base: r,\n            head: r\n          } : o._calculateBarValuePixels(_h11),\n              _f2 = o._calculateBarIndexPixels(_h11, c),\n              _g2 = (_e29._stacks || {})[a.axis],\n              _p = {\n            horizontal: l,\n            base: _i38.base,\n            enableBorderRadius: !_g2 || co(_e29._custom) || o.index === _g2._top || o.index === _g2._bottom,\n            x: l ? _i38.head : _f2.center,\n            y: l ? _f2.center : _i38.head,\n            height: l ? _f2.size : void 0,\n            width: l ? void 0 : _f2.size\n          };\n\n          u && (_p.options = d || o.resolveDataElementOptions(_h11, n)), o.updateElement(t[_h11], _h11, _p, n);\n        }\n      }\n    }, {\n      key: \"_getStacks\",\n      value: function _getStacks(t, e) {\n        var i = this._cachedMeta.iScale,\n            n = i.getMatchingVisibleMetas(this._type),\n            o = i.options.stacked,\n            s = n.length,\n            a = [];\n        var r, l;\n\n        for (r = 0; r < s; ++r) {\n          if (l = n[r], void 0 !== e) {\n            var _t39 = l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];\n\n            if ($(_t39) || isNaN(_t39)) continue;\n          }\n\n          if ((!1 === o || -1 === a.indexOf(l.stack) || void 0 === o && void 0 === l.stack) && a.push(l.stack), l.index === t) break;\n        }\n\n        return a.length || a.push(void 0), a;\n      }\n    }, {\n      key: \"_getStackCount\",\n      value: function _getStackCount(t) {\n        return this._getStacks(void 0, t).length;\n      }\n    }, {\n      key: \"_getStackIndex\",\n      value: function _getStackIndex(t, e, i) {\n        var n = this._getStacks(t, i),\n            o = void 0 !== e ? n.indexOf(e) : -1;\n\n        return -1 === o ? n.length - 1 : o;\n      }\n    }, {\n      key: \"_getRuler\",\n      value: function _getRuler() {\n        var t = this,\n            e = t.options,\n            i = t._cachedMeta,\n            n = i.iScale,\n            o = [];\n        var s, a;\n\n        for (s = 0, a = i.data.length; s < a; ++s) {\n          o.push(n.getPixelForValue(t.getParsed(s)[n.axis], s));\n        }\n\n        var r = e.barThickness;\n        return {\n          min: r || ao(n),\n          pixels: o,\n          start: n._startPixel,\n          end: n._endPixel,\n          stackCount: t._getStackCount(),\n          scale: n,\n          grouped: e.grouped,\n          ratio: r ? 1 : e.categoryPercentage * e.barPercentage\n        };\n      }\n    }, {\n      key: \"_calculateBarValuePixels\",\n      value: function _calculateBarValuePixels(t) {\n        var e = this,\n            _e$_cachedMeta = e._cachedMeta,\n            i = _e$_cachedMeta.vScale,\n            n = _e$_cachedMeta._stacked,\n            _e$options2 = e.options,\n            o = _e$options2.base,\n            s = _e$options2.minBarLength,\n            a = e.getParsed(t),\n            r = a._custom,\n            l = co(r);\n        var c,\n            h,\n            d = a[i.axis],\n            u = 0,\n            f = n ? e.applyStack(i, a, n) : d;\n        f !== d && (u = f - d, f = d), l && (d = r.barStart, f = r.barEnd - r.barStart, 0 !== d && Dt(d) !== Dt(r.barEnd) && (u = 0), u += d);\n        var g = $(o) || l ? u : o;\n        var p = i.getPixelForValue(g);\n        c = this.chart.getDataVisibility(t) ? i.getPixelForValue(u + f) : p, h = c - p, void 0 !== s && Math.abs(h) < s && (h = h < 0 ? -s : s, 0 === d && (p -= h / 2), c = p + h);\n        var m = o || 0;\n\n        if (p === i.getPixelForValue(m)) {\n          var _t40 = i.getLineWidthForValue(m) / 2;\n\n          h > 0 ? (p += _t40, h -= _t40) : h < 0 && (p -= _t40, h += _t40);\n        }\n\n        return {\n          size: h,\n          base: p,\n          head: c,\n          center: c + h / 2\n        };\n      }\n    }, {\n      key: \"_calculateBarIndexPixels\",\n      value: function _calculateBarIndexPixels(t, e) {\n        var i = this,\n            n = e.scale,\n            o = i.options,\n            s = o.skipNull,\n            a = K(o.maxBarThickness, 1 / 0);\n        var r, l;\n\n        if (e.grouped) {\n          var _n30 = s ? i._getStackCount(t) : e.stackCount,\n              _c9 = \"flex\" === o.barThickness ? function (t, e, i, n) {\n            var o = e.pixels,\n                s = o[t];\n            var a = t > 0 ? o[t - 1] : null,\n                r = t < o.length - 1 ? o[t + 1] : null;\n            var l = i.categoryPercentage;\n            null === a && (a = s - (null === r ? e.end - e.start : r - s)), null === r && (r = s + s - a);\n            var c = s - (s - Math.min(a, r)) / 2 * l;\n            return {\n              chunk: Math.abs(r - a) / 2 * l / n,\n              ratio: i.barPercentage,\n              start: c\n            };\n          }(t, e, o, _n30) : function (t, e, i, n) {\n            var o = i.barThickness;\n            var s, a;\n            return $(o) ? (s = e.min * i.categoryPercentage, a = i.barPercentage) : (s = o * n, a = 1), {\n              chunk: s / n,\n              ratio: a,\n              start: e.pixels[t] - s / 2\n            };\n          }(t, e, o, _n30),\n              _h12 = i._getStackIndex(i.index, i._cachedMeta.stack, s ? t : void 0);\n\n          r = _c9.start + _c9.chunk * _h12 + _c9.chunk / 2, l = Math.min(a, _c9.chunk * _c9.ratio);\n        } else r = n.getPixelForValue(i.getParsed(t)[n.axis], t), l = Math.min(a, e.min * e.ratio);\n\n        return {\n          base: r - l / 2,\n          head: r + l / 2,\n          center: r,\n          size: l\n        };\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this,\n            e = t.chart,\n            i = t._cachedMeta,\n            n = i.vScale,\n            o = i.data,\n            s = o.length;\n        var a = 0;\n\n        for (Zt(e.ctx, e.chartArea); a < s; ++a) {\n          null !== t.getParsed(a)[n.axis] && o[a].draw(t._ctx);\n        }\n\n        Qt(e.ctx);\n      }\n    }]);\n\n    return ho;\n  }(Ri);\n\n  ho.id = \"bar\", ho.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"bar\",\n    categoryPercentage: .8,\n    barPercentage: .9,\n    grouped: !0,\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"base\", \"width\", \"height\"]\n      }\n    }\n  }, ho.overrides = {\n    interaction: {\n      mode: \"index\"\n    },\n    scales: {\n      _index_: {\n        type: \"category\",\n        offset: !0,\n        grid: {\n          offset: !0\n        }\n      },\n      _value_: {\n        type: \"linear\",\n        beginAtZero: !0\n      }\n    }\n  };\n\n  var uo = /*#__PURE__*/function (_Ri2) {\n    _inherits(uo, _Ri2);\n\n    var _super5 = _createSuper(uo);\n\n    function uo() {\n      _classCallCheck(this, uo);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(uo, [{\n      key: \"initialize\",\n      value: function initialize() {\n        this.enableOptionSharing = !0, _get2(_getPrototypeOf(uo.prototype), \"initialize\", this).call(this);\n      }\n    }, {\n      key: \"parseObjectData\",\n      value: function parseObjectData(t, e, i, n) {\n        var o = t.xScale,\n            s = t.yScale,\n            _this$_parsing3 = this._parsing,\n            _this$_parsing3$xAxis = _this$_parsing3.xAxisKey,\n            a = _this$_parsing3$xAxis === void 0 ? \"x\" : _this$_parsing3$xAxis,\n            _this$_parsing3$yAxis = _this$_parsing3.yAxisKey,\n            r = _this$_parsing3$yAxis === void 0 ? \"y\" : _this$_parsing3$yAxis,\n            l = [];\n        var c, h, d;\n\n        for (c = i, h = i + n; c < h; ++c) {\n          d = e[c], l.push({\n            x: o.parse(lt(d, a), c),\n            y: s.parse(lt(d, r), c),\n            _custom: d && d.r && +d.r\n          });\n        }\n\n        return l;\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        var _this$_cachedMeta = this._cachedMeta,\n            t = _this$_cachedMeta.data,\n            e = _this$_cachedMeta._parsed;\n        var i = 0;\n\n        for (var _n31 = t.length - 1; _n31 >= 0; --_n31) {\n          i = Math.max(i, t[_n31].size() / 2, e[_n31]._custom);\n        }\n\n        return i > 0 && i;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = e.xScale,\n            n = e.yScale,\n            o = this.getParsed(t),\n            s = i.getLabelForValue(o.x),\n            a = n.getLabelForValue(o.y),\n            r = o._custom;\n        return {\n          label: e.label,\n          value: \"(\" + s + \", \" + a + (r ? \", \" + r : \"\") + \")\"\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this._cachedMeta.data;\n        this.updateElements(e, 0, e.length, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            _o$_cachedMeta = o._cachedMeta,\n            a = _o$_cachedMeta.iScale,\n            r = _o$_cachedMeta.vScale,\n            l = o.resolveDataElementOptions(e, n),\n            c = o.getSharedOptions(l),\n            h = o.includeOptions(n, c),\n            d = a.axis,\n            u = r.axis;\n\n        for (var _l12 = e; _l12 < e + i; _l12++) {\n          var _e30 = t[_l12],\n              _i39 = !s && o.getParsed(_l12),\n              _c10 = {},\n              _f3 = _c10[d] = s ? a.getPixelForDecimal(.5) : a.getPixelForValue(_i39[d]),\n              _g3 = _c10[u] = s ? r.getBasePixel() : r.getPixelForValue(_i39[u]);\n\n          _c10.skip = isNaN(_f3) || isNaN(_g3), h && (_c10.options = o.resolveDataElementOptions(_l12, n), s && (_c10.options.radius = 0)), o.updateElement(_e30, _l12, _c10, n);\n        }\n\n        o.updateSharedOptions(c, n, l);\n      }\n    }, {\n      key: \"resolveDataElementOptions\",\n      value: function resolveDataElementOptions(t, e) {\n        var i = this.getParsed(t);\n\n        var n = _get2(_getPrototypeOf(uo.prototype), \"resolveDataElementOptions\", this).call(this, t, e);\n\n        n.$shared && (n = Object.assign({}, n, {\n          $shared: !1\n        }));\n        var o = n.radius;\n        return \"active\" !== e && (n.radius = 0), n.radius += K(i && i._custom, o), n;\n      }\n    }]);\n\n    return uo;\n  }(Ri);\n\n  uo.id = \"bubble\", uo.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"point\",\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"borderWidth\", \"radius\"]\n      }\n    }\n  }, uo.overrides = {\n    scales: {\n      x: {\n        type: \"linear\"\n      },\n      y: {\n        type: \"linear\"\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          }\n        }\n      }\n    }\n  };\n\n  var fo = /*#__PURE__*/function (_Ri3) {\n    _inherits(fo, _Ri3);\n\n    var _super6 = _createSuper(fo);\n\n    function fo(t, e) {\n      var _this4;\n\n      _classCallCheck(this, fo);\n\n      _this4 = _super6.call(this, t, e), _this4.enableOptionSharing = !0, _this4.innerRadius = void 0, _this4.outerRadius = void 0, _this4.offsetX = void 0, _this4.offsetY = void 0;\n      return _this4;\n    }\n\n    _createClass(fo, [{\n      key: \"linkScales\",\n      value: function linkScales() {}\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        var i = this.getDataset().data,\n            n = this._cachedMeta;\n        var o, s;\n\n        for (o = t, s = t + e; o < s; ++o) {\n          n._parsed[o] = +i[o];\n        }\n      }\n    }, {\n      key: \"_getRotation\",\n      value: function _getRotation() {\n        return Et(this.options.rotation - 90);\n      }\n    }, {\n      key: \"_getCircumference\",\n      value: function _getCircumference() {\n        return Et(this.options.circumference);\n      }\n    }, {\n      key: \"_getRotationExtents\",\n      value: function _getRotationExtents() {\n        var t = _t,\n            e = -_t;\n        var i = this;\n\n        for (var _n32 = 0; _n32 < i.chart.data.datasets.length; ++_n32) {\n          if (i.chart.isDatasetVisible(_n32)) {\n            var _o27 = i.chart.getDatasetMeta(_n32).controller,\n                _s17 = _o27._getRotation(),\n                _a16 = _o27._getCircumference();\n\n            t = Math.min(t, _s17), e = Math.max(e, _s17 + _a16);\n          }\n        }\n\n        return {\n          rotation: t,\n          circumference: e - t\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e.chart,\n            n = i.chartArea,\n            o = e._cachedMeta,\n            s = o.data,\n            a = e.getMaxBorderWidth() + e.getMaxOffset(s),\n            r = Math.max((Math.min(n.width, n.height) - a) / 2, 0),\n            l = Math.min(G(e.options.cutout, r), 1),\n            c = e._getRingWeight(e.index),\n            _e$_getRotationExtent = e._getRotationExtents(),\n            h = _e$_getRotationExtent.circumference,\n            d = _e$_getRotationExtent.rotation,\n            _ref8 = function (t, e, i) {\n          var n = 1,\n              o = 1,\n              s = 0,\n              a = 0;\n\n          if (e < _t) {\n            var _r9 = t,\n                _l13 = _r9 + e,\n                _c11 = Math.cos(_r9),\n                _h13 = Math.sin(_r9),\n                _d4 = Math.cos(_l13),\n                _u4 = Math.sin(_l13),\n                _f4 = function _f4(t, e, n) {\n              return Ht(t, _r9, _l13, !0) ? 1 : Math.max(e, e * i, n, n * i);\n            },\n                _g4 = function _g4(t, e, n) {\n              return Ht(t, _r9, _l13, !0) ? -1 : Math.min(e, e * i, n, n * i);\n            },\n                _p2 = _f4(0, _c11, _d4),\n                _m = _f4(Mt, _h13, _u4),\n                _x = _g4(bt, _c11, _d4),\n                _b = _g4(bt + Mt, _h13, _u4);\n\n            n = (_p2 - _x) / 2, o = (_m - _b) / 2, s = -(_p2 + _x) / 2, a = -(_m + _b) / 2;\n          }\n\n          return {\n            ratioX: n,\n            ratioY: o,\n            offsetX: s,\n            offsetY: a\n          };\n        }(d, h, l),\n            u = _ref8.ratioX,\n            f = _ref8.ratioY,\n            g = _ref8.offsetX,\n            p = _ref8.offsetY,\n            m = (n.width - a) / u,\n            x = (n.height - a) / f,\n            b = Math.max(Math.min(m, x) / 2, 0),\n            _ = Z(e.options.radius, b),\n            y = (_ - Math.max(_ * l, 0)) / e._getVisibleDatasetWeightTotal();\n\n        e.offsetX = g * _, e.offsetY = p * _, o.total = e.calculateTotal(), e.outerRadius = _ - y * e._getRingWeightOffset(e.index), e.innerRadius = Math.max(e.outerRadius - y * c, 0), e.updateElements(s, 0, s.length, t);\n      }\n    }, {\n      key: \"_circumference\",\n      value: function _circumference(t, e) {\n        var i = this,\n            n = i.options,\n            o = i._cachedMeta,\n            s = i._getCircumference();\n\n        return e && n.animation.animateRotate || !this.chart.getDataVisibility(t) || null === o._parsed[t] ? 0 : i.calculateCircumference(o._parsed[t] * s / _t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            a = o.chart,\n            r = a.chartArea,\n            l = a.options.animation,\n            c = (r.left + r.right) / 2,\n            h = (r.top + r.bottom) / 2,\n            d = s && l.animateScale,\n            u = d ? 0 : o.innerRadius,\n            f = d ? 0 : o.outerRadius,\n            g = o.resolveDataElementOptions(e, n),\n            p = o.getSharedOptions(g),\n            m = o.includeOptions(n, p);\n\n        var x,\n            b = o._getRotation();\n\n        for (x = 0; x < e; ++x) {\n          b += o._circumference(x, s);\n        }\n\n        for (x = e; x < e + i; ++x) {\n          var _e31 = o._circumference(x, s),\n              _i40 = t[x],\n              _a17 = {\n            x: c + o.offsetX,\n            y: h + o.offsetY,\n            startAngle: b,\n            endAngle: b + _e31,\n            circumference: _e31,\n            outerRadius: f,\n            innerRadius: u\n          };\n\n          m && (_a17.options = p || o.resolveDataElementOptions(x, n)), b += _e31, o.updateElement(_i40, x, _a17, n);\n        }\n\n        o.updateSharedOptions(p, n, g);\n      }\n    }, {\n      key: \"calculateTotal\",\n      value: function calculateTotal() {\n        var t = this._cachedMeta,\n            e = t.data;\n        var i,\n            n = 0;\n\n        for (i = 0; i < e.length; i++) {\n          var _e32 = t._parsed[i];\n          null !== _e32 && !isNaN(_e32) && this.chart.getDataVisibility(i) && (n += Math.abs(_e32));\n        }\n\n        return n;\n      }\n    }, {\n      key: \"calculateCircumference\",\n      value: function calculateCircumference(t) {\n        var e = this._cachedMeta.total;\n        return e > 0 && !isNaN(t) ? _t * (Math.abs(t) / e) : 0;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = this.chart,\n            n = i.data.labels || [],\n            o = zi(e._parsed[t], i.options.locale);\n        return {\n          label: n[t] || \"\",\n          value: o\n        };\n      }\n    }, {\n      key: \"getMaxBorderWidth\",\n      value: function getMaxBorderWidth(t) {\n        var e = this;\n        var i = 0;\n        var n = e.chart;\n        var o, s, a, r, l;\n        if (!t) for (o = 0, s = n.data.datasets.length; o < s; ++o) {\n          if (n.isDatasetVisible(o)) {\n            a = n.getDatasetMeta(o), t = a.data, r = a.controller, r !== e && r.configure();\n            break;\n          }\n        }\n        if (!t) return 0;\n\n        for (o = 0, s = t.length; o < s; ++o) {\n          l = r.resolveDataElementOptions(o), \"inner\" !== l.borderAlign && (i = Math.max(i, l.borderWidth || 0, l.hoverBorderWidth || 0));\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getMaxOffset\",\n      value: function getMaxOffset(t) {\n        var e = 0;\n\n        for (var _i41 = 0, _n33 = t.length; _i41 < _n33; ++_i41) {\n          var _t41 = this.resolveDataElementOptions(_i41);\n\n          e = Math.max(e, _t41.offset || 0, _t41.hoverOffset || 0);\n        }\n\n        return e;\n      }\n    }, {\n      key: \"_getRingWeightOffset\",\n      value: function _getRingWeightOffset(t) {\n        var e = 0;\n\n        for (var _i42 = 0; _i42 < t; ++_i42) {\n          this.chart.isDatasetVisible(_i42) && (e += this._getRingWeight(_i42));\n        }\n\n        return e;\n      }\n    }, {\n      key: \"_getRingWeight\",\n      value: function _getRingWeight(t) {\n        return Math.max(K(this.chart.data.datasets[t].weight, 1), 0);\n      }\n    }, {\n      key: \"_getVisibleDatasetWeightTotal\",\n      value: function _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n      }\n    }]);\n\n    return fo;\n  }(Ri);\n\n  fo.id = \"doughnut\", fo.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"arc\",\n    animation: {\n      animateRotate: !0,\n      animateScale: !1\n    },\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"circumference\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"startAngle\", \"x\", \"y\", \"offset\", \"borderWidth\"]\n      }\n    },\n    cutout: \"50%\",\n    rotation: 0,\n    circumference: 360,\n    radius: \"100%\",\n    indexAxis: \"r\"\n  }, fo.overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels: function generateLabels(t) {\n            var e = t.data;\n            return e.labels.length && e.datasets.length ? e.labels.map(function (e, i) {\n              var n = t.getDatasetMeta(0).controller.getStyle(i);\n              return {\n                text: e,\n                fillStyle: n.backgroundColor,\n                strokeStyle: n.borderColor,\n                lineWidth: n.borderWidth,\n                hidden: !t.getDataVisibility(i),\n                index: i\n              };\n            }) : [];\n          }\n        },\n        onClick: function onClick(t, e, i) {\n          i.chart.toggleDataVisibility(e.index), i.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          },\n          label: function label(t) {\n            var e = t.label;\n            var i = \": \" + t.formattedValue;\n            return Y(e) ? (e = e.slice(), e[0] += i) : e += i, e;\n          }\n        }\n      }\n    }\n  };\n\n  var go = /*#__PURE__*/function (_Ri4) {\n    _inherits(go, _Ri4);\n\n    var _super7 = _createSuper(go);\n\n    function go() {\n      _classCallCheck(this, go);\n\n      return _super7.apply(this, arguments);\n    }\n\n    _createClass(go, [{\n      key: \"initialize\",\n      value: function initialize() {\n        this.enableOptionSharing = !0, _get2(_getPrototypeOf(go.prototype), \"initialize\", this).call(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e._cachedMeta,\n            n = i.dataset,\n            _i$data = i.data,\n            o = _i$data === void 0 ? [] : _i$data,\n            s = i._dataset,\n            a = e.chart._animationsDisabled;\n\n        var _ref9 = function (t, e, i) {\n          var n = e.length;\n          var o = 0,\n              s = n;\n\n          if (t._sorted) {\n            var _a18 = t.iScale,\n                _r10 = t._parsed,\n                _l14 = _a18.axis,\n                _a18$getUserBounds = _a18.getUserBounds(),\n                _c12 = _a18$getUserBounds.min,\n                _h14 = _a18$getUserBounds.max,\n                _d5 = _a18$getUserBounds.minDefined,\n                _u5 = _a18$getUserBounds.maxDefined;\n\n            _d5 && (o = Nt(Math.min(oe(_r10, _a18.axis, _c12).lo, i ? n : oe(e, _l14, _a18.getPixelForValue(_c12)).lo), 0, n - 1)), s = _u5 ? Nt(Math.max(oe(_r10, _a18.axis, _h14).hi + 1, i ? 0 : oe(e, _l14, _a18.getPixelForValue(_h14)).hi + 1), o, n) - o : n - o;\n          }\n\n          return {\n            start: o,\n            count: s\n          };\n        }(i, o, a),\n            r = _ref9.start,\n            l = _ref9.count;\n\n        e._drawStart = r, e._drawCount = l, function (t) {\n          var e = t.xScale,\n              i = t.yScale,\n              n = t._scaleRanges,\n              o = {\n            xmin: e.min,\n            xmax: e.max,\n            ymin: i.min,\n            ymax: i.max\n          };\n          if (!n) return t._scaleRanges = o, !0;\n          var s = n.xmin !== e.min || n.xmax !== e.max || n.ymin !== i.min || n.ymax !== i.max;\n          return Object.assign(n, o), s;\n        }(i) && (r = 0, l = o.length), n._decimated = !!s._decimated, n.points = o;\n        var c = e.resolveDatasetElementOptions(t);\n        e.options.showLine || (c.borderWidth = 0), c.segment = e.options.segment, e.updateElement(n, void 0, {\n          animated: !a,\n          options: c\n        }, t), e.updateElements(o, r, l, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            _o$_cachedMeta2 = o._cachedMeta,\n            a = _o$_cachedMeta2.iScale,\n            r = _o$_cachedMeta2.vScale,\n            l = _o$_cachedMeta2._stacked,\n            c = o.resolveDataElementOptions(e, n),\n            h = o.getSharedOptions(c),\n            d = o.includeOptions(n, h),\n            u = a.axis,\n            f = r.axis,\n            g = o.options.spanGaps,\n            p = Tt(g) ? g : Number.POSITIVE_INFINITY,\n            m = o.chart._animationsDisabled || s || \"none\" === n;\n        var x = e > 0 && o.getParsed(e - 1);\n\n        for (var _c13 = e; _c13 < e + i; ++_c13) {\n          var _e33 = t[_c13],\n              _i43 = o.getParsed(_c13),\n              _g5 = m ? _e33 : {},\n              _b2 = $(_i43[f]),\n              _2 = _g5[u] = a.getPixelForValue(_i43[u], _c13),\n              _y = _g5[f] = s || _b2 ? r.getBasePixel() : r.getPixelForValue(l ? o.applyStack(r, _i43, l) : _i43[f], _c13);\n\n          _g5.skip = isNaN(_2) || isNaN(_y) || _b2, _g5.stop = _c13 > 0 && _i43[u] - x[u] > p, _g5.parsed = _i43, d && (_g5.options = h || o.resolveDataElementOptions(_c13, n)), m || o.updateElement(_e33, _c13, _g5, n), x = _i43;\n        }\n\n        o.updateSharedOptions(h, n, c);\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        var t = this,\n            e = t._cachedMeta,\n            i = e.dataset,\n            n = i.options && i.options.borderWidth || 0,\n            o = e.data || [];\n        if (!o.length) return n;\n        var s = o[0].size(t.resolveDataElementOptions(0)),\n            a = o[o.length - 1].size(t.resolveDataElementOptions(o.length - 1));\n        return Math.max(n, s, a) / 2;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this._cachedMeta;\n        t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis), _get2(_getPrototypeOf(go.prototype), \"draw\", this).call(this);\n      }\n    }]);\n\n    return go;\n  }(Ri);\n\n  go.id = \"line\", go.defaults = {\n    datasetElementType: \"line\",\n    dataElementType: \"point\",\n    showLine: !0,\n    spanGaps: !1\n  }, go.overrides = {\n    scales: {\n      _index_: {\n        type: \"category\"\n      },\n      _value_: {\n        type: \"linear\"\n      }\n    }\n  };\n\n  var po = /*#__PURE__*/function (_Ri5) {\n    _inherits(po, _Ri5);\n\n    var _super8 = _createSuper(po);\n\n    function po(t, e) {\n      var _this5;\n\n      _classCallCheck(this, po);\n\n      _this5 = _super8.call(this, t, e), _this5.innerRadius = void 0, _this5.outerRadius = void 0;\n      return _this5;\n    }\n\n    _createClass(po, [{\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = this.chart,\n            n = i.data.labels || [],\n            o = zi(e._parsed[t].r, i.options.locale);\n        return {\n          label: n[t] || \"\",\n          value: o\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this._cachedMeta.data;\n        this._updateRadius(), this.updateElements(e, 0, e.length, t);\n      }\n    }, {\n      key: \"_updateRadius\",\n      value: function _updateRadius() {\n        var t = this,\n            e = t.chart,\n            i = e.chartArea,\n            n = e.options,\n            o = Math.min(i.right - i.left, i.bottom - i.top),\n            s = Math.max(o / 2, 0),\n            a = (s - Math.max(n.cutoutPercentage ? s / 100 * n.cutoutPercentage : 1, 0)) / e.getVisibleDatasetCount();\n        t.outerRadius = s - a * t.index, t.innerRadius = t.outerRadius - a;\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            a = o.chart,\n            r = o.getDataset(),\n            l = a.options.animation,\n            c = o._cachedMeta.rScale,\n            h = c.xCenter,\n            d = c.yCenter,\n            u = c.getIndexAngle(0) - .5 * bt;\n        var f,\n            g = u;\n        var p = 360 / o.countVisibleElements();\n\n        for (f = 0; f < e; ++f) {\n          g += o._computeAngle(f, n, p);\n        }\n\n        for (f = e; f < e + i; f++) {\n          var _e34 = t[f];\n\n          var _i44 = g,\n              _m2 = g + o._computeAngle(f, n, p),\n              _x2 = a.getDataVisibility(f) ? c.getDistanceFromCenterForValue(r.data[f]) : 0;\n\n          g = _m2, s && (l.animateScale && (_x2 = 0), l.animateRotate && (_i44 = _m2 = u));\n          var _b3 = {\n            x: h,\n            y: d,\n            innerRadius: 0,\n            outerRadius: _x2,\n            startAngle: _i44,\n            endAngle: _m2,\n            options: o.resolveDataElementOptions(f, n)\n          };\n          o.updateElement(_e34, f, _b3, n);\n        }\n      }\n    }, {\n      key: \"countVisibleElements\",\n      value: function countVisibleElements() {\n        var _this6 = this;\n\n        var t = this.getDataset(),\n            e = this._cachedMeta;\n        var i = 0;\n        return e.data.forEach(function (e, n) {\n          !isNaN(t.data[n]) && _this6.chart.getDataVisibility(n) && i++;\n        }), i;\n      }\n    }, {\n      key: \"_computeAngle\",\n      value: function _computeAngle(t, e, i) {\n        return this.chart.getDataVisibility(t) ? Et(this.resolveDataElementOptions(t, e).angle || i) : 0;\n      }\n    }]);\n\n    return po;\n  }(Ri);\n\n  po.id = \"polarArea\", po.defaults = {\n    dataElementType: \"arc\",\n    animation: {\n      animateRotate: !0,\n      animateScale: !0\n    },\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\"]\n      }\n    },\n    indexAxis: \"r\",\n    startAngle: 0\n  }, po.overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels: function generateLabels(t) {\n            var e = t.data;\n            return e.labels.length && e.datasets.length ? e.labels.map(function (e, i) {\n              var n = t.getDatasetMeta(0).controller.getStyle(i);\n              return {\n                text: e,\n                fillStyle: n.backgroundColor,\n                strokeStyle: n.borderColor,\n                lineWidth: n.borderWidth,\n                hidden: !t.getDataVisibility(i),\n                index: i\n              };\n            }) : [];\n          }\n        },\n        onClick: function onClick(t, e, i) {\n          i.chart.toggleDataVisibility(e.index), i.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          },\n          label: function label(t) {\n            return t.chart.data.labels[t.dataIndex] + \": \" + t.formattedValue;\n          }\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: \"radialLinear\",\n        angleLines: {\n          display: !1\n        },\n        beginAtZero: !0,\n        grid: {\n          circular: !0\n        },\n        pointLabels: {\n          display: !1\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  var mo = /*#__PURE__*/function (_fo) {\n    _inherits(mo, _fo);\n\n    var _super9 = _createSuper(mo);\n\n    function mo() {\n      _classCallCheck(this, mo);\n\n      return _super9.apply(this, arguments);\n    }\n\n    return _createClass(mo);\n  }(fo);\n\n  mo.id = \"pie\", mo.defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: \"100%\"\n  };\n\n  var xo = /*#__PURE__*/function (_Ri6) {\n    _inherits(xo, _Ri6);\n\n    var _super10 = _createSuper(xo);\n\n    function xo() {\n      _classCallCheck(this, xo);\n\n      return _super10.apply(this, arguments);\n    }\n\n    _createClass(xo, [{\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta.vScale,\n            i = this.getParsed(t);\n        return {\n          label: e.getLabels()[t],\n          value: \"\" + e.getLabelForValue(i[e.axis])\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e._cachedMeta,\n            n = i.dataset,\n            o = i.data || [],\n            s = i.iScale.getLabels();\n\n        if (n.points = o, \"resize\" !== t) {\n          var _i45 = e.resolveDatasetElementOptions(t);\n\n          e.options.showLine || (_i45.borderWidth = 0);\n          var _a19 = {\n            _loop: !0,\n            _fullLoop: s.length === o.length,\n            options: _i45\n          };\n          e.updateElement(n, void 0, _a19, t);\n        }\n\n        e.updateElements(o, 0, o.length, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = o.getDataset(),\n            a = o._cachedMeta.rScale,\n            r = \"reset\" === n;\n\n        for (var _l15 = e; _l15 < e + i; _l15++) {\n          var _e35 = t[_l15],\n              _i46 = o.resolveDataElementOptions(_l15, n),\n              _c14 = a.getPointPositionForValue(_l15, s.data[_l15]),\n              _h15 = r ? a.xCenter : _c14.x,\n              _d6 = r ? a.yCenter : _c14.y,\n              _u6 = {\n            x: _h15,\n            y: _d6,\n            angle: _c14.angle,\n            skip: isNaN(_h15) || isNaN(_d6),\n            options: _i46\n          };\n\n          o.updateElement(_e35, _l15, _u6, n);\n        }\n      }\n    }]);\n\n    return xo;\n  }(Ri);\n\n  xo.id = \"radar\", xo.defaults = {\n    datasetElementType: \"line\",\n    dataElementType: \"point\",\n    indexAxis: \"r\",\n    showLine: !0,\n    elements: {\n      line: {\n        fill: \"start\"\n      }\n    }\n  }, xo.overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: \"radialLinear\"\n      }\n    }\n  };\n\n  var bo = /*#__PURE__*/function (_go) {\n    _inherits(bo, _go);\n\n    var _super11 = _createSuper(bo);\n\n    function bo() {\n      _classCallCheck(this, bo);\n\n      return _super11.apply(this, arguments);\n    }\n\n    return _createClass(bo);\n  }(go);\n\n  bo.id = \"scatter\", bo.defaults = {\n    showLine: !1,\n    fill: !1\n  }, bo.overrides = {\n    interaction: {\n      mode: \"point\"\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          },\n          label: function label(t) {\n            return \"(\" + t.label + \", \" + t.formattedValue + \")\";\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: \"linear\"\n      },\n      y: {\n        type: \"linear\"\n      }\n    }\n  };\n\n  var _o = Object.freeze({\n    __proto__: null,\n    BarController: ho,\n    BubbleController: uo,\n    DoughnutController: fo,\n    LineController: go,\n    PolarAreaController: po,\n    PieController: mo,\n    RadarController: xo,\n    ScatterController: bo\n  });\n\n  function yo(t, e, i) {\n    var n = e.startAngle,\n        o = e.pixelMargin,\n        s = e.x,\n        a = e.y,\n        r = e.outerRadius,\n        l = e.innerRadius;\n    var c = o / r;\n    t.beginPath(), t.arc(s, a, r, n - c, i + c), l > o ? (c = o / l, t.arc(s, a, l, i + c, n - c, !0)) : t.arc(s, a, o, i + Mt, n - Mt), t.closePath(), t.clip();\n  }\n\n  function vo(t, e, i, n) {\n    var o = Re(t.options.borderRadius, [\"outerStart\", \"outerEnd\", \"innerStart\", \"innerEnd\"]);\n\n    var s = (i - e) / 2,\n        a = Math.min(s, n * e / 2),\n        r = function r(t) {\n      var e = (i - Math.min(s, t)) * n / 2;\n      return Nt(t, 0, Math.min(s, e));\n    };\n\n    return {\n      outerStart: r(o.outerStart),\n      outerEnd: r(o.outerEnd),\n      innerStart: Nt(o.innerStart, 0, a),\n      innerEnd: Nt(o.innerEnd, 0, a)\n    };\n  }\n\n  function wo(t, e, i, n) {\n    return {\n      x: i + t * Math.cos(e),\n      y: n + t * Math.sin(e)\n    };\n  }\n\n  function Mo(t, e, i, n) {\n    var o = e.x,\n        s = e.y,\n        a = e.startAngle,\n        r = e.pixelMargin,\n        l = e.innerRadius,\n        c = Math.max(e.outerRadius + i - r, 0),\n        h = l > 0 ? l + i + r : 0,\n        d = n - a,\n        u = (d - Math.max(.001, d * c - i / bt) / c) / 2,\n        f = a + u,\n        g = n - u,\n        _vo = vo(e, h, c, g - f),\n        p = _vo.outerStart,\n        m = _vo.outerEnd,\n        x = _vo.innerStart,\n        b = _vo.innerEnd,\n        _ = c - p,\n        y = c - m,\n        v = f + p / _,\n        w = g - m / y,\n        M = h + x,\n        k = h + b,\n        S = f + x / M,\n        P = g - b / k;\n\n    if (t.beginPath(), t.arc(o, s, c, v, w), m > 0) {\n      var _e36 = wo(y, w, o, s);\n\n      t.arc(_e36.x, _e36.y, m, w, g + Mt);\n    }\n\n    var D = wo(k, g, o, s);\n\n    if (t.lineTo(D.x, D.y), b > 0) {\n      var _e37 = wo(k, P, o, s);\n\n      t.arc(_e37.x, _e37.y, b, g + Mt, P + Math.PI);\n    }\n\n    if (t.arc(o, s, h, g - b / h, f + x / h, !0), x > 0) {\n      var _e38 = wo(M, S, o, s);\n\n      t.arc(_e38.x, _e38.y, x, S + Math.PI, f - Mt);\n    }\n\n    var C = wo(_, f, o, s);\n\n    if (t.lineTo(C.x, C.y), p > 0) {\n      var _e39 = wo(_, v, o, s);\n\n      t.arc(_e39.x, _e39.y, p, f - Mt, v);\n    }\n\n    t.closePath();\n  }\n\n  function ko(t, e, i, n) {\n    var o = e.options,\n        s = \"inner\" === o.borderAlign;\n    o.borderWidth && (s ? (t.lineWidth = 2 * o.borderWidth, t.lineJoin = \"round\") : (t.lineWidth = o.borderWidth, t.lineJoin = \"bevel\"), e.fullCircles && function (t, e, i) {\n      var n = e.x,\n          o = e.y,\n          s = e.startAngle,\n          a = e.pixelMargin,\n          r = e.fullCircles,\n          l = Math.max(e.outerRadius - a, 0),\n          c = e.innerRadius + a;\n      var h;\n\n      for (i && yo(t, e, s + _t), t.beginPath(), t.arc(n, o, c, s + _t, s, !0), h = 0; h < r; ++h) {\n        t.stroke();\n      }\n\n      for (t.beginPath(), t.arc(n, o, l, s, s + _t), h = 0; h < r; ++h) {\n        t.stroke();\n      }\n    }(t, e, s), s && yo(t, e, n), Mo(t, e, i, n), t.stroke());\n  }\n\n  var So = /*#__PURE__*/function (_Ei2) {\n    _inherits(So, _Ei2);\n\n    var _super12 = _createSuper(So);\n\n    function So(t) {\n      var _this7;\n\n      _classCallCheck(this, So);\n\n      _this7 = _super12.call(this), _this7.options = void 0, _this7.circumference = void 0, _this7.startAngle = void 0, _this7.endAngle = void 0, _this7.innerRadius = void 0, _this7.outerRadius = void 0, _this7.pixelMargin = 0, _this7.fullCircles = 0, t && Object.assign(_assertThisInitialized(_this7), t);\n      return _this7;\n    }\n\n    _createClass(So, [{\n      key: \"inRange\",\n      value: function inRange(t, e, i) {\n        var n = this.getProps([\"x\", \"y\"], i),\n            _Ft = Ft(n, {\n          x: t,\n          y: e\n        }),\n            o = _Ft.angle,\n            s = _Ft.distance,\n            _this$getProps2 = this.getProps([\"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"circumference\"], i),\n            a = _this$getProps2.startAngle,\n            r = _this$getProps2.endAngle,\n            l = _this$getProps2.innerRadius,\n            c = _this$getProps2.outerRadius,\n            h = _this$getProps2.circumference;\n\n        return (h >= _t || Ht(o, a, r)) && s >= l && s <= c;\n      }\n    }, {\n      key: \"getCenterPoint\",\n      value: function getCenterPoint(t) {\n        var _this$getProps3 = this.getProps([\"x\", \"y\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"circumference\"], t),\n            e = _this$getProps3.x,\n            i = _this$getProps3.y,\n            n = _this$getProps3.startAngle,\n            o = _this$getProps3.endAngle,\n            s = _this$getProps3.innerRadius,\n            a = _this$getProps3.outerRadius,\n            r = (n + o) / 2,\n            l = (s + a) / 2;\n\n        return {\n          x: e + Math.cos(r) * l,\n          y: i + Math.sin(r) * l\n        };\n      }\n    }, {\n      key: \"tooltipPosition\",\n      value: function tooltipPosition(t) {\n        return this.getCenterPoint(t);\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this,\n            i = e.options,\n            n = e.circumference,\n            o = (i.offset || 0) / 2;\n        if (e.pixelMargin = \"inner\" === i.borderAlign ? .33 : 0, e.fullCircles = n > _t ? Math.floor(n / _t) : 0, 0 === n || e.innerRadius < 0 || e.outerRadius < 0) return;\n        t.save();\n        var s = 0;\n\n        if (o) {\n          s = o / 2;\n\n          var _i47 = (e.startAngle + e.endAngle) / 2;\n\n          t.translate(Math.cos(_i47) * s, Math.sin(_i47) * s), e.circumference >= bt && (s = o);\n        }\n\n        t.fillStyle = i.backgroundColor, t.strokeStyle = i.borderColor;\n\n        var a = function (t, e, i) {\n          var n = e.fullCircles,\n              o = e.startAngle,\n              s = e.circumference;\n          var a = e.endAngle;\n\n          if (n) {\n            Mo(t, e, i, o + _t);\n\n            for (var _e40 = 0; _e40 < n; ++_e40) {\n              t.fill();\n            }\n\n            isNaN(s) || (a = o + s % _t, s % _t == 0 && (a += _t));\n          }\n\n          return Mo(t, e, i, a), t.fill(), a;\n        }(t, e, s);\n\n        ko(t, e, s, a), t.restore();\n      }\n    }]);\n\n    return So;\n  }(Ei);\n\n  function Po(t, e) {\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e;\n    t.lineCap = K(i.borderCapStyle, e.borderCapStyle), t.setLineDash(K(i.borderDash, e.borderDash)), t.lineDashOffset = K(i.borderDashOffset, e.borderDashOffset), t.lineJoin = K(i.borderJoinStyle, e.borderJoinStyle), t.lineWidth = K(i.borderWidth, e.borderWidth), t.strokeStyle = K(i.borderColor, e.borderColor);\n  }\n\n  function Do(t, e, i) {\n    t.lineTo(i.x, i.y);\n  }\n\n  function Co(t, e) {\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var n = t.length,\n        _i$start = i.start,\n        o = _i$start === void 0 ? 0 : _i$start,\n        _i$end = i.end,\n        s = _i$end === void 0 ? n - 1 : _i$end,\n        a = e.start,\n        r = e.end,\n        l = Math.max(o, a),\n        c = Math.min(s, r),\n        h = o < a && s < a || o > r && s > r;\n    return {\n      count: n,\n      start: l,\n      loop: e.loop,\n      ilen: c < l && !h ? n + c - l : c - l\n    };\n  }\n\n  function Oo(t, e, i, n) {\n    var o = e.points,\n        s = e.options,\n        _Co = Co(o, i, n),\n        a = _Co.count,\n        r = _Co.start,\n        l = _Co.loop,\n        c = _Co.ilen,\n        h = function (t) {\n      return t.stepped ? Jt : t.tension || \"monotone\" === t.cubicInterpolationMode ? te : Do;\n    }(s);\n\n    var d,\n        u,\n        f,\n        _ref10 = n || {},\n        _ref10$move = _ref10.move,\n        g = _ref10$move === void 0 ? !0 : _ref10$move,\n        p = _ref10.reverse;\n\n    for (d = 0; d <= c; ++d) {\n      u = o[(r + (p ? c - d : d)) % a], u.skip || (g ? (t.moveTo(u.x, u.y), g = !1) : h(t, f, u, p, s.stepped), f = u);\n    }\n\n    return l && (u = o[(r + (p ? c : 0)) % a], h(t, f, u, p, s.stepped)), !!l;\n  }\n\n  function To(t, e, i, n) {\n    var o = e.points,\n        _Co2 = Co(o, i, n),\n        s = _Co2.count,\n        a = _Co2.start,\n        r = _Co2.ilen,\n        _ref11 = n || {},\n        _ref11$move = _ref11.move,\n        l = _ref11$move === void 0 ? !0 : _ref11$move,\n        c = _ref11.reverse;\n\n    var h,\n        d,\n        u,\n        f,\n        g,\n        p,\n        m = 0,\n        x = 0;\n\n    var b = function b(t) {\n      return (a + (c ? r - t : t)) % s;\n    },\n        _ = function _() {\n      f !== g && (t.lineTo(m, g), t.lineTo(m, f), t.lineTo(m, p));\n    };\n\n    for (l && (d = o[b(0)], t.moveTo(d.x, d.y)), h = 0; h <= r; ++h) {\n      if (d = o[b(h)], d.skip) continue;\n\n      var _e41 = d.x,\n          _i48 = d.y,\n          _n34 = 0 | _e41;\n\n      _n34 === u ? (_i48 < f ? f = _i48 : _i48 > g && (g = _i48), m = (x * m + _e41) / ++x) : (_(), t.lineTo(_e41, _i48), u = _n34, x = 0, f = g = _i48), p = _i48;\n    }\n\n    _();\n  }\n\n  function Ao(t) {\n    var e = t.options,\n        i = e.borderDash && e.borderDash.length;\n    return !(t._decimated || t._loop || e.tension || \"monotone\" === e.cubicInterpolationMode || e.stepped || i) ? To : Oo;\n  }\n\n  So.id = \"arc\", So.defaults = {\n    borderAlign: \"center\",\n    borderColor: \"#fff\",\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    angle: void 0\n  }, So.defaultRoutes = {\n    backgroundColor: \"backgroundColor\"\n  };\n  var Lo = \"function\" == typeof Path2D;\n\n  function Ro(t, e, i, n) {\n    Lo && 1 === e.segments.length ? function (t, e, i, n) {\n      var o = e._path;\n      o || (o = e._path = new Path2D(), e.path(o, i, n) && o.closePath()), Po(t, e.options), t.stroke(o);\n    }(t, e, i, n) : function (t, e, i, n) {\n      var o = e.segments,\n          s = e.options,\n          a = Ao(e);\n\n      var _iterator17 = _createForOfIteratorHelper(o),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var _r11 = _step17.value;\n          Po(t, s, _r11.style), t.beginPath(), a(t, e, _r11, {\n            start: i,\n            end: i + n - 1\n          }) && t.closePath(), t.stroke();\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n    }(t, e, i, n);\n  }\n\n  var Eo = /*#__PURE__*/function (_Ei3) {\n    _inherits(Eo, _Ei3);\n\n    var _super13 = _createSuper(Eo);\n\n    function Eo(t) {\n      var _this8;\n\n      _classCallCheck(this, Eo);\n\n      _this8 = _super13.call(this), _this8.animated = !0, _this8.options = void 0, _this8._loop = void 0, _this8._fullLoop = void 0, _this8._path = void 0, _this8._points = void 0, _this8._segments = void 0, _this8._decimated = !1, _this8._pointsUpdated = !1, t && Object.assign(_assertThisInitialized(_this8), t);\n      return _this8;\n    }\n\n    _createClass(Eo, [{\n      key: \"updateControlPoints\",\n      value: function updateControlPoints(t, e) {\n        var i = this,\n            n = i.options;\n\n        if ((n.tension || \"monotone\" === n.cubicInterpolationMode) && !n.stepped && !i._pointsUpdated) {\n          var _o28 = n.spanGaps ? i._loop : i._fullLoop;\n\n          gn(i._points, n, t, _o28, e), i._pointsUpdated = !0;\n        }\n      }\n    }, {\n      key: \"points\",\n      get: function get() {\n        return this._points;\n      },\n      set: function set(t) {\n        var e = this;\n        e._points = t, delete e._segments, delete e._path, e._pointsUpdated = !1;\n      }\n    }, {\n      key: \"segments\",\n      get: function get() {\n        return this._segments || (this._segments = Sn(this, this.options.segment));\n      }\n    }, {\n      key: \"first\",\n      value: function first() {\n        var t = this.segments,\n            e = this.points;\n        return t.length && e[t[0].start];\n      }\n    }, {\n      key: \"last\",\n      value: function last() {\n        var t = this.segments,\n            e = this.points,\n            i = t.length;\n        return i && e[t[i - 1].end];\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(t, e) {\n        var i = this,\n            n = i.options,\n            o = t[e],\n            s = i.points,\n            a = kn(i, {\n          property: e,\n          start: o,\n          end: o\n        });\n        if (!a.length) return;\n\n        var r = [],\n            l = function (t) {\n          return t.stepped ? mn : t.tension || \"monotone\" === t.cubicInterpolationMode ? xn : pn;\n        }(n);\n\n        var c, h;\n\n        for (c = 0, h = a.length; c < h; ++c) {\n          var _a$c = a[c],\n              _i49 = _a$c.start,\n              _h16 = _a$c.end,\n              _d7 = s[_i49],\n              _u7 = s[_h16];\n\n          if (_d7 === _u7) {\n            r.push(_d7);\n            continue;\n          }\n\n          var _f5 = l(_d7, _u7, Math.abs((o - _d7[e]) / (_u7[e] - _d7[e])), n.stepped);\n\n          _f5[e] = t[e], r.push(_f5);\n        }\n\n        return 1 === r.length ? r[0] : r;\n      }\n    }, {\n      key: \"pathSegment\",\n      value: function pathSegment(t, e, i) {\n        return Ao(this)(t, this, e, i);\n      }\n    }, {\n      key: \"path\",\n      value: function path(t, e, i) {\n        var n = this,\n            o = n.segments,\n            s = Ao(n);\n        var a = n._loop;\n        e = e || 0, i = i || n.points.length - e;\n\n        var _iterator18 = _createForOfIteratorHelper(o),\n            _step18;\n\n        try {\n          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n            var _r12 = _step18.value;\n            a &= s(t, n, _r12, {\n              start: e,\n              end: e + i - 1\n            });\n          }\n        } catch (err) {\n          _iterator18.e(err);\n        } finally {\n          _iterator18.f();\n        }\n\n        return !!a;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t, e, i, n) {\n        var o = this,\n            s = o.options || {};\n        (o.points || []).length && s.borderWidth && (t.save(), Ro(t, o, i, n), t.restore(), o.animated && (o._pointsUpdated = !1, o._path = void 0));\n      }\n    }]);\n\n    return Eo;\n  }(Ei);\n\n  function Io(t, e, i, n) {\n    var o = t.options,\n        _t$getProps = t.getProps([i], n),\n        s = _t$getProps[i];\n\n    return Math.abs(e - s) < o.radius + o.hitRadius;\n  }\n\n  Eo.id = \"line\", Eo.defaults = {\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderWidth: 3,\n    capBezierPoints: !0,\n    cubicInterpolationMode: \"default\",\n    fill: !1,\n    spanGaps: !1,\n    stepped: !1,\n    tension: 0\n  }, Eo.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n  }, Eo.descriptors = {\n    _scriptable: !0,\n    _indexable: function _indexable(t) {\n      return \"borderDash\" !== t && \"fill\" !== t;\n    }\n  };\n\n  var zo = /*#__PURE__*/function (_Ei4) {\n    _inherits(zo, _Ei4);\n\n    var _super14 = _createSuper(zo);\n\n    function zo(t) {\n      var _this9;\n\n      _classCallCheck(this, zo);\n\n      _this9 = _super14.call(this), _this9.options = void 0, _this9.parsed = void 0, _this9.skip = void 0, _this9.stop = void 0, t && Object.assign(_assertThisInitialized(_this9), t);\n      return _this9;\n    }\n\n    _createClass(zo, [{\n      key: \"inRange\",\n      value: function inRange(t, e, i) {\n        var n = this.options,\n            _this$getProps4 = this.getProps([\"x\", \"y\"], i),\n            o = _this$getProps4.x,\n            s = _this$getProps4.y;\n\n        return Math.pow(t - o, 2) + Math.pow(e - s, 2) < Math.pow(n.hitRadius + n.radius, 2);\n      }\n    }, {\n      key: \"inXRange\",\n      value: function inXRange(t, e) {\n        return Io(this, t, \"x\", e);\n      }\n    }, {\n      key: \"inYRange\",\n      value: function inYRange(t, e) {\n        return Io(this, t, \"y\", e);\n      }\n    }, {\n      key: \"getCenterPoint\",\n      value: function getCenterPoint(t) {\n        var _this$getProps5 = this.getProps([\"x\", \"y\"], t),\n            e = _this$getProps5.x,\n            i = _this$getProps5.y;\n\n        return {\n          x: e,\n          y: i\n        };\n      }\n    }, {\n      key: \"size\",\n      value: function size(t) {\n        var e = (t = t || this.options || {}).radius || 0;\n        e = Math.max(e, e && t.hoverRadius || 0);\n        return 2 * (e + (e && t.borderWidth || 0));\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this,\n            i = e.options;\n        e.skip || i.radius < .1 || (t.strokeStyle = i.borderColor, t.lineWidth = i.borderWidth, t.fillStyle = i.backgroundColor, Kt(t, i, e.x, e.y));\n      }\n    }, {\n      key: \"getRange\",\n      value: function getRange() {\n        var t = this.options || {};\n        return t.radius + t.hitRadius;\n      }\n    }]);\n\n    return zo;\n  }(Ei);\n\n  function Fo(t, e) {\n    var _t$getProps2 = t.getProps([\"x\", \"y\", \"base\", \"width\", \"height\"], e),\n        i = _t$getProps2.x,\n        n = _t$getProps2.y,\n        o = _t$getProps2.base,\n        s = _t$getProps2.width,\n        a = _t$getProps2.height;\n\n    var r, l, c, h, d;\n    return t.horizontal ? (d = a / 2, r = Math.min(i, o), l = Math.max(i, o), c = n - d, h = n + d) : (d = s / 2, r = i - d, l = i + d, c = Math.min(n, o), h = Math.max(n, o)), {\n      left: r,\n      top: c,\n      right: l,\n      bottom: h\n    };\n  }\n\n  function Vo(t) {\n    var e = t.options.borderSkipped;\n    var i = {};\n    return e ? (e = t.horizontal ? Bo(e, \"left\", \"right\", t.base > t.x) : Bo(e, \"bottom\", \"top\", t.base < t.y), i[e] = !0, i) : i;\n  }\n\n  function Bo(t, e, i, n) {\n    var o, s, a;\n    return n ? (a = i, t = Wo(t = (o = t) === (s = e) ? a : o === a ? s : o, i, e)) : t = Wo(t, e, i), t;\n  }\n\n  function Wo(t, e, i) {\n    return \"start\" === t ? e : \"end\" === t ? i : t;\n  }\n\n  function Ho(t, e, i, n) {\n    return t ? 0 : Math.max(Math.min(e, n), i);\n  }\n\n  function No(t) {\n    var e = Fo(t),\n        i = e.right - e.left,\n        n = e.bottom - e.top,\n        o = function (t, e, i) {\n      var n = t.options.borderWidth,\n          o = Vo(t),\n          s = Ee(n);\n      return {\n        t: Ho(o.top, s.top, 0, i),\n        r: Ho(o.right, s.right, 0, e),\n        b: Ho(o.bottom, s.bottom, 0, i),\n        l: Ho(o.left, s.left, 0, e)\n      };\n    }(t, i / 2, n / 2),\n        s = function (t, e, i) {\n      var _t$getProps3 = t.getProps([\"enableBorderRadius\"]),\n          n = _t$getProps3.enableBorderRadius,\n          o = t.options.borderRadius,\n          s = Ie(o),\n          a = Math.min(e, i),\n          r = Vo(t),\n          l = n || U(o);\n\n      return {\n        topLeft: Ho(!l || r.top || r.left, s.topLeft, 0, a),\n        topRight: Ho(!l || r.top || r.right, s.topRight, 0, a),\n        bottomLeft: Ho(!l || r.bottom || r.left, s.bottomLeft, 0, a),\n        bottomRight: Ho(!l || r.bottom || r.right, s.bottomRight, 0, a)\n      };\n    }(t, i / 2, n / 2);\n\n    return {\n      outer: {\n        x: e.left,\n        y: e.top,\n        w: i,\n        h: n,\n        radius: s\n      },\n      inner: {\n        x: e.left + o.l,\n        y: e.top + o.t,\n        w: i - o.l - o.r,\n        h: n - o.t - o.b,\n        radius: {\n          topLeft: Math.max(0, s.topLeft - Math.max(o.t, o.l)),\n          topRight: Math.max(0, s.topRight - Math.max(o.t, o.r)),\n          bottomLeft: Math.max(0, s.bottomLeft - Math.max(o.b, o.l)),\n          bottomRight: Math.max(0, s.bottomRight - Math.max(o.b, o.r))\n        }\n      }\n    };\n  }\n\n  function jo(t, e, i, n) {\n    var o = null === e,\n        s = null === i,\n        a = t && !(o && s) && Fo(t, n);\n    return a && (o || e >= a.left && e <= a.right) && (s || i >= a.top && i <= a.bottom);\n  }\n\n  function $o(t, e) {\n    t.rect(e.x, e.y, e.w, e.h);\n  }\n\n  zo.id = \"point\", zo.defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: \"circle\",\n    radius: 3,\n    rotation: 0\n  }, zo.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n  };\n\n  var Yo = /*#__PURE__*/function (_Ei5) {\n    _inherits(Yo, _Ei5);\n\n    var _super15 = _createSuper(Yo);\n\n    function Yo(t) {\n      var _this10;\n\n      _classCallCheck(this, Yo);\n\n      _this10 = _super15.call(this), _this10.options = void 0, _this10.horizontal = void 0, _this10.base = void 0, _this10.width = void 0, _this10.height = void 0, t && Object.assign(_assertThisInitialized(_this10), t);\n      return _this10;\n    }\n\n    _createClass(Yo, [{\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this.options,\n            _No = No(this),\n            i = _No.inner,\n            n = _No.outer,\n            o = (s = n.radius).topLeft || s.topRight || s.bottomLeft || s.bottomRight ? ie : $o;\n\n        var s;\n        t.save(), n.w === i.w && n.h === i.h || (t.beginPath(), o(t, n), t.clip(), o(t, i), t.fillStyle = e.borderColor, t.fill(\"evenodd\")), t.beginPath(), o(t, i), t.fillStyle = e.backgroundColor, t.fill(), t.restore();\n      }\n    }, {\n      key: \"inRange\",\n      value: function inRange(t, e, i) {\n        return jo(this, t, e, i);\n      }\n    }, {\n      key: \"inXRange\",\n      value: function inXRange(t, e) {\n        return jo(this, t, null, e);\n      }\n    }, {\n      key: \"inYRange\",\n      value: function inYRange(t, e) {\n        return jo(this, null, t, e);\n      }\n    }, {\n      key: \"getCenterPoint\",\n      value: function getCenterPoint(t) {\n        var _this$getProps6 = this.getProps([\"x\", \"y\", \"base\", \"horizontal\"], t),\n            e = _this$getProps6.x,\n            i = _this$getProps6.y,\n            n = _this$getProps6.base,\n            o = _this$getProps6.horizontal;\n\n        return {\n          x: o ? (e + n) / 2 : e,\n          y: o ? i : (i + n) / 2\n        };\n      }\n    }, {\n      key: \"getRange\",\n      value: function getRange(t) {\n        return \"x\" === t ? this.width / 2 : this.height / 2;\n      }\n    }]);\n\n    return Yo;\n  }(Ei);\n\n  Yo.id = \"bar\", Yo.defaults = {\n    borderSkipped: \"start\",\n    borderWidth: 0,\n    borderRadius: 0,\n    enableBorderRadius: !0,\n    pointStyle: void 0\n  }, Yo.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n  };\n  var Uo = Object.freeze({\n    __proto__: null,\n    ArcElement: So,\n    LineElement: Eo,\n    PointElement: zo,\n    BarElement: Yo\n  });\n\n  function Xo(t) {\n    if (t._decimated) {\n      var _e42 = t._data;\n      delete t._decimated, delete t._data, Object.defineProperty(t, \"data\", {\n        value: _e42\n      });\n    }\n  }\n\n  function qo(t) {\n    t.data.datasets.forEach(function (t) {\n      Xo(t);\n    });\n  }\n\n  var Ko = {\n    id: \"decimation\",\n    defaults: {\n      algorithm: \"min-max\",\n      enabled: !1\n    },\n    beforeElementsUpdate: function beforeElementsUpdate(t, e, i) {\n      if (!i.enabled) return void qo(t);\n      var n = t.width;\n      t.data.datasets.forEach(function (e, o) {\n        var s = e._data,\n            a = e.indexAxis,\n            r = t.getDatasetMeta(o),\n            l = s || e.data;\n        if (\"y\" === Ve([a, t.options.indexAxis])) return;\n        if (\"line\" !== r.type) return;\n        var c = t.scales[r.xAxisID];\n        if (\"linear\" !== c.type && \"time\" !== c.type) return;\n        if (t.options.parsing) return;\n\n        var h,\n            _ref12 = function (t, e) {\n          var i = e.length;\n          var n,\n              o = 0;\n\n          var s = t.iScale,\n              _s$getUserBounds = s.getUserBounds(),\n              a = _s$getUserBounds.min,\n              r = _s$getUserBounds.max,\n              l = _s$getUserBounds.minDefined,\n              c = _s$getUserBounds.maxDefined;\n\n          return l && (o = Nt(oe(e, s.axis, a).lo, 0, i - 1)), n = c ? Nt(oe(e, s.axis, r).hi + 1, o, i) - o : i - o, {\n            start: o,\n            count: n\n          };\n        }(r, l),\n            d = _ref12.start,\n            u = _ref12.count;\n\n        if (u <= 4 * n) Xo(e);else {\n          switch ($(s) && (e._data = l, delete e.data, Object.defineProperty(e, \"data\", {\n            configurable: !0,\n            enumerable: !0,\n            get: function get() {\n              return this._decimated;\n            },\n            set: function set(t) {\n              this._data = t;\n            }\n          })), i.algorithm) {\n            case \"lttb\":\n              h = function (t, e, i, n, o) {\n                var s = o.samples || n;\n                if (s >= i) return t.slice(e, e + i);\n                var a = [],\n                    r = (i - 2) / (s - 2);\n                var l = 0;\n                var c = e + i - 1;\n                var h,\n                    d,\n                    u,\n                    f,\n                    g,\n                    p = e;\n\n                for (a[l++] = t[p], h = 0; h < s - 2; h++) {\n                  var _n35 = void 0,\n                      _o29 = 0,\n                      _s18 = 0;\n\n                  var _c15 = Math.floor((h + 1) * r) + 1 + e,\n                      _m3 = Math.min(Math.floor((h + 2) * r) + 1, i) + e,\n                      _x3 = _m3 - _c15;\n\n                  for (_n35 = _c15; _n35 < _m3; _n35++) {\n                    _o29 += t[_n35].x, _s18 += t[_n35].y;\n                  }\n\n                  _o29 /= _x3, _s18 /= _x3;\n\n                  var _b4 = Math.floor(h * r) + 1 + e,\n                      _3 = Math.floor((h + 1) * r) + 1 + e,\n                      _t$p = t[p],\n                      _y2 = _t$p.x,\n                      _v = _t$p.y;\n\n                  for (u = f = -1, _n35 = _b4; _n35 < _3; _n35++) {\n                    f = .5 * Math.abs((_y2 - _o29) * (t[_n35].y - _v) - (_y2 - t[_n35].x) * (_s18 - _v)), f > u && (u = f, d = t[_n35], g = _n35);\n                  }\n\n                  a[l++] = d, p = g;\n                }\n\n                return a[l++] = t[c], a;\n              }(l, d, u, n, i);\n\n              break;\n\n            case \"min-max\":\n              h = function (t, e, i, n) {\n                var o,\n                    s,\n                    a,\n                    r,\n                    l,\n                    c,\n                    h,\n                    d,\n                    u,\n                    f,\n                    g = 0,\n                    p = 0;\n\n                var m = [],\n                    x = e + i - 1,\n                    b = t[e].x,\n                    _ = t[x].x - b;\n\n                for (o = e; o < e + i; ++o) {\n                  s = t[o], a = (s.x - b) / _ * n, r = s.y;\n\n                  var _e43 = 0 | a;\n\n                  if (_e43 === l) r < u ? (u = r, c = o) : r > f && (f = r, h = o), g = (p * g + s.x) / ++p;else {\n                    var _i50 = o - 1;\n\n                    if (!$(c) && !$(h)) {\n                      var _e44 = Math.min(c, h),\n                          _n36 = Math.max(c, h);\n\n                      _e44 !== d && _e44 !== _i50 && m.push(_objectSpread(_objectSpread({}, t[_e44]), {}, {\n                        x: g\n                      })), _n36 !== d && _n36 !== _i50 && m.push(_objectSpread(_objectSpread({}, t[_n36]), {}, {\n                        x: g\n                      }));\n                    }\n\n                    o > 0 && _i50 !== d && m.push(t[_i50]), m.push(s), l = _e43, p = 0, u = f = r, c = h = d = o;\n                  }\n                }\n\n                return m;\n              }(l, d, u, n);\n\n              break;\n\n            default:\n              throw new Error(\"Unsupported decimation algorithm '\".concat(i.algorithm, \"'\"));\n          }\n\n          e._decimated = h;\n        }\n      });\n    },\n    destroy: function destroy(t) {\n      qo(t);\n    }\n  };\n\n  function Go(t, e, i) {\n    var n = function (t) {\n      var e = t.options,\n          i = e.fill;\n      var n = K(i && i.target, i);\n      return void 0 === n && (n = !!e.backgroundColor), !1 !== n && null !== n && (!0 === n ? \"origin\" : n);\n    }(t);\n\n    if (U(n)) return !isNaN(n.value) && n;\n    var o = parseFloat(n);\n    return X(o) && Math.floor(o) === o ? (\"-\" !== n[0] && \"+\" !== n[0] || (o = e + o), !(o === e || o < 0 || o >= i) && o) : [\"origin\", \"start\", \"end\", \"stack\"].indexOf(n) >= 0 && n;\n  }\n\n  var Zo = /*#__PURE__*/function () {\n    function Zo(t) {\n      _classCallCheck(this, Zo);\n\n      this.x = t.x, this.y = t.y, this.radius = t.radius;\n    }\n\n    _createClass(Zo, [{\n      key: \"pathSegment\",\n      value: function pathSegment(t, e, i) {\n        var n = this.x,\n            o = this.y,\n            s = this.radius;\n        return e = e || {\n          start: 0,\n          end: _t\n        }, t.arc(n, o, s, e.end, e.start, !0), !i.bounds;\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(t) {\n        var e = this.x,\n            i = this.y,\n            n = this.radius,\n            o = t.angle;\n        return {\n          x: e + Math.cos(o) * n,\n          y: i + Math.sin(o) * n,\n          angle: o\n        };\n      }\n    }]);\n\n    return Zo;\n  }();\n\n  function Qo(t) {\n    return (t.scale || {}).getPointPositionForValue ? function (t) {\n      var e = t.scale,\n          i = t.fill,\n          n = e.options,\n          o = e.getLabels().length,\n          s = [],\n          a = n.reverse ? e.max : e.min,\n          r = n.reverse ? e.min : e.max;\n      var l, c, h;\n      if (h = \"start\" === i ? a : \"end\" === i ? r : U(i) ? i.value : e.getBaseValue(), n.grid.circular) return c = e.getPointPositionForValue(0, a), new Zo({\n        x: c.x,\n        y: c.y,\n        radius: e.getDistanceFromCenterForValue(h)\n      });\n\n      for (l = 0; l < o; ++l) {\n        s.push(e.getPointPositionForValue(l, h));\n      }\n\n      return s;\n    }(t) : function (t) {\n      var _t$scale = t.scale,\n          e = _t$scale === void 0 ? {} : _t$scale,\n          i = t.fill;\n      var n,\n          o = null;\n      return \"start\" === i ? o = e.bottom : \"end\" === i ? o = e.top : U(i) ? o = e.getPixelForValue(i.value) : e.getBasePixel && (o = e.getBasePixel()), X(o) ? (n = e.isHorizontal(), {\n        x: n ? o : null,\n        y: n ? null : o\n      }) : null;\n    }(t);\n  }\n\n  function Jo(t) {\n    var e = t.chart,\n        i = t.scale,\n        n = t.index,\n        o = t.line,\n        s = [],\n        a = o.segments,\n        r = o.points,\n        l = function (t, e) {\n      var i = [],\n          n = t.getSortedVisibleDatasetMetas();\n\n      for (var _t42 = 0; _t42 < n.length; _t42++) {\n        var _o30 = n[_t42];\n        if (_o30.index === e) break;\n        ts(_o30) && i.unshift(_o30.dataset);\n      }\n\n      return i;\n    }(e, n);\n\n    l.push(ns({\n      x: null,\n      y: i.bottom\n    }, o));\n\n    for (var _t43 = 0; _t43 < a.length; _t43++) {\n      var _e45 = a[_t43];\n\n      for (var _t44 = _e45.start; _t44 <= _e45.end; _t44++) {\n        es(s, r[_t44], l);\n      }\n    }\n\n    return new Eo({\n      points: s,\n      options: {}\n    });\n  }\n\n  var ts = function ts(t) {\n    return \"line\" === t.type && !t.hidden;\n  };\n\n  function es(t, e, i) {\n    var n = [];\n\n    for (var _o31 = 0; _o31 < i.length; _o31++) {\n      var _s19 = i[_o31],\n          _is = is(_s19, e, \"x\"),\n          _a20 = _is.first,\n          _r13 = _is.last,\n          _l16 = _is.point;\n\n      if (!(!_l16 || _a20 && _r13)) if (_a20) n.unshift(_l16);else if (t.push(_l16), !_r13) break;\n    }\n\n    t.push.apply(t, n);\n  }\n\n  function is(t, e, i) {\n    var n = t.interpolate(e, i);\n    if (!n) return {};\n    var o = n[i],\n        s = t.segments,\n        a = t.points;\n    var r = !1,\n        l = !1;\n\n    for (var _t45 = 0; _t45 < s.length; _t45++) {\n      var _e46 = s[_t45],\n          _n37 = a[_e46.start][i],\n          _c16 = a[_e46.end][i];\n\n      if (o >= _n37 && o <= _c16) {\n        r = o === _n37, l = o === _c16;\n        break;\n      }\n    }\n\n    return {\n      first: r,\n      last: l,\n      point: n\n    };\n  }\n\n  function ns(t, e) {\n    var i = [],\n        n = !1;\n    return Y(t) ? (n = !0, i = t) : i = function (t, e) {\n      var _ref13 = t || {},\n          _ref13$x = _ref13.x,\n          i = _ref13$x === void 0 ? null : _ref13$x,\n          _ref13$y = _ref13.y,\n          n = _ref13$y === void 0 ? null : _ref13$y,\n          o = e.points,\n          s = [];\n\n      return e.segments.forEach(function (t) {\n        var e = o[t.start],\n            a = o[t.end];\n        null !== n ? (s.push({\n          x: e.x,\n          y: n\n        }), s.push({\n          x: a.x,\n          y: n\n        })) : null !== i && (s.push({\n          x: i,\n          y: e.y\n        }), s.push({\n          x: i,\n          y: a.y\n        }));\n      }), s;\n    }(t, e), i.length ? new Eo({\n      points: i,\n      options: {\n        tension: 0\n      },\n      _loop: n,\n      _fullLoop: n\n    }) : null;\n  }\n\n  function os(t, e, i) {\n    var n = t[e].fill;\n    var o = [e];\n    var s;\n    if (!i) return n;\n\n    for (; !1 !== n && -1 === o.indexOf(n);) {\n      if (!X(n)) return n;\n      if (s = t[n], !s) return !1;\n      if (s.visible) return n;\n      o.push(n), n = s.fill;\n    }\n\n    return !1;\n  }\n\n  function ss(t, e, i) {\n    t.beginPath(), e.path(t), t.lineTo(e.last().x, i), t.lineTo(e.first().x, i), t.closePath(), t.clip();\n  }\n\n  function as(t, e, i, n) {\n    if (n) return;\n    var o = e[t],\n        s = i[t];\n    return \"angle\" === t && (o = Wt(o), s = Wt(s)), {\n      property: t,\n      start: o,\n      end: s\n    };\n  }\n\n  function rs(t, e, i, n) {\n    return t && e ? n(t[i], e[i]) : t ? t[i] : e ? e[i] : 0;\n  }\n\n  function ls(t, e, i) {\n    var _e$chart$chartArea = e.chart.chartArea,\n        n = _e$chart$chartArea.top,\n        o = _e$chart$chartArea.bottom,\n        _ref14 = i || {},\n        s = _ref14.property,\n        a = _ref14.start,\n        r = _ref14.end;\n\n    \"x\" === s && (t.beginPath(), t.rect(a, n, r - a, o - n), t.clip());\n  }\n\n  function cs(t, e, i, n) {\n    var o = e.interpolate(i, n);\n    o && t.lineTo(o.x, o.y);\n  }\n\n  function hs(t, e) {\n    var i = e.line,\n        n = e.target,\n        o = e.property,\n        s = e.color,\n        a = e.scale,\n        r = function (t, e, i) {\n      var n = t.segments,\n          o = t.points,\n          s = e.points,\n          a = [];\n\n      var _iterator19 = _createForOfIteratorHelper(n),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _t46 = _step19.value;\n\n          var _n38 = as(i, o[_t46.start], o[_t46.end], _t46.loop);\n\n          if (!e.segments) {\n            a.push({\n              source: _t46,\n              target: _n38,\n              start: o[_t46.start],\n              end: o[_t46.end]\n            });\n            continue;\n          }\n\n          var _r14 = kn(e, _n38);\n\n          var _iterator20 = _createForOfIteratorHelper(_r14),\n              _step20;\n\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var _e47 = _step20.value;\n\n              var _r15 = as(i, s[_e47.start], s[_e47.end], _e47.loop),\n                  _l17 = Mn(_t46, o, _r15);\n\n              var _iterator21 = _createForOfIteratorHelper(_l17),\n                  _step21;\n\n              try {\n                for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                  var _t47 = _step21.value;\n                  a.push({\n                    source: _t47,\n                    target: _e47,\n                    start: _defineProperty({}, i, rs(_n38, _r15, \"start\", Math.max)),\n                    end: _defineProperty({}, i, rs(_n38, _r15, \"end\", Math.min))\n                  });\n                }\n              } catch (err) {\n                _iterator21.e(err);\n              } finally {\n                _iterator21.f();\n              }\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      return a;\n    }(i, n, o);\n\n    var _iterator22 = _createForOfIteratorHelper(r),\n        _step22;\n\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var _step22$value = _step22.value,\n            _e48 = _step22$value.source,\n            _l18 = _step22$value.target,\n            _c17 = _step22$value.start,\n            _h17 = _step22$value.end;\n        var _e48$style = _e48.style;\n        _e48$style = _e48$style === void 0 ? {} : _e48$style;\n\n        var _e48$style$background = _e48$style.backgroundColor,\n            _r16 = _e48$style$background === void 0 ? s : _e48$style$background;\n\n        t.save(), t.fillStyle = _r16, ls(t, a, as(o, _c17, _h17)), t.beginPath();\n\n        var _d8 = !!i.pathSegment(t, _e48);\n\n        _d8 ? t.closePath() : cs(t, n, _h17, o);\n\n        var _u8 = !!n.pathSegment(t, _l18, {\n          move: _d8,\n          reverse: !0\n        }),\n            _f6 = _d8 && _u8;\n\n        _f6 || cs(t, n, _c17, o), t.closePath(), t.fill(_f6 ? \"evenodd\" : \"nonzero\"), t.restore();\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n  }\n\n  function ds(t, e, i) {\n    var n = function (t) {\n      var e = t.chart,\n          i = t.fill,\n          n = t.line;\n      if (X(i)) return function (t, e) {\n        var i = t.getDatasetMeta(e);\n        return i && t.isDatasetVisible(e) ? i.dataset : null;\n      }(e, i);\n      if (\"stack\" === i) return Jo(t);\n      var o = Qo(t);\n      return o instanceof Zo ? o : ns(o, n);\n    }(e),\n        o = e.line,\n        s = e.scale,\n        a = e.axis,\n        r = o.options,\n        l = r.fill,\n        c = r.backgroundColor,\n        _ref15 = l || {},\n        _ref15$above = _ref15.above,\n        h = _ref15$above === void 0 ? c : _ref15$above,\n        _ref15$below = _ref15.below,\n        d = _ref15$below === void 0 ? c : _ref15$below;\n\n    n && o.points.length && (Zt(t, i), function (t, e) {\n      var i = e.line,\n          n = e.target,\n          o = e.above,\n          s = e.below,\n          a = e.area,\n          r = e.scale,\n          l = i._loop ? \"angle\" : e.axis;\n      t.save(), \"x\" === l && s !== o && (ss(t, n, a.top), hs(t, {\n        line: i,\n        target: n,\n        color: o,\n        scale: r,\n        property: l\n      }), t.restore(), t.save(), ss(t, n, a.bottom)), hs(t, {\n        line: i,\n        target: n,\n        color: s,\n        scale: r,\n        property: l\n      }), t.restore();\n    }(t, {\n      line: o,\n      target: n,\n      above: h,\n      below: d,\n      area: i,\n      scale: s,\n      axis: a\n    }), Qt(t));\n  }\n\n  var us = {\n    id: \"filler\",\n    afterDatasetsUpdate: function afterDatasetsUpdate(t, e, i) {\n      var n = (t.data.datasets || []).length,\n          o = [];\n      var s, a, r, l;\n\n      for (a = 0; a < n; ++a) {\n        s = t.getDatasetMeta(a), r = s.dataset, l = null, r && r.options && r instanceof Eo && (l = {\n          visible: t.isDatasetVisible(a),\n          index: a,\n          fill: Go(r, a, n),\n          chart: t,\n          axis: s.controller.options.indexAxis,\n          scale: s.vScale,\n          line: r\n        }), s.$filler = l, o.push(l);\n      }\n\n      for (a = 0; a < n; ++a) {\n        l = o[a], l && !1 !== l.fill && (l.fill = os(o, a, i.propagate));\n      }\n    },\n    beforeDraw: function beforeDraw(t, e, i) {\n      var n = \"beforeDraw\" === i.drawTime,\n          o = t.getSortedVisibleDatasetMetas(),\n          s = t.chartArea;\n\n      for (var _e49 = o.length - 1; _e49 >= 0; --_e49) {\n        var _i51 = o[_e49].$filler;\n        _i51 && (_i51.line.updateControlPoints(s, _i51.axis), n && ds(t.ctx, _i51, s));\n      }\n    },\n    beforeDatasetsDraw: function beforeDatasetsDraw(t, e, i) {\n      if (\"beforeDatasetsDraw\" !== i.drawTime) return;\n      var n = t.getSortedVisibleDatasetMetas();\n\n      for (var _e50 = n.length - 1; _e50 >= 0; --_e50) {\n        var _i52 = n[_e50].$filler;\n        _i52 && ds(t.ctx, _i52, t.chartArea);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(t, e, i) {\n      var n = e.meta.$filler;\n      n && !1 !== n.fill && \"beforeDatasetDraw\" === i.drawTime && ds(t.ctx, n, t.chartArea);\n    },\n    defaults: {\n      propagate: !0,\n      drawTime: \"beforeDatasetDraw\"\n    }\n  };\n\n  var fs = function fs(t, e) {\n    var _t$boxHeight = t.boxHeight,\n        i = _t$boxHeight === void 0 ? e : _t$boxHeight,\n        _t$boxWidth = t.boxWidth,\n        n = _t$boxWidth === void 0 ? e : _t$boxWidth;\n    return t.usePointStyle && (i = Math.min(i, e), n = Math.min(n, e)), {\n      boxWidth: n,\n      boxHeight: i,\n      itemHeight: Math.max(e, i)\n    };\n  };\n\n  var gs = /*#__PURE__*/function (_Ei6) {\n    _inherits(gs, _Ei6);\n\n    var _super16 = _createSuper(gs);\n\n    function gs(t) {\n      var _this11;\n\n      _classCallCheck(this, gs);\n\n      _this11 = _super16.call(this), _this11._added = !1, _this11.legendHitBoxes = [], _this11._hoveredItem = null, _this11.doughnutMode = !1, _this11.chart = t.chart, _this11.options = t.options, _this11.ctx = t.ctx, _this11.legendItems = void 0, _this11.columnSizes = void 0, _this11.lineWidths = void 0, _this11.maxHeight = void 0, _this11.maxWidth = void 0, _this11.top = void 0, _this11.bottom = void 0, _this11.left = void 0, _this11.right = void 0, _this11.height = void 0, _this11.width = void 0, _this11._margins = void 0, _this11.position = void 0, _this11.weight = void 0, _this11.fullSize = void 0;\n      return _this11;\n    }\n\n    _createClass(gs, [{\n      key: \"update\",\n      value: function update(t, e, i) {\n        var n = this;\n        n.maxWidth = t, n.maxHeight = e, n._margins = i, n.setDimensions(), n.buildLabels(), n.fit();\n      }\n    }, {\n      key: \"setDimensions\",\n      value: function setDimensions() {\n        var t = this;\n        t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height);\n      }\n    }, {\n      key: \"buildLabels\",\n      value: function buildLabels() {\n        var t = this,\n            e = t.options.labels || {};\n        var i = Q(e.generateLabels, [t.chart], t) || [];\n        e.filter && (i = i.filter(function (i) {\n          return e.filter(i, t.chart.data);\n        })), e.sort && (i = i.sort(function (i, n) {\n          return e.sort(i, n, t.chart.data);\n        })), t.options.reverse && i.reverse(), t.legendItems = i;\n      }\n    }, {\n      key: \"fit\",\n      value: function fit() {\n        var t = this,\n            e = t.options,\n            i = t.ctx;\n        if (!e.display) return void (t.width = t.height = 0);\n\n        var n = e.labels,\n            o = Fe(n.font),\n            s = o.size,\n            a = t._computeTitleHeight(),\n            _fs = fs(n, s),\n            r = _fs.boxWidth,\n            l = _fs.itemHeight;\n\n        var c, h;\n        i.font = o.string, t.isHorizontal() ? (c = t.maxWidth, h = t._fitRows(a, s, r, l) + 10) : (h = t.maxHeight, c = t._fitCols(a, s, r, l) + 10), t.width = Math.min(c, e.maxWidth || t.maxWidth), t.height = Math.min(h, e.maxHeight || t.maxHeight);\n      }\n    }, {\n      key: \"_fitRows\",\n      value: function _fitRows(t, e, i, n) {\n        var o = this,\n            s = o.ctx,\n            a = o.maxWidth,\n            r = o.options.labels.padding,\n            l = o.legendHitBoxes = [],\n            c = o.lineWidths = [0],\n            h = n + r;\n        var d = t;\n        s.textAlign = \"left\", s.textBaseline = \"middle\";\n        var u = -1,\n            f = -h;\n        return o.legendItems.forEach(function (t, o) {\n          var g = i + e / 2 + s.measureText(t.text).width;\n          (0 === o || c[c.length - 1] + g + 2 * r > a) && (d += h, c[c.length - (o > 0 ? 0 : 1)] = 0, f += h, u++), l[o] = {\n            left: 0,\n            top: f,\n            row: u,\n            width: g,\n            height: n\n          }, c[c.length - 1] += g + r;\n        }), d;\n      }\n    }, {\n      key: \"_fitCols\",\n      value: function _fitCols(t, e, i, n) {\n        var o = this,\n            s = o.ctx,\n            a = o.maxHeight,\n            r = o.options.labels.padding,\n            l = o.legendHitBoxes = [],\n            c = o.columnSizes = [],\n            h = a - t;\n        var d = r,\n            u = 0,\n            f = 0,\n            g = 0,\n            p = 0,\n            m = 0;\n        return o.legendItems.forEach(function (t, o) {\n          var a = i + e / 2 + s.measureText(t.text).width;\n          o > 0 && f + e + 2 * r > h && (d += u + r, c.push({\n            width: u,\n            height: f\n          }), g += u + r, m++, p = 0, u = f = 0), u = Math.max(u, a), f += e + r, l[o] = {\n            left: g,\n            top: p,\n            col: m,\n            width: a,\n            height: n\n          }, p += n + r;\n        }), d += u, c.push({\n          width: u,\n          height: f\n        }), d;\n      }\n    }, {\n      key: \"adjustHitBoxes\",\n      value: function adjustHitBoxes() {\n        var t = this;\n        if (!t.options.display) return;\n\n        var e = t._computeTitleHeight(),\n            i = t.legendHitBoxes,\n            _t$options2 = t.options,\n            n = _t$options2.align,\n            s = _t$options2.labels.padding;\n\n        if (this.isHorizontal()) {\n          var _a21 = 0,\n              _r17 = o(n, t.left + s, t.right - t.lineWidths[_a21]);\n\n          var _iterator23 = _createForOfIteratorHelper(i),\n              _step23;\n\n          try {\n            for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n              var _l19 = _step23.value;\n              _a21 !== _l19.row && (_a21 = _l19.row, _r17 = o(n, t.left + s, t.right - t.lineWidths[_a21])), _l19.top += t.top + e + s, _l19.left = _r17, _r17 += _l19.width + s;\n            }\n          } catch (err) {\n            _iterator23.e(err);\n          } finally {\n            _iterator23.f();\n          }\n        } else {\n          var _a22 = 0,\n              _r18 = o(n, t.top + e + s, t.bottom - t.columnSizes[_a22].height);\n\n          var _iterator24 = _createForOfIteratorHelper(i),\n              _step24;\n\n          try {\n            for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n              var _l20 = _step24.value;\n              _l20.col !== _a22 && (_a22 = _l20.col, _r18 = o(n, t.top + e + s, t.bottom - t.columnSizes[_a22].height)), _l20.top = _r18, _l20.left += t.left + s, _r18 += _l20.height + s;\n            }\n          } catch (err) {\n            _iterator24.e(err);\n          } finally {\n            _iterator24.f();\n          }\n        }\n      }\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        return \"top\" === this.options.position || \"bottom\" === this.options.position;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this;\n\n        if (t.options.display) {\n          var _e51 = t.ctx;\n          Zt(_e51, t), t._draw(), Qt(_e51);\n        }\n      }\n    }, {\n      key: \"_draw\",\n      value: function _draw() {\n        var t = this,\n            e = t.options,\n            i = t.columnSizes,\n            n = t.lineWidths,\n            a = t.ctx,\n            r = e.align,\n            l = e.labels,\n            c = xt.color,\n            h = bn(e.rtl, t.left, t.width),\n            d = Fe(l.font),\n            u = l.color,\n            f = l.padding,\n            g = d.size,\n            p = g / 2;\n        var m;\n        t.drawTitle(), a.textAlign = h.textAlign(\"left\"), a.textBaseline = \"middle\", a.lineWidth = .5, a.font = d.string;\n\n        var _fs2 = fs(l, g),\n            x = _fs2.boxWidth,\n            b = _fs2.boxHeight,\n            _ = _fs2.itemHeight,\n            y = t.isHorizontal(),\n            v = this._computeTitleHeight();\n\n        m = y ? {\n          x: o(r, t.left + f, t.right - n[0]),\n          y: t.top + f + v,\n          line: 0\n        } : {\n          x: t.left + f,\n          y: o(r, t.top + v + f, t.bottom - i[0].height),\n          line: 0\n        }, _n(t.ctx, e.textDirection);\n        var w = _ + f;\n        t.legendItems.forEach(function (e, M) {\n          a.strokeStyle = e.fontColor || u, a.fillStyle = e.fontColor || u;\n          var k = a.measureText(e.text).width,\n              S = h.textAlign(e.textAlign || (e.textAlign = l.textAlign)),\n              P = x + g / 2 + k;\n          var D = m.x,\n              C = m.y;\n          h.setWidth(t.width), y ? M > 0 && D + P + f > t.right && (C = m.y += w, m.line++, D = m.x = o(r, t.left + f, t.right - n[m.line])) : M > 0 && C + w > t.bottom && (D = m.x = D + i[m.line].width + f, m.line++, C = m.y = o(r, t.top + v + f, t.bottom - i[m.line].height));\n          !function (t, e, i) {\n            if (isNaN(x) || x <= 0 || isNaN(b) || b < 0) return;\n            a.save();\n            var n = K(i.lineWidth, 1);\n\n            if (a.fillStyle = K(i.fillStyle, c), a.lineCap = K(i.lineCap, \"butt\"), a.lineDashOffset = K(i.lineDashOffset, 0), a.lineJoin = K(i.lineJoin, \"miter\"), a.lineWidth = n, a.strokeStyle = K(i.strokeStyle, c), a.setLineDash(K(i.lineDash, [])), l.usePointStyle) {\n              var _o32 = {\n                radius: x * Math.SQRT2 / 2,\n                pointStyle: i.pointStyle,\n                rotation: i.rotation,\n                borderWidth: n\n              },\n                  _s20 = h.xPlus(t, x / 2);\n\n              Kt(a, _o32, _s20, e + p);\n            } else {\n              var _o33 = e + Math.max((g - b) / 2, 0),\n                  _s21 = h.leftForLtr(t, x),\n                  _r19 = Ie(i.borderRadius);\n\n              a.beginPath(), Object.values(_r19).some(function (t) {\n                return 0 !== t;\n              }) ? ie(a, {\n                x: _s21,\n                y: _o33,\n                w: x,\n                h: b,\n                radius: _r19\n              }) : a.rect(_s21, _o33, x, b), a.fill(), 0 !== n && a.stroke();\n            }\n\n            a.restore();\n          }(h.x(D), C, e), D = s(S, D + x + p, t.right), function (t, e, i) {\n            ee(a, i.text, t, e + _ / 2, d, {\n              strikethrough: i.hidden,\n              textAlign: i.textAlign\n            });\n          }(h.x(D), C, e), y ? m.x += P + f : m.y += w;\n        }), yn(t.ctx, e.textDirection);\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle() {\n        var t = this,\n            e = t.options,\n            i = e.title,\n            s = Fe(i.font),\n            a = ze(i.padding);\n        if (!i.display) return;\n        var r = bn(e.rtl, t.left, t.width),\n            l = t.ctx,\n            c = i.position,\n            h = s.size / 2,\n            d = a.top + h;\n        var u,\n            f = t.left,\n            g = t.width;\n        if (this.isHorizontal()) g = Math.max.apply(Math, _toConsumableArray(t.lineWidths)), u = t.top + d, f = o(e.align, f, t.right - g);else {\n          var _i53 = t.columnSizes.reduce(function (t, e) {\n            return Math.max(t, e.height);\n          }, 0);\n\n          u = d + o(e.align, t.top, t.bottom - _i53 - e.labels.padding - t._computeTitleHeight());\n        }\n        var p = o(c, f, f + g);\n        l.textAlign = r.textAlign(n(c)), l.textBaseline = \"middle\", l.strokeStyle = i.color, l.fillStyle = i.color, l.font = s.string, ee(l, i.text, p, u, s);\n      }\n    }, {\n      key: \"_computeTitleHeight\",\n      value: function _computeTitleHeight() {\n        var t = this.options.title,\n            e = Fe(t.font),\n            i = ze(t.padding);\n        return t.display ? e.lineHeight + i.height : 0;\n      }\n    }, {\n      key: \"_getLegendItemAt\",\n      value: function _getLegendItemAt(t, e) {\n        var i = this;\n        var n, o, s;\n        if (t >= i.left && t <= i.right && e >= i.top && e <= i.bottom) for (s = i.legendHitBoxes, n = 0; n < s.length; ++n) {\n          if (o = s[n], t >= o.left && t <= o.left + o.width && e >= o.top && e <= o.top + o.height) return i.legendItems[n];\n        }\n        return null;\n      }\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(t) {\n        var e = this,\n            i = e.options;\n        if (!function (t, e) {\n          if (\"mousemove\" === t && (e.onHover || e.onLeave)) return !0;\n          if (e.onClick && (\"click\" === t || \"mouseup\" === t)) return !0;\n          return !1;\n        }(t.type, i)) return;\n\n        var n = e._getLegendItemAt(t.x, t.y);\n\n        if (\"mousemove\" === t.type) {\n          var _a23 = e._hoveredItem,\n              _r20 = (s = n, null !== (o = _a23) && null !== s && o.datasetIndex === s.datasetIndex && o.index === s.index);\n\n          _a23 && !_r20 && Q(i.onLeave, [t, _a23, e], e), e._hoveredItem = n, n && !_r20 && Q(i.onHover, [t, n, e], e);\n        } else n && Q(i.onClick, [t, n, e], e);\n\n        var o, s;\n      }\n    }]);\n\n    return gs;\n  }(Ei);\n\n  var ps = {\n    id: \"legend\",\n    _element: gs,\n    start: function start(t, e, i) {\n      var n = t.legend = new gs({\n        ctx: t.ctx,\n        options: i,\n        chart: t\n      });\n      Ge.configure(t, n, i), Ge.addBox(t, n);\n    },\n    stop: function stop(t) {\n      Ge.removeBox(t, t.legend), delete t.legend;\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      var n = t.legend;\n      Ge.configure(t, n, i), n.options = i;\n    },\n    afterUpdate: function afterUpdate(t) {\n      var e = t.legend;\n      e.buildLabels(), e.adjustHitBoxes();\n    },\n    afterEvent: function afterEvent(t, e) {\n      e.replay || t.legend.handleEvent(e.event);\n    },\n    defaults: {\n      display: !0,\n      position: \"top\",\n      align: \"center\",\n      fullSize: !0,\n      reverse: !1,\n      weight: 1e3,\n      onClick: function onClick(t, e, i) {\n        var n = e.datasetIndex,\n            o = i.chart;\n        o.isDatasetVisible(n) ? (o.hide(n), e.hidden = !0) : (o.show(n), e.hidden = !1);\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        color: function color(t) {\n          return t.chart.options.color;\n        },\n        boxWidth: 40,\n        padding: 10,\n        generateLabels: function generateLabels(t) {\n          var e = t.data.datasets,\n              _t$legend$options$lab = t.legend.options.labels,\n              i = _t$legend$options$lab.usePointStyle,\n              n = _t$legend$options$lab.pointStyle,\n              o = _t$legend$options$lab.textAlign,\n              s = _t$legend$options$lab.color;\n          return t._getSortedDatasetMetas().map(function (t) {\n            var a = t.controller.getStyle(i ? 0 : void 0),\n                r = ze(a.borderWidth);\n            return {\n              text: e[t.index].label,\n              fillStyle: a.backgroundColor,\n              fontColor: s,\n              hidden: !t.visible,\n              lineCap: a.borderCapStyle,\n              lineDash: a.borderDash,\n              lineDashOffset: a.borderDashOffset,\n              lineJoin: a.borderJoinStyle,\n              lineWidth: (r.width + r.height) / 4,\n              strokeStyle: a.borderColor,\n              pointStyle: n || a.pointStyle,\n              rotation: a.rotation,\n              textAlign: o || a.textAlign,\n              borderRadius: 0,\n              datasetIndex: t.index\n            };\n          }, this);\n        }\n      },\n      title: {\n        color: function color(t) {\n          return t.chart.options.color;\n        },\n        display: !1,\n        position: \"center\",\n        text: \"\"\n      }\n    },\n    descriptors: {\n      _scriptable: function _scriptable(t) {\n        return !t.startsWith(\"on\");\n      },\n      labels: {\n        _scriptable: function _scriptable(t) {\n          return ![\"generateLabels\", \"filter\", \"sort\"].includes(t);\n        }\n      }\n    }\n  };\n\n  var ms = /*#__PURE__*/function (_Ei7) {\n    _inherits(ms, _Ei7);\n\n    var _super17 = _createSuper(ms);\n\n    function ms(t) {\n      var _this12;\n\n      _classCallCheck(this, ms);\n\n      _this12 = _super17.call(this), _this12.chart = t.chart, _this12.options = t.options, _this12.ctx = t.ctx, _this12._padding = void 0, _this12.top = void 0, _this12.bottom = void 0, _this12.left = void 0, _this12.right = void 0, _this12.width = void 0, _this12.height = void 0, _this12.position = void 0, _this12.weight = void 0, _this12.fullSize = void 0;\n      return _this12;\n    }\n\n    _createClass(ms, [{\n      key: \"update\",\n      value: function update(t, e) {\n        var i = this,\n            n = i.options;\n        if (i.left = 0, i.top = 0, !n.display) return void (i.width = i.height = i.right = i.bottom = 0);\n        i.width = i.right = t, i.height = i.bottom = e;\n        var o = Y(n.text) ? n.text.length : 1;\n        i._padding = ze(n.padding);\n\n        var s = o * Fe(n.font).lineHeight + i._padding.height;\n\n        i.isHorizontal() ? i.height = s : i.width = s;\n      }\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        var t = this.options.position;\n        return \"top\" === t || \"bottom\" === t;\n      }\n    }, {\n      key: \"_drawArgs\",\n      value: function _drawArgs(t) {\n        var e = this.top,\n            i = this.left,\n            n = this.bottom,\n            s = this.right,\n            a = this.options,\n            r = a.align;\n        var l,\n            c,\n            h,\n            d = 0;\n        return this.isHorizontal() ? (c = o(r, i, s), h = e + t, l = s - i) : (\"left\" === a.position ? (c = i + t, h = o(r, n, e), d = -.5 * bt) : (c = s - t, h = o(r, e, n), d = .5 * bt), l = n - e), {\n          titleX: c,\n          titleY: h,\n          maxWidth: l,\n          rotation: d\n        };\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this,\n            e = t.ctx,\n            i = t.options;\n        if (!i.display) return;\n\n        var o = Fe(i.font),\n            s = o.lineHeight / 2 + t._padding.top,\n            _t$_drawArgs = t._drawArgs(s),\n            a = _t$_drawArgs.titleX,\n            r = _t$_drawArgs.titleY,\n            l = _t$_drawArgs.maxWidth,\n            c = _t$_drawArgs.rotation;\n\n        ee(e, i.text, 0, 0, o, {\n          color: i.color,\n          maxWidth: l,\n          rotation: c,\n          textAlign: n(i.align),\n          textBaseline: \"middle\",\n          translation: [a, r]\n        });\n      }\n    }]);\n\n    return ms;\n  }(Ei);\n\n  var xs = {\n    id: \"title\",\n    _element: ms,\n    start: function start(t, e, i) {\n      !function (t, e) {\n        var i = new ms({\n          ctx: t.ctx,\n          options: e,\n          chart: t\n        });\n        Ge.configure(t, i, e), Ge.addBox(t, i), t.titleBlock = i;\n      }(t, i);\n    },\n    stop: function stop(t) {\n      var e = t.titleBlock;\n      Ge.removeBox(t, e), delete t.titleBlock;\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      var n = t.titleBlock;\n      Ge.configure(t, n, i), n.options = i;\n    },\n    defaults: {\n      align: \"center\",\n      display: !1,\n      font: {\n        weight: \"bold\"\n      },\n      fullSize: !0,\n      padding: 10,\n      position: \"top\",\n      text: \"\",\n      weight: 2e3\n    },\n    defaultRoutes: {\n      color: \"color\"\n    },\n    descriptors: {\n      _scriptable: !0,\n      _indexable: !1\n    }\n  };\n  var bs = {\n    average: function average(t) {\n      if (!t.length) return !1;\n      var e,\n          i,\n          n = 0,\n          o = 0,\n          s = 0;\n\n      for (e = 0, i = t.length; e < i; ++e) {\n        var _i54 = t[e].element;\n\n        if (_i54 && _i54.hasValue()) {\n          var _t48 = _i54.tooltipPosition();\n\n          n += _t48.x, o += _t48.y, ++s;\n        }\n      }\n\n      return {\n        x: n / s,\n        y: o / s\n      };\n    },\n    nearest: function nearest(t, e) {\n      if (!t.length) return !1;\n      var i,\n          n,\n          o,\n          s = e.x,\n          a = e.y,\n          r = Number.POSITIVE_INFINITY;\n\n      for (i = 0, n = t.length; i < n; ++i) {\n        var _n39 = t[i].element;\n\n        if (_n39 && _n39.hasValue()) {\n          var _t49 = Vt(e, _n39.getCenterPoint());\n\n          _t49 < r && (r = _t49, o = _n39);\n        }\n      }\n\n      if (o) {\n        var _t50 = o.tooltipPosition();\n\n        s = _t50.x, a = _t50.y;\n      }\n\n      return {\n        x: s,\n        y: a\n      };\n    }\n  };\n\n  function _s(t, e) {\n    return e && (Y(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;\n  }\n\n  function ys(t) {\n    return (\"string\" == typeof t || t instanceof String) && t.indexOf(\"\\n\") > -1 ? t.split(\"\\n\") : t;\n  }\n\n  function vs(t, e) {\n    var i = e.element,\n        n = e.datasetIndex,\n        o = e.index,\n        s = t.getDatasetMeta(n).controller,\n        _s$getLabelAndValue = s.getLabelAndValue(o),\n        a = _s$getLabelAndValue.label,\n        r = _s$getLabelAndValue.value;\n\n    return {\n      chart: t,\n      label: a,\n      parsed: s.getParsed(o),\n      raw: t.data.datasets[n].data[o],\n      formattedValue: r,\n      dataset: s.getDataset(),\n      dataIndex: o,\n      datasetIndex: n,\n      element: i\n    };\n  }\n\n  function ws(t, e) {\n    var i = t._chart.ctx,\n        n = t.body,\n        o = t.footer,\n        s = t.title,\n        a = e.boxWidth,\n        r = e.boxHeight,\n        l = Fe(e.bodyFont),\n        c = Fe(e.titleFont),\n        h = Fe(e.footerFont),\n        d = s.length,\n        u = o.length,\n        f = n.length,\n        g = ze(e.padding);\n    var p = g.height,\n        m = 0,\n        x = n.reduce(function (t, e) {\n      return t + e.before.length + e.lines.length + e.after.length;\n    }, 0);\n\n    if (x += t.beforeBody.length + t.afterBody.length, d && (p += d * c.lineHeight + (d - 1) * e.titleSpacing + e.titleMarginBottom), x) {\n      p += f * (e.displayColors ? Math.max(r, l.lineHeight) : l.lineHeight) + (x - f) * l.lineHeight + (x - 1) * e.bodySpacing;\n    }\n\n    u && (p += e.footerMarginTop + u * h.lineHeight + (u - 1) * e.footerSpacing);\n    var b = 0;\n\n    var _ = function _(t) {\n      m = Math.max(m, i.measureText(t).width + b);\n    };\n\n    return i.save(), i.font = c.string, J(t.title, _), i.font = l.string, J(t.beforeBody.concat(t.afterBody), _), b = e.displayColors ? a + 2 : 0, J(n, function (t) {\n      J(t.before, _), J(t.lines, _), J(t.after, _);\n    }), b = 0, i.font = h.string, J(t.footer, _), i.restore(), m += g.width, {\n      width: m,\n      height: p\n    };\n  }\n\n  function Ms(t, e, i, n) {\n    var o = i.x,\n        s = i.width,\n        a = t.width,\n        _t$chartArea = t.chartArea,\n        r = _t$chartArea.left,\n        l = _t$chartArea.right;\n    var c = \"center\";\n    return \"center\" === n ? c = o <= (r + l) / 2 ? \"left\" : \"right\" : o <= s / 2 ? c = \"left\" : o >= a - s / 2 && (c = \"right\"), function (t, e, i, n) {\n      var o = n.x,\n          s = n.width,\n          a = i.caretSize + i.caretPadding;\n      return \"left\" === t && o + s + a > e.width || \"right\" === t && o - s - a < 0 || void 0;\n    }(c, t, e, i) && (c = \"center\"), c;\n  }\n\n  function ks(t, e, i) {\n    var n = e.yAlign || function (t, e) {\n      var i = e.y,\n          n = e.height;\n      return i < n / 2 ? \"top\" : i > t.height - n / 2 ? \"bottom\" : \"center\";\n    }(t, i);\n\n    return {\n      xAlign: e.xAlign || Ms(t, e, i, n),\n      yAlign: n\n    };\n  }\n\n  function Ss(t, e, i, n) {\n    var o = t.caretSize,\n        s = t.caretPadding,\n        a = t.cornerRadius,\n        r = i.xAlign,\n        l = i.yAlign,\n        c = o + s,\n        h = a + s;\n\n    var d = function (t, e) {\n      var i = t.x,\n          n = t.width;\n      return \"right\" === e ? i -= n : \"center\" === e && (i -= n / 2), i;\n    }(e, r);\n\n    var u = function (t, e, i) {\n      var n = t.y,\n          o = t.height;\n      return \"top\" === e ? n += i : n -= \"bottom\" === e ? o + i : o / 2, n;\n    }(e, l, c);\n\n    return \"center\" === l ? \"left\" === r ? d += c : \"right\" === r && (d -= c) : \"left\" === r ? d -= h : \"right\" === r && (d += h), {\n      x: Nt(d, 0, n.width - e.width),\n      y: Nt(u, 0, n.height - e.height)\n    };\n  }\n\n  function Ps(t, e, i) {\n    var n = ze(i.padding);\n    return \"center\" === e ? t.x + t.width / 2 : \"right\" === e ? t.x + t.width - n.right : t.x + n.left;\n  }\n\n  function Ds(t) {\n    return _s([], ys(t));\n  }\n\n  function Cs(t, e) {\n    var i = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;\n    return i ? t.override(i) : t;\n  }\n\n  var Os = /*#__PURE__*/function (_Ei8) {\n    _inherits(Os, _Ei8);\n\n    var _super18 = _createSuper(Os);\n\n    function Os(t) {\n      var _this13;\n\n      _classCallCheck(this, Os);\n\n      _this13 = _super18.call(this), _this13.opacity = 0, _this13._active = [], _this13._chart = t._chart, _this13._eventPosition = void 0, _this13._size = void 0, _this13._cachedAnimations = void 0, _this13._tooltipItems = [], _this13.$animations = void 0, _this13.$context = void 0, _this13.options = t.options, _this13.dataPoints = void 0, _this13.title = void 0, _this13.beforeBody = void 0, _this13.body = void 0, _this13.afterBody = void 0, _this13.footer = void 0, _this13.xAlign = void 0, _this13.yAlign = void 0, _this13.x = void 0, _this13.y = void 0, _this13.height = void 0, _this13.width = void 0, _this13.caretX = void 0, _this13.caretY = void 0, _this13.labelColors = void 0, _this13.labelPointStyles = void 0, _this13.labelTextColors = void 0;\n      return _this13;\n    }\n\n    _createClass(Os, [{\n      key: \"initialize\",\n      value: function initialize(t) {\n        this.options = t, this._cachedAnimations = void 0, this.$context = void 0;\n      }\n    }, {\n      key: \"_resolveAnimations\",\n      value: function _resolveAnimations() {\n        var t = this,\n            e = t._cachedAnimations;\n        if (e) return e;\n        var i = t._chart,\n            n = t.options.setContext(t.getContext()),\n            o = n.enabled && i.options.animation && n.animations,\n            s = new vi(t._chart, o);\n        return o._cacheable && (t._cachedAnimations = Object.freeze(s)), s;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        var t = this;\n        return t.$context || (t.$context = (e = t._chart.getContext(), i = t, n = t._tooltipItems, Object.assign(Object.create(e), {\n          tooltip: i,\n          tooltipItems: n,\n          type: \"tooltip\"\n        })));\n        var e, i, n;\n      }\n    }, {\n      key: \"getTitle\",\n      value: function getTitle(t, e) {\n        var i = this,\n            n = e.callbacks,\n            o = n.beforeTitle.apply(i, [t]),\n            s = n.title.apply(i, [t]),\n            a = n.afterTitle.apply(i, [t]);\n        var r = [];\n        return r = _s(r, ys(o)), r = _s(r, ys(s)), r = _s(r, ys(a)), r;\n      }\n    }, {\n      key: \"getBeforeBody\",\n      value: function getBeforeBody(t, e) {\n        return Ds(e.callbacks.beforeBody.apply(this, [t]));\n      }\n    }, {\n      key: \"getBody\",\n      value: function getBody(t, e) {\n        var i = this,\n            n = e.callbacks,\n            o = [];\n        return J(t, function (t) {\n          var e = {\n            before: [],\n            lines: [],\n            after: []\n          },\n              s = Cs(n, t);\n          _s(e.before, ys(s.beforeLabel.call(i, t))), _s(e.lines, s.label.call(i, t)), _s(e.after, ys(s.afterLabel.call(i, t))), o.push(e);\n        }), o;\n      }\n    }, {\n      key: \"getAfterBody\",\n      value: function getAfterBody(t, e) {\n        return Ds(e.callbacks.afterBody.apply(this, [t]));\n      }\n    }, {\n      key: \"getFooter\",\n      value: function getFooter(t, e) {\n        var i = this,\n            n = e.callbacks,\n            o = n.beforeFooter.apply(i, [t]),\n            s = n.footer.apply(i, [t]),\n            a = n.afterFooter.apply(i, [t]);\n        var r = [];\n        return r = _s(r, ys(o)), r = _s(r, ys(s)), r = _s(r, ys(a)), r;\n      }\n    }, {\n      key: \"_createItems\",\n      value: function _createItems(t) {\n        var e = this,\n            i = e._active,\n            n = e._chart.data,\n            o = [],\n            s = [],\n            a = [];\n        var r,\n            l,\n            c = [];\n\n        for (r = 0, l = i.length; r < l; ++r) {\n          c.push(vs(e._chart, i[r]));\n        }\n\n        return t.filter && (c = c.filter(function (e, i, o) {\n          return t.filter(e, i, o, n);\n        })), t.itemSort && (c = c.sort(function (e, i) {\n          return t.itemSort(e, i, n);\n        })), J(c, function (i) {\n          var n = Cs(t.callbacks, i);\n          o.push(n.labelColor.call(e, i)), s.push(n.labelPointStyle.call(e, i)), a.push(n.labelTextColor.call(e, i));\n        }), e.labelColors = o, e.labelPointStyles = s, e.labelTextColors = a, e.dataPoints = c, c;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e) {\n        var i = this,\n            n = i.options.setContext(i.getContext()),\n            o = i._active;\n        var s,\n            a = [];\n\n        if (o.length) {\n          var _t51 = bs[n.position].call(i, o, i._eventPosition);\n\n          a = i._createItems(n), i.title = i.getTitle(a, n), i.beforeBody = i.getBeforeBody(a, n), i.body = i.getBody(a, n), i.afterBody = i.getAfterBody(a, n), i.footer = i.getFooter(a, n);\n\n          var _e52 = i._size = ws(i, n),\n              _r21 = Object.assign({}, _t51, _e52),\n              _l21 = ks(i._chart, n, _r21),\n              _c18 = Ss(n, _r21, _l21, i._chart);\n\n          i.xAlign = _l21.xAlign, i.yAlign = _l21.yAlign, s = {\n            opacity: 1,\n            x: _c18.x,\n            y: _c18.y,\n            width: _e52.width,\n            height: _e52.height,\n            caretX: _t51.x,\n            caretY: _t51.y\n          };\n        } else 0 !== i.opacity && (s = {\n          opacity: 0\n        });\n\n        i._tooltipItems = a, i.$context = void 0, s && i._resolveAnimations().update(i, s), t && n.external && n.external.call(i, {\n          chart: i._chart,\n          tooltip: i,\n          replay: e\n        });\n      }\n    }, {\n      key: \"drawCaret\",\n      value: function drawCaret(t, e, i, n) {\n        var o = this.getCaretPosition(t, i, n);\n        e.lineTo(o.x1, o.y1), e.lineTo(o.x2, o.y2), e.lineTo(o.x3, o.y3);\n      }\n    }, {\n      key: \"getCaretPosition\",\n      value: function getCaretPosition(t, e, i) {\n        var n = this.xAlign,\n            o = this.yAlign,\n            s = i.cornerRadius,\n            a = i.caretSize,\n            r = t.x,\n            l = t.y,\n            c = e.width,\n            h = e.height;\n        var d, u, f, g, p, m;\n        return \"center\" === o ? (p = l + h / 2, \"left\" === n ? (d = r, u = d - a, g = p + a, m = p - a) : (d = r + c, u = d + a, g = p - a, m = p + a), f = d) : (u = \"left\" === n ? r + s + a : \"right\" === n ? r + c - s - a : this.caretX, \"top\" === o ? (g = l, p = g - a, d = u - a, f = u + a) : (g = l + h, p = g + a, d = u + a, f = u - a), m = g), {\n          x1: d,\n          x2: u,\n          x3: f,\n          y1: g,\n          y2: p,\n          y3: m\n        };\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle(t, e, i) {\n        var n = this,\n            o = n.title,\n            s = o.length;\n        var a, r, l;\n\n        if (s) {\n          var _c19 = bn(i.rtl, n.x, n.width);\n\n          for (t.x = Ps(n, i.titleAlign, i), e.textAlign = _c19.textAlign(i.titleAlign), e.textBaseline = \"middle\", a = Fe(i.titleFont), r = i.titleSpacing, e.fillStyle = i.titleColor, e.font = a.string, l = 0; l < s; ++l) {\n            e.fillText(o[l], _c19.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + r, l + 1 === s && (t.y += i.titleMarginBottom - r);\n          }\n        }\n      }\n    }, {\n      key: \"_drawColorBox\",\n      value: function _drawColorBox(t, e, i, n, o) {\n        var s = this,\n            a = s.labelColors[i],\n            r = s.labelPointStyles[i],\n            l = o.boxHeight,\n            c = o.boxWidth,\n            h = Fe(o.bodyFont),\n            d = Ps(s, \"left\", o),\n            u = n.x(d),\n            f = l < h.lineHeight ? (h.lineHeight - l) / 2 : 0,\n            g = e.y + f;\n\n        if (o.usePointStyle) {\n          var _e53 = {\n            radius: Math.min(c, l) / 2,\n            pointStyle: r.pointStyle,\n            rotation: r.rotation,\n            borderWidth: 1\n          },\n              _i55 = n.leftForLtr(u, c) + c / 2,\n              _s22 = g + l / 2;\n\n          t.strokeStyle = o.multiKeyBackground, t.fillStyle = o.multiKeyBackground, Kt(t, _e53, _i55, _s22), t.strokeStyle = a.borderColor, t.fillStyle = a.backgroundColor, Kt(t, _e53, _i55, _s22);\n        } else {\n          t.lineWidth = a.borderWidth || 1, t.strokeStyle = a.borderColor, t.setLineDash(a.borderDash || []), t.lineDashOffset = a.borderDashOffset || 0;\n\n          var _e54 = n.leftForLtr(u, c),\n              _i56 = n.leftForLtr(n.xPlus(u, 1), c - 2),\n              _s23 = Ie(a.borderRadius);\n\n          Object.values(_s23).some(function (t) {\n            return 0 !== t;\n          }) ? (t.beginPath(), t.fillStyle = o.multiKeyBackground, ie(t, {\n            x: _e54,\n            y: g,\n            w: c,\n            h: l,\n            radius: _s23\n          }), t.fill(), t.stroke(), t.fillStyle = a.backgroundColor, t.beginPath(), ie(t, {\n            x: _i56,\n            y: g + 1,\n            w: c - 2,\n            h: l - 2,\n            radius: _s23\n          }), t.fill()) : (t.fillStyle = o.multiKeyBackground, t.fillRect(_e54, g, c, l), t.strokeRect(_e54, g, c, l), t.fillStyle = a.backgroundColor, t.fillRect(_i56, g + 1, c - 2, l - 2));\n        }\n\n        t.fillStyle = s.labelTextColors[i];\n      }\n    }, {\n      key: \"drawBody\",\n      value: function drawBody(t, e, i) {\n        var n = this,\n            o = n.body,\n            s = i.bodySpacing,\n            a = i.bodyAlign,\n            r = i.displayColors,\n            l = i.boxHeight,\n            c = i.boxWidth,\n            h = Fe(i.bodyFont);\n        var d = h.lineHeight,\n            u = 0;\n\n        var f = bn(i.rtl, n.x, n.width),\n            g = function g(i) {\n          e.fillText(i, f.x(t.x + u), t.y + d / 2), t.y += d + s;\n        },\n            p = f.textAlign(a);\n\n        var m, x, b, _, y, v, w;\n\n        for (e.textAlign = a, e.textBaseline = \"middle\", e.font = h.string, t.x = Ps(n, p, i), e.fillStyle = i.bodyColor, J(n.beforeBody, g), u = r && \"right\" !== p ? \"center\" === a ? c / 2 + 1 : c + 2 : 0, _ = 0, v = o.length; _ < v; ++_) {\n          for (m = o[_], x = n.labelTextColors[_], e.fillStyle = x, J(m.before, g), b = m.lines, r && b.length && (n._drawColorBox(e, t, _, f, i), d = Math.max(h.lineHeight, l)), y = 0, w = b.length; y < w; ++y) {\n            g(b[y]), d = h.lineHeight;\n          }\n\n          J(m.after, g);\n        }\n\n        u = 0, d = h.lineHeight, J(n.afterBody, g), t.y -= s;\n      }\n    }, {\n      key: \"drawFooter\",\n      value: function drawFooter(t, e, i) {\n        var n = this,\n            o = n.footer,\n            s = o.length;\n        var a, r;\n\n        if (s) {\n          var _l22 = bn(i.rtl, n.x, n.width);\n\n          for (t.x = Ps(n, i.footerAlign, i), t.y += i.footerMarginTop, e.textAlign = _l22.textAlign(i.footerAlign), e.textBaseline = \"middle\", a = Fe(i.footerFont), e.fillStyle = i.footerColor, e.font = a.string, r = 0; r < s; ++r) {\n            e.fillText(o[r], _l22.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + i.footerSpacing;\n          }\n        }\n      }\n    }, {\n      key: \"drawBackground\",\n      value: function drawBackground(t, e, i, n) {\n        var o = this.xAlign,\n            s = this.yAlign,\n            a = t.x,\n            r = t.y,\n            l = i.width,\n            c = i.height,\n            h = n.cornerRadius;\n        e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, e.lineWidth = n.borderWidth, e.beginPath(), e.moveTo(a + h, r), \"top\" === s && this.drawCaret(t, e, i, n), e.lineTo(a + l - h, r), e.quadraticCurveTo(a + l, r, a + l, r + h), \"center\" === s && \"right\" === o && this.drawCaret(t, e, i, n), e.lineTo(a + l, r + c - h), e.quadraticCurveTo(a + l, r + c, a + l - h, r + c), \"bottom\" === s && this.drawCaret(t, e, i, n), e.lineTo(a + h, r + c), e.quadraticCurveTo(a, r + c, a, r + c - h), \"center\" === s && \"left\" === o && this.drawCaret(t, e, i, n), e.lineTo(a, r + h), e.quadraticCurveTo(a, r, a + h, r), e.closePath(), e.fill(), n.borderWidth > 0 && e.stroke();\n      }\n    }, {\n      key: \"_updateAnimationTarget\",\n      value: function _updateAnimationTarget(t) {\n        var e = this,\n            i = e._chart,\n            n = e.$animations,\n            o = n && n.x,\n            s = n && n.y;\n\n        if (o || s) {\n          var _n40 = bs[t.position].call(e, e._active, e._eventPosition);\n\n          if (!_n40) return;\n\n          var _a24 = e._size = ws(e, t),\n              _r22 = Object.assign({}, _n40, e._size),\n              _l23 = ks(i, t, _r22),\n              _c20 = Ss(t, _r22, _l23, i);\n\n          o._to === _c20.x && s._to === _c20.y || (e.xAlign = _l23.xAlign, e.yAlign = _l23.yAlign, e.width = _a24.width, e.height = _a24.height, e.caretX = _n40.x, e.caretY = _n40.y, e._resolveAnimations().update(e, _c20));\n        }\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this,\n            i = e.options.setContext(e.getContext());\n        var n = e.opacity;\n        if (!n) return;\n\n        e._updateAnimationTarget(i);\n\n        var o = {\n          width: e.width,\n          height: e.height\n        },\n            s = {\n          x: e.x,\n          y: e.y\n        };\n        n = Math.abs(n) < .001 ? 0 : n;\n        var a = ze(i.padding),\n            r = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length;\n        i.enabled && r && (t.save(), t.globalAlpha = n, e.drawBackground(s, t, o, i), _n(t, i.textDirection), s.y += a.top, e.drawTitle(s, t, i), e.drawBody(s, t, i), e.drawFooter(s, t, i), yn(t, i.textDirection), t.restore());\n      }\n    }, {\n      key: \"getActiveElements\",\n      value: function getActiveElements() {\n        return this._active || [];\n      }\n    }, {\n      key: \"setActiveElements\",\n      value: function setActiveElements(t, e) {\n        var i = this,\n            n = i._active,\n            o = t.map(function (_ref16) {\n          var t = _ref16.datasetIndex,\n              e = _ref16.index;\n\n          var n = i._chart.getDatasetMeta(t);\n\n          if (!n) throw new Error(\"Cannot find a dataset at index \" + t);\n          return {\n            datasetIndex: t,\n            element: n.data[e],\n            index: e\n          };\n        }),\n            s = !tt(n, o),\n            a = i._positionChanged(o, e);\n\n        (s || a) && (i._active = o, i._eventPosition = e, i.update(!0));\n      }\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(t, e) {\n        var i = this,\n            n = i.options,\n            o = i._active || [];\n        var s = !1,\n            a = [];\n        \"mouseout\" !== t.type && (a = i._chart.getElementsAtEventForMode(t, n.mode, n, e), n.reverse && a.reverse());\n\n        var r = i._positionChanged(a, t);\n\n        return s = e || !tt(a, o) || r, s && (i._active = a, (n.enabled || n.external) && (i._eventPosition = {\n          x: t.x,\n          y: t.y\n        }, i.update(!0, e))), s;\n      }\n    }, {\n      key: \"_positionChanged\",\n      value: function _positionChanged(t, e) {\n        var i = this.caretX,\n            n = this.caretY,\n            o = this.options,\n            s = bs[o.position].call(this, t, e);\n        return !1 !== s && (i !== s.x || n !== s.y);\n      }\n    }]);\n\n    return Os;\n  }(Ei);\n\n  Os.positioners = bs;\n  var Ts = {\n    id: \"tooltip\",\n    _element: Os,\n    positioners: bs,\n    afterInit: function afterInit(t, e, i) {\n      i && (t.tooltip = new Os({\n        _chart: t,\n        options: i\n      }));\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      t.tooltip && t.tooltip.initialize(i);\n    },\n    reset: function reset(t, e, i) {\n      t.tooltip && t.tooltip.initialize(i);\n    },\n    afterDraw: function afterDraw(t) {\n      var e = t.tooltip,\n          i = {\n        tooltip: e\n      };\n      !1 !== t.notifyPlugins(\"beforeTooltipDraw\", i) && (e && e.draw(t.ctx), t.notifyPlugins(\"afterTooltipDraw\", i));\n    },\n    afterEvent: function afterEvent(t, e) {\n      if (t.tooltip) {\n        var _i57 = e.replay;\n        t.tooltip.handleEvent(e.event, _i57) && (e.changed = !0);\n      }\n    },\n    defaults: {\n      enabled: !0,\n      external: null,\n      position: \"average\",\n      backgroundColor: \"rgba(0,0,0,0.8)\",\n      titleColor: \"#fff\",\n      titleFont: {\n        weight: \"bold\"\n      },\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleAlign: \"left\",\n      bodyColor: \"#fff\",\n      bodySpacing: 2,\n      bodyFont: {},\n      bodyAlign: \"left\",\n      footerColor: \"#fff\",\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFont: {\n        weight: \"bold\"\n      },\n      footerAlign: \"left\",\n      padding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      boxHeight: function boxHeight(t, e) {\n        return e.bodyFont.size;\n      },\n      boxWidth: function boxWidth(t, e) {\n        return e.bodyFont.size;\n      },\n      multiKeyBackground: \"#fff\",\n      displayColors: !0,\n      borderColor: \"rgba(0,0,0,0)\",\n      borderWidth: 0,\n      animation: {\n        duration: 400,\n        easing: \"easeOutQuart\"\n      },\n      animations: {\n        numbers: {\n          type: \"number\",\n          properties: [\"x\", \"y\", \"width\", \"height\", \"caretX\", \"caretY\"]\n        },\n        opacity: {\n          easing: \"linear\",\n          duration: 200\n        }\n      },\n      callbacks: {\n        beforeTitle: N,\n        title: function title(t) {\n          if (t.length > 0) {\n            var _e55 = t[0],\n                _i58 = _e55.chart.data.labels,\n                _n41 = _i58 ? _i58.length : 0;\n\n            if (this && this.options && \"dataset\" === this.options.mode) return _e55.dataset.label || \"\";\n            if (_e55.label) return _e55.label;\n            if (_n41 > 0 && _e55.dataIndex < _n41) return _i58[_e55.dataIndex];\n          }\n\n          return \"\";\n        },\n        afterTitle: N,\n        beforeBody: N,\n        beforeLabel: N,\n        label: function label(t) {\n          if (this && this.options && \"dataset\" === this.options.mode) return t.label + \": \" + t.formattedValue || t.formattedValue;\n          var e = t.dataset.label || \"\";\n          e && (e += \": \");\n          var i = t.formattedValue;\n          return $(i) || (e += i), e;\n        },\n        labelColor: function labelColor(t) {\n          var e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);\n          return {\n            borderColor: e.borderColor,\n            backgroundColor: e.backgroundColor,\n            borderWidth: e.borderWidth,\n            borderDash: e.borderDash,\n            borderDashOffset: e.borderDashOffset,\n            borderRadius: 0\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this.options.bodyColor;\n        },\n        labelPointStyle: function labelPointStyle(t) {\n          var e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);\n          return {\n            pointStyle: e.pointStyle,\n            rotation: e.rotation\n          };\n        },\n        afterLabel: N,\n        afterBody: N,\n        beforeFooter: N,\n        footer: N,\n        afterFooter: N\n      }\n    },\n    defaultRoutes: {\n      bodyFont: \"font\",\n      footerFont: \"font\",\n      titleFont: \"font\"\n    },\n    descriptors: {\n      _scriptable: function _scriptable(t) {\n        return \"filter\" !== t && \"itemSort\" !== t && \"external\" !== t;\n      },\n      _indexable: !1,\n      callbacks: {\n        _scriptable: !1,\n        _indexable: !1\n      },\n      animation: {\n        _fallback: !1\n      },\n      animations: {\n        _fallback: \"animation\"\n      }\n    },\n    additionalOptionScopes: [\"interaction\"]\n  },\n      As = Object.freeze({\n    __proto__: null,\n    Decimation: Ko,\n    Filler: us,\n    Legend: ps,\n    Title: xs,\n    Tooltip: Ts\n  });\n\n  function Ls(t, e, i) {\n    var n = t.indexOf(e);\n    if (-1 === n) return function (t, e, i) {\n      return \"string\" == typeof e ? t.push(e) - 1 : isNaN(e) ? null : i;\n    }(t, e, i);\n    return n !== t.lastIndexOf(e) ? i : n;\n  }\n\n  var Rs = /*#__PURE__*/function (_Xi) {\n    _inherits(Rs, _Xi);\n\n    var _super19 = _createSuper(Rs);\n\n    function Rs(t) {\n      var _this14;\n\n      _classCallCheck(this, Rs);\n\n      _this14 = _super19.call(this, t), _this14._startValue = void 0, _this14._valueRange = 0;\n      return _this14;\n    }\n\n    _createClass(Rs, [{\n      key: \"parse\",\n      value: function parse(t, e) {\n        if ($(t)) return null;\n        var i = this.getLabels();\n        return function (t, e) {\n          return null === t ? null : Nt(Math.round(t), 0, e);\n        }(e = isFinite(e) && i[e] === t ? e : Ls(i, t, K(e, t)), i.length - 1);\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getUserBounds2 = t.getUserBounds(),\n            e = _t$getUserBounds2.minDefined,\n            i = _t$getUserBounds2.maxDefined;\n\n        var _t$getMinMax = t.getMinMax(!0),\n            n = _t$getMinMax.min,\n            o = _t$getMinMax.max;\n\n        \"ticks\" === t.options.bounds && (e || (n = 0), i || (o = t.getLabels().length - 1)), t.min = n, t.max = o;\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.min,\n            i = t.max,\n            n = t.options.offset,\n            o = [];\n        var s = t.getLabels();\n        s = 0 === e && i === s.length - 1 ? s : s.slice(e, i + 1), t._valueRange = Math.max(s.length - (n ? 0 : 1), 1), t._startValue = t.min - (n ? .5 : 0);\n\n        for (var _t52 = e; _t52 <= i; _t52++) {\n          o.push({\n            value: _t52\n          });\n        }\n\n        return o;\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        var e = this.getLabels();\n        return t >= 0 && t < e.length ? e[t] : t;\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this;\n        _get2(_getPrototypeOf(Rs.prototype), \"configure\", this).call(this), t.isHorizontal() || (t._reversePixels = !t._reversePixels);\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        var e = this;\n        return \"number\" != typeof t && (t = e.parse(t)), null === t ? NaN : e.getPixelForDecimal((t - e._startValue) / e._valueRange);\n      }\n    }, {\n      key: \"getPixelForTick\",\n      value: function getPixelForTick(t) {\n        var e = this.ticks;\n        return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this;\n        return Math.round(e._startValue + e.getDecimalForPixel(t) * e._valueRange);\n      }\n    }, {\n      key: \"getBasePixel\",\n      value: function getBasePixel() {\n        return this.bottom;\n      }\n    }]);\n\n    return Rs;\n  }(Xi);\n\n  function Es(t, e, _ref17) {\n    var i = _ref17.horizontal,\n        n = _ref17.minRotation;\n    var o = Et(n),\n        s = (i ? Math.sin(o) : Math.cos(o)) || .001,\n        a = .75 * e * (\"\" + t).length;\n    return Math.min(e / s, a);\n  }\n\n  Rs.id = \"category\", Rs.defaults = {\n    ticks: {\n      callback: Rs.prototype.getLabelForValue\n    }\n  };\n\n  var Is = /*#__PURE__*/function (_Xi2) {\n    _inherits(Is, _Xi2);\n\n    var _super20 = _createSuper(Is);\n\n    function Is(t) {\n      var _this15;\n\n      _classCallCheck(this, Is);\n\n      _this15 = _super20.call(this, t), _this15.start = void 0, _this15.end = void 0, _this15._startValue = void 0, _this15._endValue = void 0, _this15._valueRange = 0;\n      return _this15;\n    }\n\n    _createClass(Is, [{\n      key: \"parse\",\n      value: function parse(t, e) {\n        return $(t) || (\"number\" == typeof t || t instanceof Number) && !isFinite(+t) ? null : +t;\n      }\n    }, {\n      key: \"handleTickRangeOptions\",\n      value: function handleTickRangeOptions() {\n        var t = this,\n            e = t.options.beginAtZero,\n            _t$getUserBounds3 = t.getUserBounds(),\n            i = _t$getUserBounds3.minDefined,\n            n = _t$getUserBounds3.maxDefined;\n\n        var o = t.min,\n            s = t.max;\n\n        var a = function a(t) {\n          return o = i ? o : t;\n        },\n            r = function r(t) {\n          return s = n ? s : t;\n        };\n\n        if (e) {\n          var _t53 = Dt(o),\n              _e56 = Dt(s);\n\n          _t53 < 0 && _e56 < 0 ? r(0) : _t53 > 0 && _e56 > 0 && a(0);\n        }\n\n        o === s && (r(s + 1), e || a(o - 1)), t.min = o, t.max = s;\n      }\n    }, {\n      key: \"getTickLimit\",\n      value: function getTickLimit() {\n        var t = this,\n            e = t.options.ticks;\n        var i,\n            n = e.maxTicksLimit,\n            o = e.stepSize;\n        return o ? i = Math.ceil(t.max / o) - Math.floor(t.min / o) + 1 : (i = t.computeTickLimit(), n = n || 11), n && (i = Math.min(n, i)), i;\n      }\n    }, {\n      key: \"computeTickLimit\",\n      value: function computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.options,\n            i = e.ticks;\n        var n = t.getTickLimit();\n        n = Math.max(2, n);\n\n        var o = function (t, e) {\n          var i = [],\n              n = t.bounds,\n              o = t.step,\n              s = t.min,\n              a = t.max,\n              r = t.precision,\n              l = t.count,\n              c = t.maxTicks,\n              h = t.maxDigits,\n              d = t.includeBounds,\n              u = o || 1,\n              f = c - 1,\n              g = e.min,\n              p = e.max,\n              m = !$(s),\n              x = !$(a),\n              b = !$(l),\n              _ = (p - g) / (h + 1);\n\n          var y,\n              v,\n              w,\n              M,\n              k = Ct((p - g) / f / u) * u;\n          if (k < 1e-14 && !m && !x) return [{\n            value: g\n          }, {\n            value: p\n          }];\n          M = Math.ceil(p / k) - Math.floor(g / k), M > f && (k = Ct(M * k / f / u) * u), $(r) || (y = Math.pow(10, r), k = Math.ceil(k * y) / y), \"ticks\" === n ? (v = Math.floor(g / k) * k, w = Math.ceil(p / k) * k) : (v = g, w = p), m && x && o && Lt((a - s) / o, k / 1e3) ? (M = Math.min((a - s) / k, c), k = (a - s) / M, v = s, w = a) : b ? (v = m ? s : v, w = x ? a : w, M = l - 1, k = (w - v) / M) : (M = (w - v) / k, M = At(M, Math.round(M), k / 1e3) ? Math.round(M) : Math.ceil(M));\n          var S = Math.max(zt(k), zt(v));\n          y = Math.pow(10, $(r) ? S : r), v = Math.round(v * y) / y, w = Math.round(w * y) / y;\n          var P = 0;\n\n          for (m && (d && v !== s ? (i.push({\n            value: s\n          }), v < s && P++, At(Math.round((v + P * k) * y) / y, s, Es(s, _, t)) && P++) : v < s && P++); P < M; ++P) {\n            i.push({\n              value: Math.round((v + P * k) * y) / y\n            });\n          }\n\n          return x && d && w !== a ? At(i[i.length - 1].value, a, Es(a, _, t)) ? i[i.length - 1].value = a : i.push({\n            value: a\n          }) : x && w !== a || i.push({\n            value: w\n          }), i;\n        }({\n          maxTicks: n,\n          bounds: e.bounds,\n          min: e.min,\n          max: e.max,\n          precision: i.precision,\n          step: i.stepSize,\n          count: i.count,\n          maxDigits: t._maxDigits(),\n          horizontal: t.isHorizontal(),\n          minRotation: i.minRotation || 0,\n          includeBounds: !1 !== i.includeBounds\n        }, t._range || t);\n\n        return \"ticks\" === e.bounds && Rt(o, t, \"value\"), e.reverse ? (o.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), o;\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this,\n            e = t.ticks;\n        var i = t.min,\n            n = t.max;\n\n        if (_get2(_getPrototypeOf(Is.prototype), \"configure\", this).call(this), t.options.offset && e.length) {\n          var _t54 = (n - i) / Math.max(e.length - 1, 1) / 2;\n\n          i -= _t54, n += _t54;\n        }\n\n        t._startValue = i, t._endValue = n, t._valueRange = n - i;\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        return zi(t, this.chart.options.locale);\n      }\n    }]);\n\n    return Is;\n  }(Xi);\n\n  var zs = /*#__PURE__*/function (_Is) {\n    _inherits(zs, _Is);\n\n    var _super21 = _createSuper(zs);\n\n    function zs() {\n      _classCallCheck(this, zs);\n\n      return _super21.apply(this, arguments);\n    }\n\n    _createClass(zs, [{\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getMinMax2 = t.getMinMax(!0),\n            e = _t$getMinMax2.min,\n            i = _t$getMinMax2.max;\n\n        t.min = X(e) ? e : 0, t.max = X(i) ? i : 1, t.handleTickRangeOptions();\n      }\n    }, {\n      key: \"computeTickLimit\",\n      value: function computeTickLimit() {\n        var t = this,\n            e = t.isHorizontal(),\n            i = e ? t.width : t.height,\n            n = Et(t.options.ticks.minRotation),\n            o = (e ? Math.sin(n) : Math.cos(n)) || .001,\n            s = t._resolveTickFontOptions(0);\n\n        return Math.ceil(i / Math.min(40, s.lineHeight / o));\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        return null === t ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        return this._startValue + this.getDecimalForPixel(t) * this._valueRange;\n      }\n    }]);\n\n    return zs;\n  }(Is);\n\n  function Fs(t) {\n    return 1 === t / Math.pow(10, Math.floor(Pt(t)));\n  }\n\n  zs.id = \"linear\", zs.defaults = {\n    ticks: {\n      callback: Vi.formatters.numeric\n    }\n  };\n\n  var Vs = /*#__PURE__*/function (_Xi3) {\n    _inherits(Vs, _Xi3);\n\n    var _super22 = _createSuper(Vs);\n\n    function Vs(t) {\n      var _this16;\n\n      _classCallCheck(this, Vs);\n\n      _this16 = _super22.call(this, t), _this16.start = void 0, _this16.end = void 0, _this16._startValue = void 0, _this16._valueRange = 0;\n      return _this16;\n    }\n\n    _createClass(Vs, [{\n      key: \"parse\",\n      value: function parse(t, e) {\n        var i = Is.prototype.parse.apply(this, [t, e]);\n        if (0 !== i) return X(i) && i > 0 ? i : null;\n        this._zero = !0;\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getMinMax3 = t.getMinMax(!0),\n            e = _t$getMinMax3.min,\n            i = _t$getMinMax3.max;\n\n        t.min = X(e) ? Math.max(0, e) : null, t.max = X(i) ? Math.max(0, i) : null, t.options.beginAtZero && (t._zero = !0), t.handleTickRangeOptions();\n      }\n    }, {\n      key: \"handleTickRangeOptions\",\n      value: function handleTickRangeOptions() {\n        var t = this,\n            _t$getUserBounds4 = t.getUserBounds(),\n            e = _t$getUserBounds4.minDefined,\n            i = _t$getUserBounds4.maxDefined;\n\n        var n = t.min,\n            o = t.max;\n\n        var s = function s(t) {\n          return n = e ? n : t;\n        },\n            a = function a(t) {\n          return o = i ? o : t;\n        },\n            r = function r(t, e) {\n          return Math.pow(10, Math.floor(Pt(t)) + e);\n        };\n\n        n === o && (n <= 0 ? (s(1), a(10)) : (s(r(n, -1)), a(r(o, 1)))), n <= 0 && s(r(o, -1)), o <= 0 && a(r(n, 1)), t._zero && t.min !== t._suggestedMin && n === r(t.min, 0) && s(r(n, -1)), t.min = n, t.max = o;\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.options,\n            i = function (t, e) {\n          var i = Math.floor(Pt(e.max)),\n              n = Math.ceil(e.max / Math.pow(10, i)),\n              o = [];\n          var s = q(t.min, Math.pow(10, Math.floor(Pt(e.min)))),\n              a = Math.floor(Pt(s)),\n              r = Math.floor(s / Math.pow(10, a)),\n              l = a < 0 ? Math.pow(10, Math.abs(a)) : 1;\n\n          do {\n            o.push({\n              value: s,\n              major: Fs(s)\n            }), ++r, 10 === r && (r = 1, ++a, l = a >= 0 ? 1 : l), s = Math.round(r * Math.pow(10, a) * l) / l;\n          } while (a < i || a === i && r < n);\n\n          var c = q(t.max, s);\n          return o.push({\n            value: c,\n            major: Fs(s)\n          }), o;\n        }({\n          min: t._userMin,\n          max: t._userMax\n        }, t);\n\n        return \"ticks\" === e.bounds && Rt(i, t, \"value\"), e.reverse ? (i.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), i;\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        return void 0 === t ? \"0\" : zi(t, this.chart.options.locale);\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this,\n            e = t.min;\n        _get2(_getPrototypeOf(Vs.prototype), \"configure\", this).call(this), t._startValue = Pt(e), t._valueRange = Pt(t.max) - Pt(e);\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        var e = this;\n        return void 0 !== t && 0 !== t || (t = e.min), null === t || isNaN(t) ? NaN : e.getPixelForDecimal(t === e.min ? 0 : (Pt(t) - e._startValue) / e._valueRange);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this,\n            i = e.getDecimalForPixel(t);\n        return Math.pow(10, e._startValue + i * e._valueRange);\n      }\n    }]);\n\n    return Vs;\n  }(Xi);\n\n  function Bs(t) {\n    var e = t.ticks;\n\n    if (e.display && t.display) {\n      var _t55 = ze(e.backdropPadding);\n\n      return K(e.font && e.font.size, xt.font.size) + _t55.height;\n    }\n\n    return 0;\n  }\n\n  function Ws(t, e, i, n, o) {\n    return t === n || t === o ? {\n      start: e - i / 2,\n      end: e + i / 2\n    } : t < n || t > o ? {\n      start: e - i,\n      end: e\n    } : {\n      start: e,\n      end: e + i\n    };\n  }\n\n  function Hs(t) {\n    return 0 === t || 180 === t ? \"center\" : t < 180 ? \"left\" : \"right\";\n  }\n\n  function Ns(t, e, i) {\n    90 === t || 270 === t ? i.y -= e.h / 2 : (t > 270 || t < 90) && (i.y -= e.h);\n  }\n\n  function js(t, e, i, n) {\n    var o = t.ctx;\n    if (i) o.arc(t.xCenter, t.yCenter, e, 0, _t);else {\n      var _i59 = t.getPointPosition(0, e);\n\n      o.moveTo(_i59.x, _i59.y);\n\n      for (var _s24 = 1; _s24 < n; _s24++) {\n        _i59 = t.getPointPosition(_s24, e), o.lineTo(_i59.x, _i59.y);\n      }\n    }\n  }\n\n  function $s(t) {\n    return Tt(t) ? t : 0;\n  }\n\n  Vs.id = \"logarithmic\", Vs.defaults = {\n    ticks: {\n      callback: Vi.formatters.logarithmic,\n      major: {\n        enabled: !0\n      }\n    }\n  };\n\n  var Ys = /*#__PURE__*/function (_Is2) {\n    _inherits(Ys, _Is2);\n\n    var _super23 = _createSuper(Ys);\n\n    function Ys(t) {\n      var _this17;\n\n      _classCallCheck(this, Ys);\n\n      _this17 = _super23.call(this, t), _this17.xCenter = void 0, _this17.yCenter = void 0, _this17.drawingArea = void 0, _this17._pointLabels = [], _this17._pointLabelItems = [];\n      return _this17;\n    }\n\n    _createClass(Ys, [{\n      key: \"setDimensions\",\n      value: function setDimensions() {\n        var t = this;\n        t.width = t.maxWidth, t.height = t.maxHeight, t.paddingTop = Bs(t.options) / 2, t.xCenter = Math.floor(t.width / 2), t.yCenter = Math.floor((t.height - t.paddingTop) / 2), t.drawingArea = Math.min(t.height - t.paddingTop, t.width) / 2;\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getMinMax4 = t.getMinMax(!1),\n            e = _t$getMinMax4.min,\n            i = _t$getMinMax4.max;\n\n        t.min = X(e) && !isNaN(e) ? e : 0, t.max = X(i) && !isNaN(i) ? i : 0, t.handleTickRangeOptions();\n      }\n    }, {\n      key: \"computeTickLimit\",\n      value: function computeTickLimit() {\n        return Math.ceil(this.drawingArea / Bs(this.options));\n      }\n    }, {\n      key: \"generateTickLabels\",\n      value: function generateTickLabels(t) {\n        var e = this;\n        Is.prototype.generateTickLabels.call(e, t), e._pointLabels = e.getLabels().map(function (t, i) {\n          var n = Q(e.options.pointLabels.callback, [t, i], e);\n          return n || 0 === n ? n : \"\";\n        });\n      }\n    }, {\n      key: \"fit\",\n      value: function fit() {\n        var t = this,\n            e = t.options;\n        e.display && e.pointLabels.display ? function (t) {\n          var e = {\n            l: 0,\n            r: t.width,\n            t: 0,\n            b: t.height - t.paddingTop\n          },\n              i = {};\n          var n, o, s;\n          var a = [],\n              r = [],\n              l = t.getLabels().length;\n\n          for (n = 0; n < l; n++) {\n            var _l24 = t.options.pointLabels.setContext(t.getContext(n));\n\n            r[n] = _l24.padding, s = t.getPointPosition(n, t.drawingArea + r[n]);\n\n            var _u9 = Fe(_l24.font);\n\n            t.ctx.font = _u9.string, c = t.ctx, h = _u9.lineHeight, o = Y(d = t._pointLabels[n]) ? {\n              w: Ut(c, c.font, d),\n              h: d.length * h\n            } : {\n              w: c.measureText(d).width,\n              h: h\n            }, a[n] = o;\n\n            var _f7 = t.getIndexAngle(n),\n                _g6 = It(_f7),\n                _p3 = Ws(_g6, s.x, o.w, 0, 180),\n                _m4 = Ws(_g6, s.y, o.h, 90, 270);\n\n            _p3.start < e.l && (e.l = _p3.start, i.l = _f7), _p3.end > e.r && (e.r = _p3.end, i.r = _f7), _m4.start < e.t && (e.t = _m4.start, i.t = _f7), _m4.end > e.b && (e.b = _m4.end, i.b = _f7);\n          }\n\n          var c, h, d;\n          t._setReductions(t.drawingArea, e, i), t._pointLabelItems = [];\n          var u = t.options,\n              f = Bs(u),\n              g = t.getDistanceFromCenterForValue(u.ticks.reverse ? t.min : t.max);\n\n          for (n = 0; n < l; n++) {\n            var _e57 = 0 === n ? f / 2 : 0,\n                _i60 = t.getPointPosition(n, g + _e57 + r[n]),\n                _o34 = It(t.getIndexAngle(n)),\n                _s25 = a[n];\n\n            Ns(_o34, _s25, _i60);\n\n            var _l25 = Hs(_o34);\n\n            var _c21 = void 0;\n\n            _c21 = \"left\" === _l25 ? _i60.x : \"center\" === _l25 ? _i60.x - _s25.w / 2 : _i60.x - _s25.w;\n\n            var _h18 = _c21 + _s25.w;\n\n            t._pointLabelItems[n] = {\n              x: _i60.x,\n              y: _i60.y,\n              textAlign: _l25,\n              left: _c21,\n              top: _i60.y,\n              right: _h18,\n              bottom: _i60.y + _s25.h\n            };\n          }\n        }(t) : t.setCenterPoint(0, 0, 0, 0);\n      }\n    }, {\n      key: \"_setReductions\",\n      value: function _setReductions(t, e, i) {\n        var n = this;\n        var o = e.l / Math.sin(i.l),\n            s = Math.max(e.r - n.width, 0) / Math.sin(i.r),\n            a = -e.t / Math.cos(i.t),\n            r = -Math.max(e.b - (n.height - n.paddingTop), 0) / Math.cos(i.b);\n        o = $s(o), s = $s(s), a = $s(a), r = $s(r), n.drawingArea = Math.max(t / 2, Math.min(Math.floor(t - (o + s) / 2), Math.floor(t - (a + r) / 2))), n.setCenterPoint(o, s, a, r);\n      }\n    }, {\n      key: \"setCenterPoint\",\n      value: function setCenterPoint(t, e, i, n) {\n        var o = this,\n            s = o.width - e - o.drawingArea,\n            a = t + o.drawingArea,\n            r = i + o.drawingArea,\n            l = o.height - o.paddingTop - n - o.drawingArea;\n        o.xCenter = Math.floor((a + s) / 2 + o.left), o.yCenter = Math.floor((r + l) / 2 + o.top + o.paddingTop);\n      }\n    }, {\n      key: \"getIndexAngle\",\n      value: function getIndexAngle(t) {\n        return Wt(t * (_t / this.getLabels().length) + Et(this.options.startAngle || 0));\n      }\n    }, {\n      key: \"getDistanceFromCenterForValue\",\n      value: function getDistanceFromCenterForValue(t) {\n        var e = this;\n        if ($(t)) return NaN;\n        var i = e.drawingArea / (e.max - e.min);\n        return e.options.reverse ? (e.max - t) * i : (t - e.min) * i;\n      }\n    }, {\n      key: \"getValueForDistanceFromCenter\",\n      value: function getValueForDistanceFromCenter(t) {\n        if ($(t)) return NaN;\n        var e = this,\n            i = t / (e.drawingArea / (e.max - e.min));\n        return e.options.reverse ? e.max - i : e.min + i;\n      }\n    }, {\n      key: \"getPointPosition\",\n      value: function getPointPosition(t, e) {\n        var i = this,\n            n = i.getIndexAngle(t) - Mt;\n        return {\n          x: Math.cos(n) * e + i.xCenter,\n          y: Math.sin(n) * e + i.yCenter,\n          angle: n\n        };\n      }\n    }, {\n      key: \"getPointPositionForValue\",\n      value: function getPointPositionForValue(t, e) {\n        return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n      }\n    }, {\n      key: \"getBasePosition\",\n      value: function getBasePosition(t) {\n        return this.getPointPositionForValue(t || 0, this.getBaseValue());\n      }\n    }, {\n      key: \"getPointLabelPosition\",\n      value: function getPointLabelPosition(t) {\n        var _this$_pointLabelItem = this._pointLabelItems[t],\n            e = _this$_pointLabelItem.left,\n            i = _this$_pointLabelItem.top,\n            n = _this$_pointLabelItem.right,\n            o = _this$_pointLabelItem.bottom;\n        return {\n          left: e,\n          top: i,\n          right: n,\n          bottom: o\n        };\n      }\n    }, {\n      key: \"drawBackground\",\n      value: function drawBackground() {\n        var t = this,\n            _t$options3 = t.options,\n            e = _t$options3.backgroundColor,\n            i = _t$options3.grid.circular;\n\n        if (e) {\n          var _n42 = t.ctx;\n          _n42.save(), _n42.beginPath(), js(t, t.getDistanceFromCenterForValue(t._endValue), i, t.getLabels().length), _n42.closePath(), _n42.fillStyle = e, _n42.fill(), _n42.restore();\n        }\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function drawGrid() {\n        var t = this,\n            e = t.ctx,\n            i = t.options,\n            n = i.angleLines,\n            o = i.grid,\n            s = t.getLabels().length;\n        var a, r, l;\n\n        if (i.pointLabels.display && function (t, e) {\n          var i = t.ctx,\n              n = t.options.pointLabels;\n\n          for (var _o35 = e - 1; _o35 >= 0; _o35--) {\n            var _e58 = n.setContext(t.getContext(_o35)),\n                _s26 = Fe(_e58.font),\n                _t$_pointLabelItems$_ = t._pointLabelItems[_o35],\n                _a25 = _t$_pointLabelItems$_.x,\n                _r23 = _t$_pointLabelItems$_.y,\n                _l26 = _t$_pointLabelItems$_.textAlign,\n                _c22 = _t$_pointLabelItems$_.left,\n                _h19 = _t$_pointLabelItems$_.top,\n                _d9 = _t$_pointLabelItems$_.right,\n                _u10 = _t$_pointLabelItems$_.bottom,\n                _f8 = _e58.backdropColor;\n\n            if (!$(_f8)) {\n              var _t56 = ze(_e58.backdropPadding);\n\n              i.fillStyle = _f8, i.fillRect(_c22 - _t56.left, _h19 - _t56.top, _d9 - _c22 + _t56.width, _u10 - _h19 + _t56.height);\n            }\n\n            ee(i, t._pointLabels[_o35], _a25, _r23 + _s26.lineHeight / 2, _s26, {\n              color: _e58.color,\n              textAlign: _l26,\n              textBaseline: \"middle\"\n            });\n          }\n        }(t, s), o.display && t.ticks.forEach(function (e, i) {\n          if (0 !== i) {\n            r = t.getDistanceFromCenterForValue(e.value);\n\n            var _n43 = o.setContext(t.getContext(i - 1));\n\n            !function (t, e, i, n) {\n              var o = t.ctx,\n                  s = e.circular,\n                  a = e.color,\n                  r = e.lineWidth;\n              !s && !n || !a || !r || i < 0 || (o.save(), o.strokeStyle = a, o.lineWidth = r, o.setLineDash(e.borderDash), o.lineDashOffset = e.borderDashOffset, o.beginPath(), js(t, i, s, n), o.closePath(), o.stroke(), o.restore());\n            }(t, _n43, r, s);\n          }\n        }), n.display) {\n          for (e.save(), a = t.getLabels().length - 1; a >= 0; a--) {\n            var _o36 = n.setContext(t.getContext(a)),\n                _s27 = _o36.color,\n                _c23 = _o36.lineWidth;\n\n            _c23 && _s27 && (e.lineWidth = _c23, e.strokeStyle = _s27, e.setLineDash(_o36.borderDash), e.lineDashOffset = _o36.borderDashOffset, r = t.getDistanceFromCenterForValue(i.ticks.reverse ? t.min : t.max), l = t.getPointPosition(a, r), e.beginPath(), e.moveTo(t.xCenter, t.yCenter), e.lineTo(l.x, l.y), e.stroke());\n          }\n\n          e.restore();\n        }\n      }\n    }, {\n      key: \"drawBorder\",\n      value: function drawBorder() {}\n    }, {\n      key: \"drawLabels\",\n      value: function drawLabels() {\n        var t = this,\n            e = t.ctx,\n            i = t.options,\n            n = i.ticks;\n        if (!n.display) return;\n        var o = t.getIndexAngle(0);\n        var s, a;\n        e.save(), e.translate(t.xCenter, t.yCenter), e.rotate(o), e.textAlign = \"center\", e.textBaseline = \"middle\", t.ticks.forEach(function (o, r) {\n          if (0 === r && !i.reverse) return;\n          var l = n.setContext(t.getContext(r)),\n              c = Fe(l.font);\n\n          if (s = t.getDistanceFromCenterForValue(t.ticks[r].value), l.showLabelBackdrop) {\n            a = e.measureText(o.label).width, e.fillStyle = l.backdropColor;\n\n            var _t57 = ze(l.backdropPadding);\n\n            e.fillRect(-a / 2 - _t57.left, -s - c.size / 2 - _t57.top, a + _t57.width, c.size + _t57.height);\n          }\n\n          ee(e, o.label, 0, -s, c, {\n            color: l.color\n          });\n        }), e.restore();\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle() {}\n    }]);\n\n    return Ys;\n  }(Is);\n\n  Ys.id = \"radialLinear\", Ys.defaults = {\n    display: !0,\n    animate: !0,\n    position: \"chartArea\",\n    angleLines: {\n      display: !0,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0\n    },\n    grid: {\n      circular: !1\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: !0,\n      callback: Vi.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: void 0,\n      backdropPadding: 2,\n      display: !0,\n      font: {\n        size: 10\n      },\n      callback: function callback(t) {\n        return t;\n      },\n      padding: 5\n    }\n  }, Ys.defaultRoutes = {\n    \"angleLines.color\": \"borderColor\",\n    \"pointLabels.color\": \"color\",\n    \"ticks.color\": \"color\"\n  }, Ys.descriptors = {\n    angleLines: {\n      _fallback: \"grid\"\n    }\n  };\n  var Us = {\n    millisecond: {\n      common: !0,\n      size: 1,\n      steps: 1e3\n    },\n    second: {\n      common: !0,\n      size: 1e3,\n      steps: 60\n    },\n    minute: {\n      common: !0,\n      size: 6e4,\n      steps: 60\n    },\n    hour: {\n      common: !0,\n      size: 36e5,\n      steps: 24\n    },\n    day: {\n      common: !0,\n      size: 864e5,\n      steps: 30\n    },\n    week: {\n      common: !1,\n      size: 6048e5,\n      steps: 4\n    },\n    month: {\n      common: !0,\n      size: 2628e6,\n      steps: 12\n    },\n    quarter: {\n      common: !1,\n      size: 7884e6,\n      steps: 4\n    },\n    year: {\n      common: !0,\n      size: 3154e7\n    }\n  },\n      Xs = Object.keys(Us);\n\n  function qs(t, e) {\n    return t - e;\n  }\n\n  function Ks(t, e) {\n    if ($(e)) return null;\n    var i = t._adapter,\n        _t$_parseOpts = t._parseOpts,\n        n = _t$_parseOpts.parser,\n        o = _t$_parseOpts.round,\n        s = _t$_parseOpts.isoWeekday;\n    var a = e;\n    return \"function\" == typeof n && (a = n(a)), X(a) || (a = \"string\" == typeof n ? i.parse(a, n) : i.parse(a)), null === a ? null : (o && (a = \"week\" !== o || !Tt(s) && !0 !== s ? i.startOf(a, o) : i.startOf(a, \"isoWeek\", s)), +a);\n  }\n\n  function Gs(t, e, i, n) {\n    var o = Xs.length;\n\n    for (var _s28 = Xs.indexOf(t); _s28 < o - 1; ++_s28) {\n      var _t58 = Us[Xs[_s28]],\n          _o37 = _t58.steps ? _t58.steps : Number.MAX_SAFE_INTEGER;\n\n      if (_t58.common && Math.ceil((i - e) / (_o37 * _t58.size)) <= n) return Xs[_s28];\n    }\n\n    return Xs[o - 1];\n  }\n\n  function Zs(t, e, i) {\n    if (i) {\n      if (i.length) {\n        var _ne = ne(i, e),\n            _n44 = _ne.lo,\n            _o38 = _ne.hi;\n\n        t[i[_n44] >= e ? i[_n44] : i[_o38]] = !0;\n      }\n    } else t[e] = !0;\n  }\n\n  function Qs(t, e, i) {\n    var n = [],\n        o = {},\n        s = e.length;\n    var a, r;\n\n    for (a = 0; a < s; ++a) {\n      r = e[a], o[r] = a, n.push({\n        value: r,\n        major: !1\n      });\n    }\n\n    return 0 !== s && i ? function (t, e, i, n) {\n      var o = t._adapter,\n          s = +o.startOf(e[0].value, n),\n          a = e[e.length - 1].value;\n      var r, l;\n\n      for (r = s; r <= a; r = +o.add(r, 1, n)) {\n        l = i[r], l >= 0 && (e[l].major = !0);\n      }\n\n      return e;\n    }(t, n, o, i) : n;\n  }\n\n  var Js = /*#__PURE__*/function (_Xi4) {\n    _inherits(Js, _Xi4);\n\n    var _super24 = _createSuper(Js);\n\n    function Js(t) {\n      var _this18;\n\n      _classCallCheck(this, Js);\n\n      _this18 = _super24.call(this, t), _this18._cache = {\n        data: [],\n        labels: [],\n        all: []\n      }, _this18._unit = \"day\", _this18._majorUnit = void 0, _this18._offsets = {}, _this18._normalized = !1, _this18._parseOpts = void 0;\n      return _this18;\n    }\n\n    _createClass(Js, [{\n      key: \"init\",\n      value: function init(t, e) {\n        var i = t.time || (t.time = {}),\n            n = this._adapter = new so._date(t.adapters.date);\n        st(i.displayFormats, n.formats()), this._parseOpts = {\n          parser: i.parser,\n          round: i.round,\n          isoWeekday: i.isoWeekday\n        }, _get2(_getPrototypeOf(Js.prototype), \"init\", this).call(this, t), this._normalized = e.normalized;\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        return void 0 === t ? null : Ks(this, t);\n      }\n    }, {\n      key: \"beforeLayout\",\n      value: function beforeLayout() {\n        _get2(_getPrototypeOf(Js.prototype), \"beforeLayout\", this).call(this), this._cache = {\n          data: [],\n          labels: [],\n          all: []\n        };\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            e = t.options,\n            i = t._adapter,\n            n = e.time.unit || \"day\";\n\n        var _t$getUserBounds5 = t.getUserBounds(),\n            o = _t$getUserBounds5.min,\n            s = _t$getUserBounds5.max,\n            a = _t$getUserBounds5.minDefined,\n            r = _t$getUserBounds5.maxDefined;\n\n        function l(t) {\n          a || isNaN(t.min) || (o = Math.min(o, t.min)), r || isNaN(t.max) || (s = Math.max(s, t.max));\n        }\n\n        a && r || (l(t._getLabelBounds()), \"ticks\" === e.bounds && \"labels\" === e.ticks.source || l(t.getMinMax(!1))), o = X(o) && !isNaN(o) ? o : +i.startOf(Date.now(), n), s = X(s) && !isNaN(s) ? s : +i.endOf(Date.now(), n) + 1, t.min = Math.min(o, s - 1), t.max = Math.max(o + 1, s);\n      }\n    }, {\n      key: \"_getLabelBounds\",\n      value: function _getLabelBounds() {\n        var t = this.getLabelTimestamps();\n        var e = Number.POSITIVE_INFINITY,\n            i = Number.NEGATIVE_INFINITY;\n        return t.length && (e = t[0], i = t[t.length - 1]), {\n          min: e,\n          max: i\n        };\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.options,\n            i = e.time,\n            n = e.ticks,\n            o = \"labels\" === n.source ? t.getLabelTimestamps() : t._generate();\n        \"ticks\" === e.bounds && o.length && (t.min = t._userMin || o[0], t.max = t._userMax || o[o.length - 1]);\n        var s = t.min,\n            a = ae(o, s, t.max);\n        return t._unit = i.unit || (n.autoSkip ? Gs(i.minUnit, t.min, t.max, t._getLabelCapacity(s)) : function (t, e, i, n, o) {\n          for (var _s29 = Xs.length - 1; _s29 >= Xs.indexOf(i); _s29--) {\n            var _i61 = Xs[_s29];\n            if (Us[_i61].common && t._adapter.diff(o, n, _i61) >= e - 1) return _i61;\n          }\n\n          return Xs[i ? Xs.indexOf(i) : 0];\n        }(t, a.length, i.minUnit, t.min, t.max)), t._majorUnit = n.major.enabled && \"year\" !== t._unit ? function (t) {\n          for (var _e59 = Xs.indexOf(t) + 1, _i62 = Xs.length; _e59 < _i62; ++_e59) {\n            if (Us[Xs[_e59]].common) return Xs[_e59];\n          }\n        }(t._unit) : void 0, t.initOffsets(o), e.reverse && a.reverse(), Qs(t, a, t._majorUnit);\n      }\n    }, {\n      key: \"initOffsets\",\n      value: function initOffsets(t) {\n        var e = this;\n        var i,\n            n,\n            o = 0,\n            s = 0;\n        e.options.offset && t.length && (i = e.getDecimalForValue(t[0]), o = 1 === t.length ? 1 - i : (e.getDecimalForValue(t[1]) - i) / 2, n = e.getDecimalForValue(t[t.length - 1]), s = 1 === t.length ? n : (n - e.getDecimalForValue(t[t.length - 2])) / 2);\n        var a = t.length < 3 ? .5 : .25;\n        o = Nt(o, 0, a), s = Nt(s, 0, a), e._offsets = {\n          start: o,\n          end: s,\n          factor: 1 / (o + 1 + s)\n        };\n      }\n    }, {\n      key: \"_generate\",\n      value: function _generate() {\n        var t = this,\n            e = t._adapter,\n            i = t.min,\n            n = t.max,\n            o = t.options,\n            s = o.time,\n            a = s.unit || Gs(s.minUnit, i, n, t._getLabelCapacity(i)),\n            r = K(s.stepSize, 1),\n            l = \"week\" === a && s.isoWeekday,\n            c = Tt(l) || !0 === l,\n            h = {};\n        var d,\n            u,\n            f = i;\n        if (c && (f = +e.startOf(f, \"isoWeek\", l)), f = +e.startOf(f, c ? \"day\" : a), e.diff(n, i, a) > 1e5 * r) throw new Error(i + \" and \" + n + \" are too far apart with stepSize of \" + r + \" \" + a);\n        var g = \"data\" === o.ticks.source && t.getDataTimestamps();\n\n        for (d = f, u = 0; d < n; d = +e.add(d, r, a), u++) {\n          Zs(h, d, g);\n        }\n\n        return d !== n && \"ticks\" !== o.bounds && 1 !== u || Zs(h, d, g), Object.keys(h).sort(function (t, e) {\n          return t - e;\n        }).map(function (t) {\n          return +t;\n        });\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        var e = this._adapter,\n            i = this.options.time;\n        return i.tooltipFormat ? e.format(t, i.tooltipFormat) : e.format(t, i.displayFormats.datetime);\n      }\n    }, {\n      key: \"_tickFormatFunction\",\n      value: function _tickFormatFunction(t, e, i, n) {\n        var o = this,\n            s = o.options,\n            a = s.time.displayFormats,\n            r = o._unit,\n            l = o._majorUnit,\n            c = r && a[r],\n            h = l && a[l],\n            d = i[e],\n            u = l && h && d && d.major,\n            f = o._adapter.format(t, n || (u ? h : c)),\n            g = s.ticks.callback;\n\n        return g ? Q(g, [f, e, i], o) : f;\n      }\n    }, {\n      key: \"generateTickLabels\",\n      value: function generateTickLabels(t) {\n        var e, i, n;\n\n        for (e = 0, i = t.length; e < i; ++e) {\n          n = t[e], n.label = this._tickFormatFunction(n.value, e, t);\n        }\n      }\n    }, {\n      key: \"getDecimalForValue\",\n      value: function getDecimalForValue(t) {\n        var e = this;\n        return null === t ? NaN : (t - e.min) / (e.max - e.min);\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        var e = this,\n            i = e._offsets,\n            n = e.getDecimalForValue(t);\n        return e.getPixelForDecimal((i.start + n) * i.factor);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this,\n            i = e._offsets,\n            n = e.getDecimalForPixel(t) / i.factor - i.end;\n        return e.min + n * (e.max - e.min);\n      }\n    }, {\n      key: \"_getLabelSize\",\n      value: function _getLabelSize(t) {\n        var e = this,\n            i = e.options.ticks,\n            n = e.ctx.measureText(t).width,\n            o = Et(e.isHorizontal() ? i.maxRotation : i.minRotation),\n            s = Math.cos(o),\n            a = Math.sin(o),\n            r = e._resolveTickFontOptions(0).size;\n\n        return {\n          w: n * s + r * a,\n          h: n * a + r * s\n        };\n      }\n    }, {\n      key: \"_getLabelCapacity\",\n      value: function _getLabelCapacity(t) {\n        var e = this,\n            i = e.options.time,\n            n = i.displayFormats,\n            o = n[i.unit] || n.millisecond,\n            s = e._tickFormatFunction(t, 0, Qs(e, [t], e._majorUnit), o),\n            a = e._getLabelSize(s),\n            r = Math.floor(e.isHorizontal() ? e.width / a.w : e.height / a.h) - 1;\n\n        return r > 0 ? r : 1;\n      }\n    }, {\n      key: \"getDataTimestamps\",\n      value: function getDataTimestamps() {\n        var t = this;\n        var e,\n            i,\n            n = t._cache.data || [];\n        if (n.length) return n;\n        var o = t.getMatchingVisibleMetas();\n        if (t._normalized && o.length) return t._cache.data = o[0].controller.getAllParsedValues(t);\n\n        for (e = 0, i = o.length; e < i; ++e) {\n          n = n.concat(o[e].controller.getAllParsedValues(t));\n        }\n\n        return t._cache.data = t.normalize(n);\n      }\n    }, {\n      key: \"getLabelTimestamps\",\n      value: function getLabelTimestamps() {\n        var t = this,\n            e = t._cache.labels || [];\n        var i, n;\n        if (e.length) return e;\n        var o = t.getLabels();\n\n        for (i = 0, n = o.length; i < n; ++i) {\n          e.push(Ks(t, o[i]));\n        }\n\n        return t._cache.labels = t._normalized ? e : t.normalize(e);\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize(t) {\n        return he(t.sort(qs));\n      }\n    }]);\n\n    return Js;\n  }(Xi);\n\n  function ta(t, e, i) {\n    var n, o, s, a;\n    if (i) n = Math.floor(e), o = Math.ceil(e), s = t[n], a = t[o];else {\n      var _i63 = ne(t, e);\n\n      s = _i63.lo, a = _i63.hi, n = t[s], o = t[a];\n    }\n    var r = o - n;\n    return r ? s + (a - s) * (e - n) / r : s;\n  }\n\n  Js.id = \"time\", Js.defaults = {\n    bounds: \"data\",\n    adapters: {},\n    time: {\n      parser: !1,\n      unit: !1,\n      round: !1,\n      isoWeekday: !1,\n      minUnit: \"millisecond\",\n      displayFormats: {}\n    },\n    ticks: {\n      source: \"auto\",\n      major: {\n        enabled: !1\n      }\n    }\n  };\n\n  var ea = /*#__PURE__*/function (_Js) {\n    _inherits(ea, _Js);\n\n    var _super25 = _createSuper(ea);\n\n    function ea(t) {\n      var _this19;\n\n      _classCallCheck(this, ea);\n\n      _this19 = _super25.call(this, t), _this19._table = [], _this19._maxIndex = void 0;\n      return _this19;\n    }\n\n    _createClass(ea, [{\n      key: \"initOffsets\",\n      value: function initOffsets() {\n        var t = this,\n            e = t._getTimestampsForTable();\n\n        t._table = t.buildLookupTable(e), t._maxIndex = t._table.length - 1, _get2(_getPrototypeOf(ea.prototype), \"initOffsets\", this).call(this, e);\n      }\n    }, {\n      key: \"buildLookupTable\",\n      value: function buildLookupTable(t) {\n        var e = this.min,\n            i = this.max;\n        if (!t.length) return [{\n          time: e,\n          pos: 0\n        }, {\n          time: i,\n          pos: 1\n        }];\n        var n = [e];\n        var o, s, a;\n\n        for (o = 0, s = t.length; o < s; ++o) {\n          a = t[o], a > e && a < i && n.push(a);\n        }\n\n        return n.push(i), n;\n      }\n    }, {\n      key: \"_getTimestampsForTable\",\n      value: function _getTimestampsForTable() {\n        var t = this;\n        var e = t._cache.all || [];\n        if (e.length) return e;\n        var i = t.getDataTimestamps(),\n            n = t.getLabelTimestamps();\n        return e = i.length && n.length ? t.normalize(i.concat(n)) : i.length ? i : n, e = t._cache.all = e, e;\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t, e) {\n        var i = this,\n            n = i._offsets,\n            o = i._normalized && i._maxIndex > 0 && !$(e) ? e / i._maxIndex : i.getDecimalForValue(t);\n        return i.getPixelForDecimal((n.start + o) * n.factor);\n      }\n    }, {\n      key: \"getDecimalForValue\",\n      value: function getDecimalForValue(t) {\n        return ta(this._table, t) / this._maxIndex;\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this,\n            i = e._offsets,\n            n = e.getDecimalForPixel(t) / i.factor - i.end;\n        return ta(e._table, n * this._maxIndex, !0);\n      }\n    }]);\n\n    return ea;\n  }(Js);\n\n  ea.id = \"timeseries\", ea.defaults = Js.defaults;\n  var ia = Object.freeze({\n    __proto__: null,\n    CategoryScale: Rs,\n    LinearScale: zs,\n    LogarithmicScale: Vs,\n    RadialLinearScale: Ys,\n    TimeScale: Js,\n    TimeSeriesScale: ea\n  });\n  return to.register(_o, ia, Uo, As), to.helpers = _objectSpread({}, On), to._adapters = so, to.Animation = _i, to.Animations = vi, to.animator = a, to.controllers = An.controllers.items, to.DatasetController = Ri, to.Element = Ei, to.elements = Uo, to.Interaction = Oe, to.layouts = Ge, to.platforms = ui, to.Scale = Xi, to.Ticks = Vi, Object.assign(to, _o, ia, Uo, As, ui), to.Chart = to, \"undefined\" != typeof window && (window.Chart = to), to;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/views/elegant/plugins/chart.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/views/elegant/plugins/chart.min.js");
/******/ 	
/******/ })()
;